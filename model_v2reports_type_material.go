/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V2reportsTypeMaterial struct for V2reportsTypeMaterial
type V2reportsTypeMaterial struct {
	TypeLabel *string `json:"type_label,omitempty"`
	TypeDisplayText *string `json:"type_display_text,omitempty"`
}

// NewV2reportsTypeMaterial instantiates a new V2reportsTypeMaterial object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2reportsTypeMaterial() *V2reportsTypeMaterial {
	this := V2reportsTypeMaterial{}
	return &this
}

// NewV2reportsTypeMaterialWithDefaults instantiates a new V2reportsTypeMaterial object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2reportsTypeMaterialWithDefaults() *V2reportsTypeMaterial {
	this := V2reportsTypeMaterial{}
	return &this
}

// GetTypeLabel returns the TypeLabel field value if set, zero value otherwise.
func (o *V2reportsTypeMaterial) GetTypeLabel() string {
	if o == nil || o.TypeLabel == nil {
		var ret string
		return ret
	}
	return *o.TypeLabel
}

// GetTypeLabelOk returns a tuple with the TypeLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsTypeMaterial) GetTypeLabelOk() (*string, bool) {
	if o == nil || o.TypeLabel == nil {
		return nil, false
	}
	return o.TypeLabel, true
}

// HasTypeLabel returns a boolean if a field has been set.
func (o *V2reportsTypeMaterial) HasTypeLabel() bool {
	if o != nil && o.TypeLabel != nil {
		return true
	}

	return false
}

// SetTypeLabel gets a reference to the given string and assigns it to the TypeLabel field.
func (o *V2reportsTypeMaterial) SetTypeLabel(v string) {
	o.TypeLabel = &v
}

// GetTypeDisplayText returns the TypeDisplayText field value if set, zero value otherwise.
func (o *V2reportsTypeMaterial) GetTypeDisplayText() string {
	if o == nil || o.TypeDisplayText == nil {
		var ret string
		return ret
	}
	return *o.TypeDisplayText
}

// GetTypeDisplayTextOk returns a tuple with the TypeDisplayText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsTypeMaterial) GetTypeDisplayTextOk() (*string, bool) {
	if o == nil || o.TypeDisplayText == nil {
		return nil, false
	}
	return o.TypeDisplayText, true
}

// HasTypeDisplayText returns a boolean if a field has been set.
func (o *V2reportsTypeMaterial) HasTypeDisplayText() bool {
	if o != nil && o.TypeDisplayText != nil {
		return true
	}

	return false
}

// SetTypeDisplayText gets a reference to the given string and assigns it to the TypeDisplayText field.
func (o *V2reportsTypeMaterial) SetTypeDisplayText(v string) {
	o.TypeDisplayText = &v
}

func (o V2reportsTypeMaterial) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TypeLabel != nil {
		toSerialize["type_label"] = o.TypeLabel
	}
	if o.TypeDisplayText != nil {
		toSerialize["type_display_text"] = o.TypeDisplayText
	}
	return json.Marshal(toSerialize)
}

type NullableV2reportsTypeMaterial struct {
	value *V2reportsTypeMaterial
	isSet bool
}

func (v NullableV2reportsTypeMaterial) Get() *V2reportsTypeMaterial {
	return v.value
}

func (v *NullableV2reportsTypeMaterial) Set(val *V2reportsTypeMaterial) {
	v.value = val
	v.isSet = true
}

func (v NullableV2reportsTypeMaterial) IsSet() bool {
	return v.isSet
}

func (v *NullableV2reportsTypeMaterial) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2reportsTypeMaterial(val *V2reportsTypeMaterial) *NullableV2reportsTypeMaterial {
	return &NullableV2reportsTypeMaterial{value: val, isSet: true}
}

func (v NullableV2reportsTypeMaterial) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2reportsTypeMaterial) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


