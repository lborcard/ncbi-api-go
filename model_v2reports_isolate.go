/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ncbi-openapi-v2_goland

import (
	"encoding/json"
)

// V2reportsIsolate struct for V2reportsIsolate
type V2reportsIsolate struct {
	Name *string `json:"name,omitempty"`
	Source *string `json:"source,omitempty"`
	CollectionDate *string `json:"collection_date,omitempty"`
}

// NewV2reportsIsolate instantiates a new V2reportsIsolate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2reportsIsolate() *V2reportsIsolate {
	this := V2reportsIsolate{}
	return &this
}

// NewV2reportsIsolateWithDefaults instantiates a new V2reportsIsolate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2reportsIsolateWithDefaults() *V2reportsIsolate {
	this := V2reportsIsolate{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V2reportsIsolate) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsIsolate) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V2reportsIsolate) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V2reportsIsolate) SetName(v string) {
	o.Name = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *V2reportsIsolate) GetSource() string {
	if o == nil || o.Source == nil {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsIsolate) GetSourceOk() (*string, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *V2reportsIsolate) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *V2reportsIsolate) SetSource(v string) {
	o.Source = &v
}

// GetCollectionDate returns the CollectionDate field value if set, zero value otherwise.
func (o *V2reportsIsolate) GetCollectionDate() string {
	if o == nil || o.CollectionDate == nil {
		var ret string
		return ret
	}
	return *o.CollectionDate
}

// GetCollectionDateOk returns a tuple with the CollectionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsIsolate) GetCollectionDateOk() (*string, bool) {
	if o == nil || o.CollectionDate == nil {
		return nil, false
	}
	return o.CollectionDate, true
}

// HasCollectionDate returns a boolean if a field has been set.
func (o *V2reportsIsolate) HasCollectionDate() bool {
	if o != nil && o.CollectionDate != nil {
		return true
	}

	return false
}

// SetCollectionDate gets a reference to the given string and assigns it to the CollectionDate field.
func (o *V2reportsIsolate) SetCollectionDate(v string) {
	o.CollectionDate = &v
}

func (o V2reportsIsolate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.CollectionDate != nil {
		toSerialize["collection_date"] = o.CollectionDate
	}
	return json.Marshal(toSerialize)
}

type NullableV2reportsIsolate struct {
	value *V2reportsIsolate
	isSet bool
}

func (v NullableV2reportsIsolate) Get() *V2reportsIsolate {
	return v.value
}

func (v *NullableV2reportsIsolate) Set(val *V2reportsIsolate) {
	v.value = val
	v.isSet = true
}

func (v NullableV2reportsIsolate) IsSet() bool {
	return v.isSet
}

func (v *NullableV2reportsIsolate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2reportsIsolate(val *V2reportsIsolate) *NullableV2reportsIsolate {
	return &NullableV2reportsIsolate{value: val, isSet: true}
}

func (v NullableV2reportsIsolate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2reportsIsolate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


