/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ncbi-openapi-v2_goland

import (
	"encoding/json"
)

// V2reportsGenomicLocation struct for V2reportsGenomicLocation
type V2reportsGenomicLocation struct {
	GenomicAccessionVersion *string `json:"genomic_accession_version,omitempty"`
	SequenceName *string `json:"sequence_name,omitempty"`
	GenomicRange *V2reportsRange `json:"genomic_range,omitempty"`
	Exons []V2reportsRange `json:"exons,omitempty"`
}

// NewV2reportsGenomicLocation instantiates a new V2reportsGenomicLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2reportsGenomicLocation() *V2reportsGenomicLocation {
	this := V2reportsGenomicLocation{}
	return &this
}

// NewV2reportsGenomicLocationWithDefaults instantiates a new V2reportsGenomicLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2reportsGenomicLocationWithDefaults() *V2reportsGenomicLocation {
	this := V2reportsGenomicLocation{}
	return &this
}

// GetGenomicAccessionVersion returns the GenomicAccessionVersion field value if set, zero value otherwise.
func (o *V2reportsGenomicLocation) GetGenomicAccessionVersion() string {
	if o == nil || o.GenomicAccessionVersion == nil {
		var ret string
		return ret
	}
	return *o.GenomicAccessionVersion
}

// GetGenomicAccessionVersionOk returns a tuple with the GenomicAccessionVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsGenomicLocation) GetGenomicAccessionVersionOk() (*string, bool) {
	if o == nil || o.GenomicAccessionVersion == nil {
		return nil, false
	}
	return o.GenomicAccessionVersion, true
}

// HasGenomicAccessionVersion returns a boolean if a field has been set.
func (o *V2reportsGenomicLocation) HasGenomicAccessionVersion() bool {
	if o != nil && o.GenomicAccessionVersion != nil {
		return true
	}

	return false
}

// SetGenomicAccessionVersion gets a reference to the given string and assigns it to the GenomicAccessionVersion field.
func (o *V2reportsGenomicLocation) SetGenomicAccessionVersion(v string) {
	o.GenomicAccessionVersion = &v
}

// GetSequenceName returns the SequenceName field value if set, zero value otherwise.
func (o *V2reportsGenomicLocation) GetSequenceName() string {
	if o == nil || o.SequenceName == nil {
		var ret string
		return ret
	}
	return *o.SequenceName
}

// GetSequenceNameOk returns a tuple with the SequenceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsGenomicLocation) GetSequenceNameOk() (*string, bool) {
	if o == nil || o.SequenceName == nil {
		return nil, false
	}
	return o.SequenceName, true
}

// HasSequenceName returns a boolean if a field has been set.
func (o *V2reportsGenomicLocation) HasSequenceName() bool {
	if o != nil && o.SequenceName != nil {
		return true
	}

	return false
}

// SetSequenceName gets a reference to the given string and assigns it to the SequenceName field.
func (o *V2reportsGenomicLocation) SetSequenceName(v string) {
	o.SequenceName = &v
}

// GetGenomicRange returns the GenomicRange field value if set, zero value otherwise.
func (o *V2reportsGenomicLocation) GetGenomicRange() V2reportsRange {
	if o == nil || o.GenomicRange == nil {
		var ret V2reportsRange
		return ret
	}
	return *o.GenomicRange
}

// GetGenomicRangeOk returns a tuple with the GenomicRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsGenomicLocation) GetGenomicRangeOk() (*V2reportsRange, bool) {
	if o == nil || o.GenomicRange == nil {
		return nil, false
	}
	return o.GenomicRange, true
}

// HasGenomicRange returns a boolean if a field has been set.
func (o *V2reportsGenomicLocation) HasGenomicRange() bool {
	if o != nil && o.GenomicRange != nil {
		return true
	}

	return false
}

// SetGenomicRange gets a reference to the given V2reportsRange and assigns it to the GenomicRange field.
func (o *V2reportsGenomicLocation) SetGenomicRange(v V2reportsRange) {
	o.GenomicRange = &v
}

// GetExons returns the Exons field value if set, zero value otherwise.
func (o *V2reportsGenomicLocation) GetExons() []V2reportsRange {
	if o == nil || o.Exons == nil {
		var ret []V2reportsRange
		return ret
	}
	return o.Exons
}

// GetExonsOk returns a tuple with the Exons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsGenomicLocation) GetExonsOk() ([]V2reportsRange, bool) {
	if o == nil || o.Exons == nil {
		return nil, false
	}
	return o.Exons, true
}

// HasExons returns a boolean if a field has been set.
func (o *V2reportsGenomicLocation) HasExons() bool {
	if o != nil && o.Exons != nil {
		return true
	}

	return false
}

// SetExons gets a reference to the given []V2reportsRange and assigns it to the Exons field.
func (o *V2reportsGenomicLocation) SetExons(v []V2reportsRange) {
	o.Exons = v
}

func (o V2reportsGenomicLocation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.GenomicAccessionVersion != nil {
		toSerialize["genomic_accession_version"] = o.GenomicAccessionVersion
	}
	if o.SequenceName != nil {
		toSerialize["sequence_name"] = o.SequenceName
	}
	if o.GenomicRange != nil {
		toSerialize["genomic_range"] = o.GenomicRange
	}
	if o.Exons != nil {
		toSerialize["exons"] = o.Exons
	}
	return json.Marshal(toSerialize)
}

type NullableV2reportsGenomicLocation struct {
	value *V2reportsGenomicLocation
	isSet bool
}

func (v NullableV2reportsGenomicLocation) Get() *V2reportsGenomicLocation {
	return v.value
}

func (v *NullableV2reportsGenomicLocation) Set(val *V2reportsGenomicLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableV2reportsGenomicLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableV2reportsGenomicLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2reportsGenomicLocation(val *V2reportsGenomicLocation) *NullableV2reportsGenomicLocation {
	return &NullableV2reportsGenomicLocation{value: val, isSet: true}
}

func (v NullableV2reportsGenomicLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2reportsGenomicLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


