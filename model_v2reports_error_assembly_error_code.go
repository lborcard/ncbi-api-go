/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// V2reportsErrorAssemblyErrorCode the model 'V2reportsErrorAssemblyErrorCode'
type V2reportsErrorAssemblyErrorCode string

// List of v2reportsErrorAssemblyErrorCode
const (
	V2REPORTSERRORASSEMBLYERRORCODE_UNKNOWN_ASSEMBLY_ERROR_CODE V2reportsErrorAssemblyErrorCode = "UNKNOWN_ASSEMBLY_ERROR_CODE"
	V2REPORTSERRORASSEMBLYERRORCODE_INVALID_BIOPROJECT_IDS V2reportsErrorAssemblyErrorCode = "INVALID_BIOPROJECT_IDS"
	V2REPORTSERRORASSEMBLYERRORCODE_NO_ASSEMBLIES_FOR_BIOPROJECTS V2reportsErrorAssemblyErrorCode = "NO_ASSEMBLIES_FOR_BIOPROJECTS"
	V2REPORTSERRORASSEMBLYERRORCODE_INVALID_TAXON V2reportsErrorAssemblyErrorCode = "INVALID_TAXON"
	V2REPORTSERRORASSEMBLYERRORCODE_MISSING_SEARCH_FIELD V2reportsErrorAssemblyErrorCode = "MISSING_SEARCH_FIELD"
	V2REPORTSERRORASSEMBLYERRORCODE_INVALID_BIOSAMPLE_IDS V2reportsErrorAssemblyErrorCode = "INVALID_BIOSAMPLE_IDS"
	V2REPORTSERRORASSEMBLYERRORCODE_NO_ASSEMBLIES_FOR_BIOSAMPLE_IDS V2reportsErrorAssemblyErrorCode = "NO_ASSEMBLIES_FOR_BIOSAMPLE_IDS"
	V2REPORTSERRORASSEMBLYERRORCODE_NO_ASSEMBLIES_FOR_ASSEMBLY_NAMES V2reportsErrorAssemblyErrorCode = "NO_ASSEMBLIES_FOR_ASSEMBLY_NAMES"
	V2REPORTSERRORASSEMBLYERRORCODE_INVALID_WGS_ACCESSIONS V2reportsErrorAssemblyErrorCode = "INVALID_WGS_ACCESSIONS"
	V2REPORTSERRORASSEMBLYERRORCODE_NO_ASSEMBLIES_FOR_WGS_ACCESSIONS V2reportsErrorAssemblyErrorCode = "NO_ASSEMBLIES_FOR_WGS_ACCESSIONS"
)

// All allowed values of V2reportsErrorAssemblyErrorCode enum
var AllowedV2reportsErrorAssemblyErrorCodeEnumValues = []V2reportsErrorAssemblyErrorCode{
	"UNKNOWN_ASSEMBLY_ERROR_CODE",
	"INVALID_BIOPROJECT_IDS",
	"NO_ASSEMBLIES_FOR_BIOPROJECTS",
	"INVALID_TAXON",
	"MISSING_SEARCH_FIELD",
	"INVALID_BIOSAMPLE_IDS",
	"NO_ASSEMBLIES_FOR_BIOSAMPLE_IDS",
	"NO_ASSEMBLIES_FOR_ASSEMBLY_NAMES",
	"INVALID_WGS_ACCESSIONS",
	"NO_ASSEMBLIES_FOR_WGS_ACCESSIONS",
}

func (v *V2reportsErrorAssemblyErrorCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V2reportsErrorAssemblyErrorCode(value)
	for _, existing := range AllowedV2reportsErrorAssemblyErrorCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V2reportsErrorAssemblyErrorCode", value)
}

// NewV2reportsErrorAssemblyErrorCodeFromValue returns a pointer to a valid V2reportsErrorAssemblyErrorCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV2reportsErrorAssemblyErrorCodeFromValue(v string) (*V2reportsErrorAssemblyErrorCode, error) {
	ev := V2reportsErrorAssemblyErrorCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V2reportsErrorAssemblyErrorCode: valid values are %v", v, AllowedV2reportsErrorAssemblyErrorCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V2reportsErrorAssemblyErrorCode) IsValid() bool {
	for _, existing := range AllowedV2reportsErrorAssemblyErrorCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v2reportsErrorAssemblyErrorCode value
func (v V2reportsErrorAssemblyErrorCode) Ptr() *V2reportsErrorAssemblyErrorCode {
	return &v
}

type NullableV2reportsErrorAssemblyErrorCode struct {
	value *V2reportsErrorAssemblyErrorCode
	isSet bool
}

func (v NullableV2reportsErrorAssemblyErrorCode) Get() *V2reportsErrorAssemblyErrorCode {
	return v.value
}

func (v *NullableV2reportsErrorAssemblyErrorCode) Set(val *V2reportsErrorAssemblyErrorCode) {
	v.value = val
	v.isSet = true
}

func (v NullableV2reportsErrorAssemblyErrorCode) IsSet() bool {
	return v.isSet
}

func (v *NullableV2reportsErrorAssemblyErrorCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2reportsErrorAssemblyErrorCode(val *V2reportsErrorAssemblyErrorCode) *NullableV2reportsErrorAssemblyErrorCode {
	return &NullableV2reportsErrorAssemblyErrorCode{value: val, isSet: true}
}

func (v NullableV2reportsErrorAssemblyErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2reportsErrorAssemblyErrorCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

