/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ncbi-openapi-v2_goland

import (
	"encoding/json"
	"fmt"
)

// V2reportsLinkedAssemblyType the model 'V2reportsLinkedAssemblyType'
type V2reportsLinkedAssemblyType string

// List of v2reportsLinkedAssemblyType
const (
	V2REPORTSLINKEDASSEMBLYTYPE_LINKED_ASSEMBLY_TYPE_UNKNOWN V2reportsLinkedAssemblyType = "LINKED_ASSEMBLY_TYPE_UNKNOWN"
	V2REPORTSLINKEDASSEMBLYTYPE_ALTERNATE_PSEUDOHAPLOTYPE_OF_DIPLOID V2reportsLinkedAssemblyType = "alternate_pseudohaplotype_of_diploid"
	V2REPORTSLINKEDASSEMBLYTYPE_PRINCIPAL_PSEUDOHAPLOTYPE_OF_DIPLOID V2reportsLinkedAssemblyType = "principal_pseudohaplotype_of_diploid"
	V2REPORTSLINKEDASSEMBLYTYPE_MATERNAL_HAPLOTYPE_OF_DIPLOID V2reportsLinkedAssemblyType = "maternal_haplotype_of_diploid"
	V2REPORTSLINKEDASSEMBLYTYPE_PATERNAL_HAPLOTYPE_OF_DIPLOID V2reportsLinkedAssemblyType = "paternal_haplotype_of_diploid"
	V2REPORTSLINKEDASSEMBLYTYPE_HAPLOTYPE_1 V2reportsLinkedAssemblyType = "haplotype_1"
	V2REPORTSLINKEDASSEMBLYTYPE_HAPLOTYPE_2 V2reportsLinkedAssemblyType = "haplotype_2"
	V2REPORTSLINKEDASSEMBLYTYPE_HAPLOTYPE_3 V2reportsLinkedAssemblyType = "haplotype_3"
	V2REPORTSLINKEDASSEMBLYTYPE_HAPLOTYPE_4 V2reportsLinkedAssemblyType = "haplotype_4"
	V2REPORTSLINKEDASSEMBLYTYPE_HAPLOID V2reportsLinkedAssemblyType = "haploid"
)

// All allowed values of V2reportsLinkedAssemblyType enum
var AllowedV2reportsLinkedAssemblyTypeEnumValues = []V2reportsLinkedAssemblyType{
	"LINKED_ASSEMBLY_TYPE_UNKNOWN",
	"alternate_pseudohaplotype_of_diploid",
	"principal_pseudohaplotype_of_diploid",
	"maternal_haplotype_of_diploid",
	"paternal_haplotype_of_diploid",
	"haplotype_1",
	"haplotype_2",
	"haplotype_3",
	"haplotype_4",
	"haploid",
}

func (v *V2reportsLinkedAssemblyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V2reportsLinkedAssemblyType(value)
	for _, existing := range AllowedV2reportsLinkedAssemblyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V2reportsLinkedAssemblyType", value)
}

// NewV2reportsLinkedAssemblyTypeFromValue returns a pointer to a valid V2reportsLinkedAssemblyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV2reportsLinkedAssemblyTypeFromValue(v string) (*V2reportsLinkedAssemblyType, error) {
	ev := V2reportsLinkedAssemblyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V2reportsLinkedAssemblyType: valid values are %v", v, AllowedV2reportsLinkedAssemblyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V2reportsLinkedAssemblyType) IsValid() bool {
	for _, existing := range AllowedV2reportsLinkedAssemblyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v2reportsLinkedAssemblyType value
func (v V2reportsLinkedAssemblyType) Ptr() *V2reportsLinkedAssemblyType {
	return &v
}

type NullableV2reportsLinkedAssemblyType struct {
	value *V2reportsLinkedAssemblyType
	isSet bool
}

func (v NullableV2reportsLinkedAssemblyType) Get() *V2reportsLinkedAssemblyType {
	return v.value
}

func (v *NullableV2reportsLinkedAssemblyType) Set(val *V2reportsLinkedAssemblyType) {
	v.value = val
	v.isSet = true
}

func (v NullableV2reportsLinkedAssemblyType) IsSet() bool {
	return v.isSet
}

func (v *NullableV2reportsLinkedAssemblyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2reportsLinkedAssemblyType(val *V2reportsLinkedAssemblyType) *NullableV2reportsLinkedAssemblyType {
	return &NullableV2reportsLinkedAssemblyType{value: val, isSet: true}
}

func (v NullableV2reportsLinkedAssemblyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2reportsLinkedAssemblyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

