/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ncbi-openapi-v2_goland

import (
	"encoding/json"
	"fmt"
)

// V2TaxonomyDatasetRequestTaxonomyReportType the model 'V2TaxonomyDatasetRequestTaxonomyReportType'
type V2TaxonomyDatasetRequestTaxonomyReportType string

// List of v2TaxonomyDatasetRequestTaxonomyReportType
const (
	V2TAXONOMYDATASETREQUESTTAXONOMYREPORTTYPE_TAXONOMY_SUMMARY V2TaxonomyDatasetRequestTaxonomyReportType = "TAXONOMY_SUMMARY"
	V2TAXONOMYDATASETREQUESTTAXONOMYREPORTTYPE_NAMES_REPORT V2TaxonomyDatasetRequestTaxonomyReportType = "NAMES_REPORT"
)

// All allowed values of V2TaxonomyDatasetRequestTaxonomyReportType enum
var AllowedV2TaxonomyDatasetRequestTaxonomyReportTypeEnumValues = []V2TaxonomyDatasetRequestTaxonomyReportType{
	"TAXONOMY_SUMMARY",
	"NAMES_REPORT",
}

func (v *V2TaxonomyDatasetRequestTaxonomyReportType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V2TaxonomyDatasetRequestTaxonomyReportType(value)
	for _, existing := range AllowedV2TaxonomyDatasetRequestTaxonomyReportTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V2TaxonomyDatasetRequestTaxonomyReportType", value)
}

// NewV2TaxonomyDatasetRequestTaxonomyReportTypeFromValue returns a pointer to a valid V2TaxonomyDatasetRequestTaxonomyReportType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV2TaxonomyDatasetRequestTaxonomyReportTypeFromValue(v string) (*V2TaxonomyDatasetRequestTaxonomyReportType, error) {
	ev := V2TaxonomyDatasetRequestTaxonomyReportType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V2TaxonomyDatasetRequestTaxonomyReportType: valid values are %v", v, AllowedV2TaxonomyDatasetRequestTaxonomyReportTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V2TaxonomyDatasetRequestTaxonomyReportType) IsValid() bool {
	for _, existing := range AllowedV2TaxonomyDatasetRequestTaxonomyReportTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v2TaxonomyDatasetRequestTaxonomyReportType value
func (v V2TaxonomyDatasetRequestTaxonomyReportType) Ptr() *V2TaxonomyDatasetRequestTaxonomyReportType {
	return &v
}

type NullableV2TaxonomyDatasetRequestTaxonomyReportType struct {
	value *V2TaxonomyDatasetRequestTaxonomyReportType
	isSet bool
}

func (v NullableV2TaxonomyDatasetRequestTaxonomyReportType) Get() *V2TaxonomyDatasetRequestTaxonomyReportType {
	return v.value
}

func (v *NullableV2TaxonomyDatasetRequestTaxonomyReportType) Set(val *V2TaxonomyDatasetRequestTaxonomyReportType) {
	v.value = val
	v.isSet = true
}

func (v NullableV2TaxonomyDatasetRequestTaxonomyReportType) IsSet() bool {
	return v.isSet
}

func (v *NullableV2TaxonomyDatasetRequestTaxonomyReportType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2TaxonomyDatasetRequestTaxonomyReportType(val *V2TaxonomyDatasetRequestTaxonomyReportType) *NullableV2TaxonomyDatasetRequestTaxonomyReportType {
	return &NullableV2TaxonomyDatasetRequestTaxonomyReportType{value: val, isSet: true}
}

func (v NullableV2TaxonomyDatasetRequestTaxonomyReportType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2TaxonomyDatasetRequestTaxonomyReportType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

