/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// V2reportsOrganelleType the model 'V2reportsOrganelleType'
type V2reportsOrganelleType string

// List of v2reportsOrganelleType
const (
	V2REPORTSORGANELLETYPE_ORGANELLE_TYPE_UNKNOWN V2reportsOrganelleType = "ORGANELLE_TYPE_UNKNOWN"
	V2REPORTSORGANELLETYPE_MITOCHONDRION V2reportsOrganelleType = "Mitochondrion"
	V2REPORTSORGANELLETYPE_CHLOROPLAST V2reportsOrganelleType = "Chloroplast"
	V2REPORTSORGANELLETYPE_PLASTID V2reportsOrganelleType = "Plastid"
	V2REPORTSORGANELLETYPE_KINETOPLAST V2reportsOrganelleType = "Kinetoplast"
	V2REPORTSORGANELLETYPE_APICOPLAST V2reportsOrganelleType = "Apicoplast"
	V2REPORTSORGANELLETYPE_CHROMATOPHORE V2reportsOrganelleType = "Chromatophore"
	V2REPORTSORGANELLETYPE_CYANELLE V2reportsOrganelleType = "Cyanelle"
)

// All allowed values of V2reportsOrganelleType enum
var AllowedV2reportsOrganelleTypeEnumValues = []V2reportsOrganelleType{
	"ORGANELLE_TYPE_UNKNOWN",
	"Mitochondrion",
	"Chloroplast",
	"Plastid",
	"Kinetoplast",
	"Apicoplast",
	"Chromatophore",
	"Cyanelle",
}

func (v *V2reportsOrganelleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V2reportsOrganelleType(value)
	for _, existing := range AllowedV2reportsOrganelleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V2reportsOrganelleType", value)
}

// NewV2reportsOrganelleTypeFromValue returns a pointer to a valid V2reportsOrganelleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV2reportsOrganelleTypeFromValue(v string) (*V2reportsOrganelleType, error) {
	ev := V2reportsOrganelleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V2reportsOrganelleType: valid values are %v", v, AllowedV2reportsOrganelleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V2reportsOrganelleType) IsValid() bool {
	for _, existing := range AllowedV2reportsOrganelleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v2reportsOrganelleType value
func (v V2reportsOrganelleType) Ptr() *V2reportsOrganelleType {
	return &v
}

type NullableV2reportsOrganelleType struct {
	value *V2reportsOrganelleType
	isSet bool
}

func (v NullableV2reportsOrganelleType) Get() *V2reportsOrganelleType {
	return v.value
}

func (v *NullableV2reportsOrganelleType) Set(val *V2reportsOrganelleType) {
	v.value = val
	v.isSet = true
}

func (v NullableV2reportsOrganelleType) IsSet() bool {
	return v.isSet
}

func (v *NullableV2reportsOrganelleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2reportsOrganelleType(val *V2reportsOrganelleType) *NullableV2reportsOrganelleType {
	return &NullableV2reportsOrganelleType{value: val, isSet: true}
}

func (v NullableV2reportsOrganelleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2reportsOrganelleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

