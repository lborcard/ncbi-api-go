/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ncbi-openapi-v2_goland

import (
	"encoding/json"
	"fmt"
)

// V2AnnotationForAssemblyType the model 'V2AnnotationForAssemblyType'
type V2AnnotationForAssemblyType string

// List of v2AnnotationForAssemblyType
const (
	V2ANNOTATIONFORASSEMBLYTYPE_GENOME_GFF V2AnnotationForAssemblyType = "GENOME_GFF"
	V2ANNOTATIONFORASSEMBLYTYPE_GENOME_GBFF V2AnnotationForAssemblyType = "GENOME_GBFF"
	V2ANNOTATIONFORASSEMBLYTYPE_RNA_FASTA V2AnnotationForAssemblyType = "RNA_FASTA"
	V2ANNOTATIONFORASSEMBLYTYPE_PROT_FASTA V2AnnotationForAssemblyType = "PROT_FASTA"
	V2ANNOTATIONFORASSEMBLYTYPE_GENOME_GTF V2AnnotationForAssemblyType = "GENOME_GTF"
	V2ANNOTATIONFORASSEMBLYTYPE_CDS_FASTA V2AnnotationForAssemblyType = "CDS_FASTA"
	V2ANNOTATIONFORASSEMBLYTYPE_GENOME_FASTA V2AnnotationForAssemblyType = "GENOME_FASTA"
	V2ANNOTATIONFORASSEMBLYTYPE_SEQUENCE_REPORT V2AnnotationForAssemblyType = "SEQUENCE_REPORT"
)

// All allowed values of V2AnnotationForAssemblyType enum
var AllowedV2AnnotationForAssemblyTypeEnumValues = []V2AnnotationForAssemblyType{
	"GENOME_GFF",
	"GENOME_GBFF",
	"RNA_FASTA",
	"PROT_FASTA",
	"GENOME_GTF",
	"CDS_FASTA",
	"GENOME_FASTA",
	"SEQUENCE_REPORT",
}

func (v *V2AnnotationForAssemblyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V2AnnotationForAssemblyType(value)
	for _, existing := range AllowedV2AnnotationForAssemblyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V2AnnotationForAssemblyType", value)
}

// NewV2AnnotationForAssemblyTypeFromValue returns a pointer to a valid V2AnnotationForAssemblyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV2AnnotationForAssemblyTypeFromValue(v string) (*V2AnnotationForAssemblyType, error) {
	ev := V2AnnotationForAssemblyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V2AnnotationForAssemblyType: valid values are %v", v, AllowedV2AnnotationForAssemblyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V2AnnotationForAssemblyType) IsValid() bool {
	for _, existing := range AllowedV2AnnotationForAssemblyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v2AnnotationForAssemblyType value
func (v V2AnnotationForAssemblyType) Ptr() *V2AnnotationForAssemblyType {
	return &v
}

type NullableV2AnnotationForAssemblyType struct {
	value *V2AnnotationForAssemblyType
	isSet bool
}

func (v NullableV2AnnotationForAssemblyType) Get() *V2AnnotationForAssemblyType {
	return v.value
}

func (v *NullableV2AnnotationForAssemblyType) Set(val *V2AnnotationForAssemblyType) {
	v.value = val
	v.isSet = true
}

func (v NullableV2AnnotationForAssemblyType) IsSet() bool {
	return v.isSet
}

func (v *NullableV2AnnotationForAssemblyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2AnnotationForAssemblyType(val *V2AnnotationForAssemblyType) *NullableV2AnnotationForAssemblyType {
	return &NullableV2AnnotationForAssemblyType{value: val, isSet: true}
}

func (v NullableV2AnnotationForAssemblyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2AnnotationForAssemblyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

