/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ncbi-openapi-v2_goland

import (
	"encoding/json"
)

// V2reportsTaxData struct for V2reportsTaxData
type V2reportsTaxData struct {
	Name *string `json:"name,omitempty"`
	Id *int32 `json:"id,omitempty"`
}

// NewV2reportsTaxData instantiates a new V2reportsTaxData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2reportsTaxData() *V2reportsTaxData {
	this := V2reportsTaxData{}
	return &this
}

// NewV2reportsTaxDataWithDefaults instantiates a new V2reportsTaxData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2reportsTaxDataWithDefaults() *V2reportsTaxData {
	this := V2reportsTaxData{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V2reportsTaxData) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsTaxData) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V2reportsTaxData) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V2reportsTaxData) SetName(v string) {
	o.Name = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *V2reportsTaxData) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsTaxData) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *V2reportsTaxData) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *V2reportsTaxData) SetId(v int32) {
	o.Id = &v
}

func (o V2reportsTaxData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableV2reportsTaxData struct {
	value *V2reportsTaxData
	isSet bool
}

func (v NullableV2reportsTaxData) Get() *V2reportsTaxData {
	return v.value
}

func (v *NullableV2reportsTaxData) Set(val *V2reportsTaxData) {
	v.value = val
	v.isSet = true
}

func (v NullableV2reportsTaxData) IsSet() bool {
	return v.isSet
}

func (v *NullableV2reportsTaxData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2reportsTaxData(val *V2reportsTaxData) *NullableV2reportsTaxData {
	return &NullableV2reportsTaxData{value: val, isSet: true}
}

func (v NullableV2reportsTaxData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2reportsTaxData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


