/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"os"
	"reflect"
)


// ProkaryoteApiService ProkaryoteApi service
type ProkaryoteApiService service

type ProkaryoteApiDownloadProkaryoteGenePackageRequest struct {
	ctx context.Context
	ApiService *ProkaryoteApiService
	accessions []string
	includeAnnotationType *[]V2Fasta
	geneFlankConfigLength *int32
	taxon *string
	filename *string
}

// Select additional types of annotation to include in the data package.  If unset, no annotation is provided.
func (r ProkaryoteApiDownloadProkaryoteGenePackageRequest) IncludeAnnotationType(includeAnnotationType []V2Fasta) ProkaryoteApiDownloadProkaryoteGenePackageRequest {
	r.includeAnnotationType = &includeAnnotationType
	return r
}

func (r ProkaryoteApiDownloadProkaryoteGenePackageRequest) GeneFlankConfigLength(geneFlankConfigLength int32) ProkaryoteApiDownloadProkaryoteGenePackageRequest {
	r.geneFlankConfigLength = &geneFlankConfigLength
	return r
}

// NCBI Taxonomy ID or name (common or scientific) at any taxonomic rank When specified, return data from this taxon and its subtree
func (r ProkaryoteApiDownloadProkaryoteGenePackageRequest) Taxon(taxon string) ProkaryoteApiDownloadProkaryoteGenePackageRequest {
	r.taxon = &taxon
	return r
}

// Output file name.
func (r ProkaryoteApiDownloadProkaryoteGenePackageRequest) Filename(filename string) ProkaryoteApiDownloadProkaryoteGenePackageRequest {
	r.filename = &filename
	return r
}

func (r ProkaryoteApiDownloadProkaryoteGenePackageRequest) Execute() (**os.File, *http.Response, error) {
	return r.ApiService.DownloadProkaryoteGenePackageExecute(r)
}

/*
DownloadProkaryoteGenePackage Get a prokaryote gene dataset by RefSeq protein accession

Get a prokaryote gene dataset including gene and protein fasta sequence, annotation and metadata by prokaryote protein accession.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accessions WP prokaryote protein accession
 @return ProkaryoteApiDownloadProkaryoteGenePackageRequest
*/
func (a *ProkaryoteApiService) DownloadProkaryoteGenePackage(ctx context.Context, accessions []string) ProkaryoteApiDownloadProkaryoteGenePackageRequest {
	return ProkaryoteApiDownloadProkaryoteGenePackageRequest{
		ApiService: a,
		ctx: ctx,
		accessions: accessions,
	}
}

// Execute executes the request
//  @return *os.File
func (a *ProkaryoteApiService) DownloadProkaryoteGenePackageExecute(r ProkaryoteApiDownloadProkaryoteGenePackageRequest) (**os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  **os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProkaryoteApiService.DownloadProkaryoteGenePackage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/protein/accession/{accessions}/download"
	localVarPath = strings.Replace(localVarPath, "{"+"accessions"+"}", url.PathEscape(parameterToString(r.accessions, "csv")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeAnnotationType != nil {
		t := *r.includeAnnotationType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("include_annotation_type", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("include_annotation_type", parameterToString(t, "multi"))
		}
	}
	if r.geneFlankConfigLength != nil {
		localVarQueryParams.Add("gene_flank_config.length", parameterToString(*r.geneFlankConfigLength, ""))
	}
	if r.taxon != nil {
		localVarQueryParams.Add("taxon", parameterToString(*r.taxon, ""))
	}
	if r.filename != nil {
		localVarQueryParams.Add("filename", parameterToString(*r.filename, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/zip"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuthHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProkaryoteApiDownloadProkaryoteGenePackagePostRequest struct {
	ctx context.Context
	ApiService *ProkaryoteApiService
	v2ProkaryoteGeneRequest *V2ProkaryoteGeneRequest
	filename *string
}

func (r ProkaryoteApiDownloadProkaryoteGenePackagePostRequest) V2ProkaryoteGeneRequest(v2ProkaryoteGeneRequest V2ProkaryoteGeneRequest) ProkaryoteApiDownloadProkaryoteGenePackagePostRequest {
	r.v2ProkaryoteGeneRequest = &v2ProkaryoteGeneRequest
	return r
}

// Output file name.
func (r ProkaryoteApiDownloadProkaryoteGenePackagePostRequest) Filename(filename string) ProkaryoteApiDownloadProkaryoteGenePackagePostRequest {
	r.filename = &filename
	return r
}

func (r ProkaryoteApiDownloadProkaryoteGenePackagePostRequest) Execute() (**os.File, *http.Response, error) {
	return r.ApiService.DownloadProkaryoteGenePackagePostExecute(r)
}

/*
DownloadProkaryoteGenePackagePost Get a prokaryote gene dataset by RefSeq protein accession by POST

Get a prokaryote gene dataset including gene and protein fasta sequence, annotation and metadata by prokaryote protein accession by POST.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProkaryoteApiDownloadProkaryoteGenePackagePostRequest
*/
func (a *ProkaryoteApiService) DownloadProkaryoteGenePackagePost(ctx context.Context) ProkaryoteApiDownloadProkaryoteGenePackagePostRequest {
	return ProkaryoteApiDownloadProkaryoteGenePackagePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return *os.File
func (a *ProkaryoteApiService) DownloadProkaryoteGenePackagePostExecute(r ProkaryoteApiDownloadProkaryoteGenePackagePostRequest) (**os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  **os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProkaryoteApiService.DownloadProkaryoteGenePackagePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/protein/accession/download"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v2ProkaryoteGeneRequest == nil {
		return localVarReturnValue, nil, reportError("v2ProkaryoteGeneRequest is required and must be specified")
	}

	if r.filename != nil {
		localVarQueryParams.Add("filename", parameterToString(*r.filename, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/zip"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v2ProkaryoteGeneRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuthHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
