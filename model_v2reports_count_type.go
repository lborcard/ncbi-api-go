/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// V2reportsCountType the model 'V2reportsCountType'
type V2reportsCountType string

// List of v2reportsCountType
const (
	V2REPORTSCOUNTTYPE_UNSPECIFIED V2reportsCountType = "COUNT_TYPE_UNSPECIFIED"
	V2REPORTSCOUNTTYPE_ASSEMBLY V2reportsCountType = "COUNT_TYPE_ASSEMBLY"
	V2REPORTSCOUNTTYPE_GENE V2reportsCountType = "COUNT_TYPE_GENE"
	V2REPORTSCOUNTTYPE_T_RNA V2reportsCountType = "COUNT_TYPE_tRNA"
	V2REPORTSCOUNTTYPE_R_RNA V2reportsCountType = "COUNT_TYPE_rRNA"
	V2REPORTSCOUNTTYPE_SN_RNA V2reportsCountType = "COUNT_TYPE_snRNA"
	V2REPORTSCOUNTTYPE_SC_RNA V2reportsCountType = "COUNT_TYPE_scRNA"
	V2REPORTSCOUNTTYPE_SNO_RNA V2reportsCountType = "COUNT_TYPE_snoRNA"
	V2REPORTSCOUNTTYPE_PROTEIN_CODING V2reportsCountType = "COUNT_TYPE_PROTEIN_CODING"
	V2REPORTSCOUNTTYPE_PSEUDO V2reportsCountType = "COUNT_TYPE_PSEUDO"
	V2REPORTSCOUNTTYPE_TRANSPOSON V2reportsCountType = "COUNT_TYPE_TRANSPOSON"
	V2REPORTSCOUNTTYPE_MISC_RNA V2reportsCountType = "COUNT_TYPE_miscRNA"
	V2REPORTSCOUNTTYPE_NC_RNA V2reportsCountType = "COUNT_TYPE_ncRNA"
	V2REPORTSCOUNTTYPE_BIOLOGICAL_REGION V2reportsCountType = "COUNT_TYPE_BIOLOGICAL_REGION"
	V2REPORTSCOUNTTYPE_OTHER V2reportsCountType = "COUNT_TYPE_OTHER"
	V2REPORTSCOUNTTYPE_ORGANELLE V2reportsCountType = "COUNT_TYPE_ORGANELLE"
)

// All allowed values of V2reportsCountType enum
var AllowedV2reportsCountTypeEnumValues = []V2reportsCountType{
	"COUNT_TYPE_UNSPECIFIED",
	"COUNT_TYPE_ASSEMBLY",
	"COUNT_TYPE_GENE",
	"COUNT_TYPE_tRNA",
	"COUNT_TYPE_rRNA",
	"COUNT_TYPE_snRNA",
	"COUNT_TYPE_scRNA",
	"COUNT_TYPE_snoRNA",
	"COUNT_TYPE_PROTEIN_CODING",
	"COUNT_TYPE_PSEUDO",
	"COUNT_TYPE_TRANSPOSON",
	"COUNT_TYPE_miscRNA",
	"COUNT_TYPE_ncRNA",
	"COUNT_TYPE_BIOLOGICAL_REGION",
	"COUNT_TYPE_OTHER",
	"COUNT_TYPE_ORGANELLE",
}

func (v *V2reportsCountType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V2reportsCountType(value)
	for _, existing := range AllowedV2reportsCountTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V2reportsCountType", value)
}

// NewV2reportsCountTypeFromValue returns a pointer to a valid V2reportsCountType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV2reportsCountTypeFromValue(v string) (*V2reportsCountType, error) {
	ev := V2reportsCountType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V2reportsCountType: valid values are %v", v, AllowedV2reportsCountTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V2reportsCountType) IsValid() bool {
	for _, existing := range AllowedV2reportsCountTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v2reportsCountType value
func (v V2reportsCountType) Ptr() *V2reportsCountType {
	return &v
}

type NullableV2reportsCountType struct {
	value *V2reportsCountType
	isSet bool
}

func (v NullableV2reportsCountType) Get() *V2reportsCountType {
	return v.value
}

func (v *NullableV2reportsCountType) Set(val *V2reportsCountType) {
	v.value = val
	v.isSet = true
}

func (v NullableV2reportsCountType) IsSet() bool {
	return v.isSet
}

func (v *NullableV2reportsCountType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2reportsCountType(val *V2reportsCountType) *NullableV2reportsCountType {
	return &NullableV2reportsCountType{value: val, isSet: true}
}

func (v NullableV2reportsCountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2reportsCountType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

