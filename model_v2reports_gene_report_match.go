/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V2reportsGeneReportMatch struct for V2reportsGeneReportMatch
type V2reportsGeneReportMatch struct {
	Gene *V2reportsGeneDescriptor `json:"gene,omitempty"`
	Product *V2reportsProductDescriptor `json:"product,omitempty"`
	Query []string `json:"query,omitempty"`
	Warnings []V2reportsWarning `json:"warnings,omitempty"`
	Warning *V2reportsWarning `json:"warning,omitempty"`
	Errors []V2reportsError `json:"errors,omitempty"`
}

// NewV2reportsGeneReportMatch instantiates a new V2reportsGeneReportMatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2reportsGeneReportMatch() *V2reportsGeneReportMatch {
	this := V2reportsGeneReportMatch{}
	return &this
}

// NewV2reportsGeneReportMatchWithDefaults instantiates a new V2reportsGeneReportMatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2reportsGeneReportMatchWithDefaults() *V2reportsGeneReportMatch {
	this := V2reportsGeneReportMatch{}
	return &this
}

// GetGene returns the Gene field value if set, zero value otherwise.
func (o *V2reportsGeneReportMatch) GetGene() V2reportsGeneDescriptor {
	if o == nil || o.Gene == nil {
		var ret V2reportsGeneDescriptor
		return ret
	}
	return *o.Gene
}

// GetGeneOk returns a tuple with the Gene field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsGeneReportMatch) GetGeneOk() (*V2reportsGeneDescriptor, bool) {
	if o == nil || o.Gene == nil {
		return nil, false
	}
	return o.Gene, true
}

// HasGene returns a boolean if a field has been set.
func (o *V2reportsGeneReportMatch) HasGene() bool {
	if o != nil && o.Gene != nil {
		return true
	}

	return false
}

// SetGene gets a reference to the given V2reportsGeneDescriptor and assigns it to the Gene field.
func (o *V2reportsGeneReportMatch) SetGene(v V2reportsGeneDescriptor) {
	o.Gene = &v
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *V2reportsGeneReportMatch) GetProduct() V2reportsProductDescriptor {
	if o == nil || o.Product == nil {
		var ret V2reportsProductDescriptor
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsGeneReportMatch) GetProductOk() (*V2reportsProductDescriptor, bool) {
	if o == nil || o.Product == nil {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *V2reportsGeneReportMatch) HasProduct() bool {
	if o != nil && o.Product != nil {
		return true
	}

	return false
}

// SetProduct gets a reference to the given V2reportsProductDescriptor and assigns it to the Product field.
func (o *V2reportsGeneReportMatch) SetProduct(v V2reportsProductDescriptor) {
	o.Product = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *V2reportsGeneReportMatch) GetQuery() []string {
	if o == nil || o.Query == nil {
		var ret []string
		return ret
	}
	return o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsGeneReportMatch) GetQueryOk() ([]string, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *V2reportsGeneReportMatch) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given []string and assigns it to the Query field.
func (o *V2reportsGeneReportMatch) SetQuery(v []string) {
	o.Query = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *V2reportsGeneReportMatch) GetWarnings() []V2reportsWarning {
	if o == nil || o.Warnings == nil {
		var ret []V2reportsWarning
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsGeneReportMatch) GetWarningsOk() ([]V2reportsWarning, bool) {
	if o == nil || o.Warnings == nil {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *V2reportsGeneReportMatch) HasWarnings() bool {
	if o != nil && o.Warnings != nil {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []V2reportsWarning and assigns it to the Warnings field.
func (o *V2reportsGeneReportMatch) SetWarnings(v []V2reportsWarning) {
	o.Warnings = v
}

// GetWarning returns the Warning field value if set, zero value otherwise.
func (o *V2reportsGeneReportMatch) GetWarning() V2reportsWarning {
	if o == nil || o.Warning == nil {
		var ret V2reportsWarning
		return ret
	}
	return *o.Warning
}

// GetWarningOk returns a tuple with the Warning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsGeneReportMatch) GetWarningOk() (*V2reportsWarning, bool) {
	if o == nil || o.Warning == nil {
		return nil, false
	}
	return o.Warning, true
}

// HasWarning returns a boolean if a field has been set.
func (o *V2reportsGeneReportMatch) HasWarning() bool {
	if o != nil && o.Warning != nil {
		return true
	}

	return false
}

// SetWarning gets a reference to the given V2reportsWarning and assigns it to the Warning field.
func (o *V2reportsGeneReportMatch) SetWarning(v V2reportsWarning) {
	o.Warning = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *V2reportsGeneReportMatch) GetErrors() []V2reportsError {
	if o == nil || o.Errors == nil {
		var ret []V2reportsError
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsGeneReportMatch) GetErrorsOk() ([]V2reportsError, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *V2reportsGeneReportMatch) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []V2reportsError and assigns it to the Errors field.
func (o *V2reportsGeneReportMatch) SetErrors(v []V2reportsError) {
	o.Errors = v
}

func (o V2reportsGeneReportMatch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Gene != nil {
		toSerialize["gene"] = o.Gene
	}
	if o.Product != nil {
		toSerialize["product"] = o.Product
	}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}
	if o.Warning != nil {
		toSerialize["warning"] = o.Warning
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	return json.Marshal(toSerialize)
}

type NullableV2reportsGeneReportMatch struct {
	value *V2reportsGeneReportMatch
	isSet bool
}

func (v NullableV2reportsGeneReportMatch) Get() *V2reportsGeneReportMatch {
	return v.value
}

func (v *NullableV2reportsGeneReportMatch) Set(val *V2reportsGeneReportMatch) {
	v.value = val
	v.isSet = true
}

func (v NullableV2reportsGeneReportMatch) IsSet() bool {
	return v.isSet
}

func (v *NullableV2reportsGeneReportMatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2reportsGeneReportMatch(val *V2reportsGeneReportMatch) *NullableV2reportsGeneReportMatch {
	return &NullableV2reportsGeneReportMatch{value: val, isSet: true}
}

func (v NullableV2reportsGeneReportMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2reportsGeneReportMatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


