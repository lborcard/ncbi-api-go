/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V2reportsVirusGene struct for V2reportsVirusGene
type V2reportsVirusGene struct {
	Name *string `json:"name,omitempty"`
	GeneId *int32 `json:"gene_id,omitempty"`
	Nucleotide *V2reportsSeqRangeSetFasta `json:"nucleotide,omitempty"`
	Cds []V2reportsVirusPeptide `json:"cds,omitempty"`
}

// NewV2reportsVirusGene instantiates a new V2reportsVirusGene object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2reportsVirusGene() *V2reportsVirusGene {
	this := V2reportsVirusGene{}
	return &this
}

// NewV2reportsVirusGeneWithDefaults instantiates a new V2reportsVirusGene object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2reportsVirusGeneWithDefaults() *V2reportsVirusGene {
	this := V2reportsVirusGene{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V2reportsVirusGene) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsVirusGene) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V2reportsVirusGene) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V2reportsVirusGene) SetName(v string) {
	o.Name = &v
}

// GetGeneId returns the GeneId field value if set, zero value otherwise.
func (o *V2reportsVirusGene) GetGeneId() int32 {
	if o == nil || o.GeneId == nil {
		var ret int32
		return ret
	}
	return *o.GeneId
}

// GetGeneIdOk returns a tuple with the GeneId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsVirusGene) GetGeneIdOk() (*int32, bool) {
	if o == nil || o.GeneId == nil {
		return nil, false
	}
	return o.GeneId, true
}

// HasGeneId returns a boolean if a field has been set.
func (o *V2reportsVirusGene) HasGeneId() bool {
	if o != nil && o.GeneId != nil {
		return true
	}

	return false
}

// SetGeneId gets a reference to the given int32 and assigns it to the GeneId field.
func (o *V2reportsVirusGene) SetGeneId(v int32) {
	o.GeneId = &v
}

// GetNucleotide returns the Nucleotide field value if set, zero value otherwise.
func (o *V2reportsVirusGene) GetNucleotide() V2reportsSeqRangeSetFasta {
	if o == nil || o.Nucleotide == nil {
		var ret V2reportsSeqRangeSetFasta
		return ret
	}
	return *o.Nucleotide
}

// GetNucleotideOk returns a tuple with the Nucleotide field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsVirusGene) GetNucleotideOk() (*V2reportsSeqRangeSetFasta, bool) {
	if o == nil || o.Nucleotide == nil {
		return nil, false
	}
	return o.Nucleotide, true
}

// HasNucleotide returns a boolean if a field has been set.
func (o *V2reportsVirusGene) HasNucleotide() bool {
	if o != nil && o.Nucleotide != nil {
		return true
	}

	return false
}

// SetNucleotide gets a reference to the given V2reportsSeqRangeSetFasta and assigns it to the Nucleotide field.
func (o *V2reportsVirusGene) SetNucleotide(v V2reportsSeqRangeSetFasta) {
	o.Nucleotide = &v
}

// GetCds returns the Cds field value if set, zero value otherwise.
func (o *V2reportsVirusGene) GetCds() []V2reportsVirusPeptide {
	if o == nil || o.Cds == nil {
		var ret []V2reportsVirusPeptide
		return ret
	}
	return o.Cds
}

// GetCdsOk returns a tuple with the Cds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsVirusGene) GetCdsOk() ([]V2reportsVirusPeptide, bool) {
	if o == nil || o.Cds == nil {
		return nil, false
	}
	return o.Cds, true
}

// HasCds returns a boolean if a field has been set.
func (o *V2reportsVirusGene) HasCds() bool {
	if o != nil && o.Cds != nil {
		return true
	}

	return false
}

// SetCds gets a reference to the given []V2reportsVirusPeptide and assigns it to the Cds field.
func (o *V2reportsVirusGene) SetCds(v []V2reportsVirusPeptide) {
	o.Cds = v
}

func (o V2reportsVirusGene) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.GeneId != nil {
		toSerialize["gene_id"] = o.GeneId
	}
	if o.Nucleotide != nil {
		toSerialize["nucleotide"] = o.Nucleotide
	}
	if o.Cds != nil {
		toSerialize["cds"] = o.Cds
	}
	return json.Marshal(toSerialize)
}

type NullableV2reportsVirusGene struct {
	value *V2reportsVirusGene
	isSet bool
}

func (v NullableV2reportsVirusGene) Get() *V2reportsVirusGene {
	return v.value
}

func (v *NullableV2reportsVirusGene) Set(val *V2reportsVirusGene) {
	v.value = val
	v.isSet = true
}

func (v NullableV2reportsVirusGene) IsSet() bool {
	return v.isSet
}

func (v *NullableV2reportsVirusGene) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2reportsVirusGene(val *V2reportsVirusGene) *NullableV2reportsVirusGene {
	return &NullableV2reportsVirusGene{value: val, isSet: true}
}

func (v NullableV2reportsVirusGene) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2reportsVirusGene) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


