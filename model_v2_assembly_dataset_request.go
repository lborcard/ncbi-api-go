/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V2AssemblyDatasetRequest struct for V2AssemblyDatasetRequest
type V2AssemblyDatasetRequest struct {
	Accessions []string `json:"accessions,omitempty"`
	Chromosomes []string `json:"chromosomes,omitempty"`
	IncludeAnnotationType []V2AnnotationForAssemblyType `json:"include_annotation_type,omitempty"`
	Hydrated *V2AssemblyDatasetRequestResolution `json:"hydrated,omitempty"`
	IncludeTsv *bool `json:"include_tsv,omitempty"`
	ExpDebugValues *string `json:"_exp_debug_values,omitempty"`
}

// NewV2AssemblyDatasetRequest instantiates a new V2AssemblyDatasetRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2AssemblyDatasetRequest() *V2AssemblyDatasetRequest {
	this := V2AssemblyDatasetRequest{}
	var hydrated V2AssemblyDatasetRequestResolution = V2ASSEMBLYDATASETREQUESTRESOLUTION_FULLY_HYDRATED
	this.Hydrated = &hydrated
	return &this
}

// NewV2AssemblyDatasetRequestWithDefaults instantiates a new V2AssemblyDatasetRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2AssemblyDatasetRequestWithDefaults() *V2AssemblyDatasetRequest {
	this := V2AssemblyDatasetRequest{}
	var hydrated V2AssemblyDatasetRequestResolution = V2ASSEMBLYDATASETREQUESTRESOLUTION_FULLY_HYDRATED
	this.Hydrated = &hydrated
	return &this
}

// GetAccessions returns the Accessions field value if set, zero value otherwise.
func (o *V2AssemblyDatasetRequest) GetAccessions() []string {
	if o == nil || o.Accessions == nil {
		var ret []string
		return ret
	}
	return o.Accessions
}

// GetAccessionsOk returns a tuple with the Accessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AssemblyDatasetRequest) GetAccessionsOk() ([]string, bool) {
	if o == nil || o.Accessions == nil {
		return nil, false
	}
	return o.Accessions, true
}

// HasAccessions returns a boolean if a field has been set.
func (o *V2AssemblyDatasetRequest) HasAccessions() bool {
	if o != nil && o.Accessions != nil {
		return true
	}

	return false
}

// SetAccessions gets a reference to the given []string and assigns it to the Accessions field.
func (o *V2AssemblyDatasetRequest) SetAccessions(v []string) {
	o.Accessions = v
}

// GetChromosomes returns the Chromosomes field value if set, zero value otherwise.
func (o *V2AssemblyDatasetRequest) GetChromosomes() []string {
	if o == nil || o.Chromosomes == nil {
		var ret []string
		return ret
	}
	return o.Chromosomes
}

// GetChromosomesOk returns a tuple with the Chromosomes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AssemblyDatasetRequest) GetChromosomesOk() ([]string, bool) {
	if o == nil || o.Chromosomes == nil {
		return nil, false
	}
	return o.Chromosomes, true
}

// HasChromosomes returns a boolean if a field has been set.
func (o *V2AssemblyDatasetRequest) HasChromosomes() bool {
	if o != nil && o.Chromosomes != nil {
		return true
	}

	return false
}

// SetChromosomes gets a reference to the given []string and assigns it to the Chromosomes field.
func (o *V2AssemblyDatasetRequest) SetChromosomes(v []string) {
	o.Chromosomes = v
}

// GetIncludeAnnotationType returns the IncludeAnnotationType field value if set, zero value otherwise.
func (o *V2AssemblyDatasetRequest) GetIncludeAnnotationType() []V2AnnotationForAssemblyType {
	if o == nil || o.IncludeAnnotationType == nil {
		var ret []V2AnnotationForAssemblyType
		return ret
	}
	return o.IncludeAnnotationType
}

// GetIncludeAnnotationTypeOk returns a tuple with the IncludeAnnotationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AssemblyDatasetRequest) GetIncludeAnnotationTypeOk() ([]V2AnnotationForAssemblyType, bool) {
	if o == nil || o.IncludeAnnotationType == nil {
		return nil, false
	}
	return o.IncludeAnnotationType, true
}

// HasIncludeAnnotationType returns a boolean if a field has been set.
func (o *V2AssemblyDatasetRequest) HasIncludeAnnotationType() bool {
	if o != nil && o.IncludeAnnotationType != nil {
		return true
	}

	return false
}

// SetIncludeAnnotationType gets a reference to the given []V2AnnotationForAssemblyType and assigns it to the IncludeAnnotationType field.
func (o *V2AssemblyDatasetRequest) SetIncludeAnnotationType(v []V2AnnotationForAssemblyType) {
	o.IncludeAnnotationType = v
}

// GetHydrated returns the Hydrated field value if set, zero value otherwise.
func (o *V2AssemblyDatasetRequest) GetHydrated() V2AssemblyDatasetRequestResolution {
	if o == nil || o.Hydrated == nil {
		var ret V2AssemblyDatasetRequestResolution
		return ret
	}
	return *o.Hydrated
}

// GetHydratedOk returns a tuple with the Hydrated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AssemblyDatasetRequest) GetHydratedOk() (*V2AssemblyDatasetRequestResolution, bool) {
	if o == nil || o.Hydrated == nil {
		return nil, false
	}
	return o.Hydrated, true
}

// HasHydrated returns a boolean if a field has been set.
func (o *V2AssemblyDatasetRequest) HasHydrated() bool {
	if o != nil && o.Hydrated != nil {
		return true
	}

	return false
}

// SetHydrated gets a reference to the given V2AssemblyDatasetRequestResolution and assigns it to the Hydrated field.
func (o *V2AssemblyDatasetRequest) SetHydrated(v V2AssemblyDatasetRequestResolution) {
	o.Hydrated = &v
}

// GetIncludeTsv returns the IncludeTsv field value if set, zero value otherwise.
func (o *V2AssemblyDatasetRequest) GetIncludeTsv() bool {
	if o == nil || o.IncludeTsv == nil {
		var ret bool
		return ret
	}
	return *o.IncludeTsv
}

// GetIncludeTsvOk returns a tuple with the IncludeTsv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AssemblyDatasetRequest) GetIncludeTsvOk() (*bool, bool) {
	if o == nil || o.IncludeTsv == nil {
		return nil, false
	}
	return o.IncludeTsv, true
}

// HasIncludeTsv returns a boolean if a field has been set.
func (o *V2AssemblyDatasetRequest) HasIncludeTsv() bool {
	if o != nil && o.IncludeTsv != nil {
		return true
	}

	return false
}

// SetIncludeTsv gets a reference to the given bool and assigns it to the IncludeTsv field.
func (o *V2AssemblyDatasetRequest) SetIncludeTsv(v bool) {
	o.IncludeTsv = &v
}

// GetExpDebugValues returns the ExpDebugValues field value if set, zero value otherwise.
func (o *V2AssemblyDatasetRequest) GetExpDebugValues() string {
	if o == nil || o.ExpDebugValues == nil {
		var ret string
		return ret
	}
	return *o.ExpDebugValues
}

// GetExpDebugValuesOk returns a tuple with the ExpDebugValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AssemblyDatasetRequest) GetExpDebugValuesOk() (*string, bool) {
	if o == nil || o.ExpDebugValues == nil {
		return nil, false
	}
	return o.ExpDebugValues, true
}

// HasExpDebugValues returns a boolean if a field has been set.
func (o *V2AssemblyDatasetRequest) HasExpDebugValues() bool {
	if o != nil && o.ExpDebugValues != nil {
		return true
	}

	return false
}

// SetExpDebugValues gets a reference to the given string and assigns it to the ExpDebugValues field.
func (o *V2AssemblyDatasetRequest) SetExpDebugValues(v string) {
	o.ExpDebugValues = &v
}

func (o V2AssemblyDatasetRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Accessions != nil {
		toSerialize["accessions"] = o.Accessions
	}
	if o.Chromosomes != nil {
		toSerialize["chromosomes"] = o.Chromosomes
	}
	if o.IncludeAnnotationType != nil {
		toSerialize["include_annotation_type"] = o.IncludeAnnotationType
	}
	if o.Hydrated != nil {
		toSerialize["hydrated"] = o.Hydrated
	}
	if o.IncludeTsv != nil {
		toSerialize["include_tsv"] = o.IncludeTsv
	}
	if o.ExpDebugValues != nil {
		toSerialize["_exp_debug_values"] = o.ExpDebugValues
	}
	return json.Marshal(toSerialize)
}

type NullableV2AssemblyDatasetRequest struct {
	value *V2AssemblyDatasetRequest
	isSet bool
}

func (v NullableV2AssemblyDatasetRequest) Get() *V2AssemblyDatasetRequest {
	return v.value
}

func (v *NullableV2AssemblyDatasetRequest) Set(val *V2AssemblyDatasetRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableV2AssemblyDatasetRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableV2AssemblyDatasetRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2AssemblyDatasetRequest(val *V2AssemblyDatasetRequest) *NullableV2AssemblyDatasetRequest {
	return &NullableV2AssemblyDatasetRequest{value: val, isSet: true}
}

func (v NullableV2AssemblyDatasetRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2AssemblyDatasetRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


