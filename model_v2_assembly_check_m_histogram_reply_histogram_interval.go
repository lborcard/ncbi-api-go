/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V2AssemblyCheckMHistogramReplyHistogramInterval struct for V2AssemblyCheckMHistogramReplyHistogramInterval
type V2AssemblyCheckMHistogramReplyHistogramInterval struct {
	StartPos *float32 `json:"start_pos,omitempty"`
	StopPos *float32 `json:"stop_pos,omitempty"`
	Count *float32 `json:"count,omitempty"`
}

// NewV2AssemblyCheckMHistogramReplyHistogramInterval instantiates a new V2AssemblyCheckMHistogramReplyHistogramInterval object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2AssemblyCheckMHistogramReplyHistogramInterval() *V2AssemblyCheckMHistogramReplyHistogramInterval {
	this := V2AssemblyCheckMHistogramReplyHistogramInterval{}
	return &this
}

// NewV2AssemblyCheckMHistogramReplyHistogramIntervalWithDefaults instantiates a new V2AssemblyCheckMHistogramReplyHistogramInterval object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2AssemblyCheckMHistogramReplyHistogramIntervalWithDefaults() *V2AssemblyCheckMHistogramReplyHistogramInterval {
	this := V2AssemblyCheckMHistogramReplyHistogramInterval{}
	return &this
}

// GetStartPos returns the StartPos field value if set, zero value otherwise.
func (o *V2AssemblyCheckMHistogramReplyHistogramInterval) GetStartPos() float32 {
	if o == nil || o.StartPos == nil {
		var ret float32
		return ret
	}
	return *o.StartPos
}

// GetStartPosOk returns a tuple with the StartPos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AssemblyCheckMHistogramReplyHistogramInterval) GetStartPosOk() (*float32, bool) {
	if o == nil || o.StartPos == nil {
		return nil, false
	}
	return o.StartPos, true
}

// HasStartPos returns a boolean if a field has been set.
func (o *V2AssemblyCheckMHistogramReplyHistogramInterval) HasStartPos() bool {
	if o != nil && o.StartPos != nil {
		return true
	}

	return false
}

// SetStartPos gets a reference to the given float32 and assigns it to the StartPos field.
func (o *V2AssemblyCheckMHistogramReplyHistogramInterval) SetStartPos(v float32) {
	o.StartPos = &v
}

// GetStopPos returns the StopPos field value if set, zero value otherwise.
func (o *V2AssemblyCheckMHistogramReplyHistogramInterval) GetStopPos() float32 {
	if o == nil || o.StopPos == nil {
		var ret float32
		return ret
	}
	return *o.StopPos
}

// GetStopPosOk returns a tuple with the StopPos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AssemblyCheckMHistogramReplyHistogramInterval) GetStopPosOk() (*float32, bool) {
	if o == nil || o.StopPos == nil {
		return nil, false
	}
	return o.StopPos, true
}

// HasStopPos returns a boolean if a field has been set.
func (o *V2AssemblyCheckMHistogramReplyHistogramInterval) HasStopPos() bool {
	if o != nil && o.StopPos != nil {
		return true
	}

	return false
}

// SetStopPos gets a reference to the given float32 and assigns it to the StopPos field.
func (o *V2AssemblyCheckMHistogramReplyHistogramInterval) SetStopPos(v float32) {
	o.StopPos = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *V2AssemblyCheckMHistogramReplyHistogramInterval) GetCount() float32 {
	if o == nil || o.Count == nil {
		var ret float32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AssemblyCheckMHistogramReplyHistogramInterval) GetCountOk() (*float32, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *V2AssemblyCheckMHistogramReplyHistogramInterval) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given float32 and assigns it to the Count field.
func (o *V2AssemblyCheckMHistogramReplyHistogramInterval) SetCount(v float32) {
	o.Count = &v
}

func (o V2AssemblyCheckMHistogramReplyHistogramInterval) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StartPos != nil {
		toSerialize["start_pos"] = o.StartPos
	}
	if o.StopPos != nil {
		toSerialize["stop_pos"] = o.StopPos
	}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	return json.Marshal(toSerialize)
}

type NullableV2AssemblyCheckMHistogramReplyHistogramInterval struct {
	value *V2AssemblyCheckMHistogramReplyHistogramInterval
	isSet bool
}

func (v NullableV2AssemblyCheckMHistogramReplyHistogramInterval) Get() *V2AssemblyCheckMHistogramReplyHistogramInterval {
	return v.value
}

func (v *NullableV2AssemblyCheckMHistogramReplyHistogramInterval) Set(val *V2AssemblyCheckMHistogramReplyHistogramInterval) {
	v.value = val
	v.isSet = true
}

func (v NullableV2AssemblyCheckMHistogramReplyHistogramInterval) IsSet() bool {
	return v.isSet
}

func (v *NullableV2AssemblyCheckMHistogramReplyHistogramInterval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2AssemblyCheckMHistogramReplyHistogramInterval(val *V2AssemblyCheckMHistogramReplyHistogramInterval) *NullableV2AssemblyCheckMHistogramReplyHistogramInterval {
	return &NullableV2AssemblyCheckMHistogramReplyHistogramInterval{value: val, isSet: true}
}

func (v NullableV2AssemblyCheckMHistogramReplyHistogramInterval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2AssemblyCheckMHistogramReplyHistogramInterval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


