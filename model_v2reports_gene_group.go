/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V2reportsGeneGroup struct for V2reportsGeneGroup
type V2reportsGeneGroup struct {
	Id *string `json:"id,omitempty"`
	Method *string `json:"method,omitempty"`
}

// NewV2reportsGeneGroup instantiates a new V2reportsGeneGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2reportsGeneGroup() *V2reportsGeneGroup {
	this := V2reportsGeneGroup{}
	return &this
}

// NewV2reportsGeneGroupWithDefaults instantiates a new V2reportsGeneGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2reportsGeneGroupWithDefaults() *V2reportsGeneGroup {
	this := V2reportsGeneGroup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *V2reportsGeneGroup) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsGeneGroup) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *V2reportsGeneGroup) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *V2reportsGeneGroup) SetId(v string) {
	o.Id = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *V2reportsGeneGroup) GetMethod() string {
	if o == nil || o.Method == nil {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsGeneGroup) GetMethodOk() (*string, bool) {
	if o == nil || o.Method == nil {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *V2reportsGeneGroup) HasMethod() bool {
	if o != nil && o.Method != nil {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *V2reportsGeneGroup) SetMethod(v string) {
	o.Method = &v
}

func (o V2reportsGeneGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Method != nil {
		toSerialize["method"] = o.Method
	}
	return json.Marshal(toSerialize)
}

type NullableV2reportsGeneGroup struct {
	value *V2reportsGeneGroup
	isSet bool
}

func (v NullableV2reportsGeneGroup) Get() *V2reportsGeneGroup {
	return v.value
}

func (v *NullableV2reportsGeneGroup) Set(val *V2reportsGeneGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableV2reportsGeneGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableV2reportsGeneGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2reportsGeneGroup(val *V2reportsGeneGroup) *NullableV2reportsGeneGroup {
	return &NullableV2reportsGeneGroup{value: val, isSet: true}
}

func (v NullableV2reportsGeneGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2reportsGeneGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


