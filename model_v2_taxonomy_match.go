/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ncbi-openapi-v2_goland

import (
	"encoding/json"
)

// V2TaxonomyMatch struct for V2TaxonomyMatch
type V2TaxonomyMatch struct {
	Warnings []V2reportsWarning `json:"warnings,omitempty"`
	Errors []V2reportsError `json:"errors,omitempty"`
	Query []string `json:"query,omitempty"`
	Taxonomy *V2TaxonomyNode `json:"taxonomy,omitempty"`
}

// NewV2TaxonomyMatch instantiates a new V2TaxonomyMatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2TaxonomyMatch() *V2TaxonomyMatch {
	this := V2TaxonomyMatch{}
	return &this
}

// NewV2TaxonomyMatchWithDefaults instantiates a new V2TaxonomyMatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2TaxonomyMatchWithDefaults() *V2TaxonomyMatch {
	this := V2TaxonomyMatch{}
	return &this
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *V2TaxonomyMatch) GetWarnings() []V2reportsWarning {
	if o == nil || o.Warnings == nil {
		var ret []V2reportsWarning
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2TaxonomyMatch) GetWarningsOk() ([]V2reportsWarning, bool) {
	if o == nil || o.Warnings == nil {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *V2TaxonomyMatch) HasWarnings() bool {
	if o != nil && o.Warnings != nil {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []V2reportsWarning and assigns it to the Warnings field.
func (o *V2TaxonomyMatch) SetWarnings(v []V2reportsWarning) {
	o.Warnings = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *V2TaxonomyMatch) GetErrors() []V2reportsError {
	if o == nil || o.Errors == nil {
		var ret []V2reportsError
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2TaxonomyMatch) GetErrorsOk() ([]V2reportsError, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *V2TaxonomyMatch) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []V2reportsError and assigns it to the Errors field.
func (o *V2TaxonomyMatch) SetErrors(v []V2reportsError) {
	o.Errors = v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *V2TaxonomyMatch) GetQuery() []string {
	if o == nil || o.Query == nil {
		var ret []string
		return ret
	}
	return o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2TaxonomyMatch) GetQueryOk() ([]string, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *V2TaxonomyMatch) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given []string and assigns it to the Query field.
func (o *V2TaxonomyMatch) SetQuery(v []string) {
	o.Query = v
}

// GetTaxonomy returns the Taxonomy field value if set, zero value otherwise.
func (o *V2TaxonomyMatch) GetTaxonomy() V2TaxonomyNode {
	if o == nil || o.Taxonomy == nil {
		var ret V2TaxonomyNode
		return ret
	}
	return *o.Taxonomy
}

// GetTaxonomyOk returns a tuple with the Taxonomy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2TaxonomyMatch) GetTaxonomyOk() (*V2TaxonomyNode, bool) {
	if o == nil || o.Taxonomy == nil {
		return nil, false
	}
	return o.Taxonomy, true
}

// HasTaxonomy returns a boolean if a field has been set.
func (o *V2TaxonomyMatch) HasTaxonomy() bool {
	if o != nil && o.Taxonomy != nil {
		return true
	}

	return false
}

// SetTaxonomy gets a reference to the given V2TaxonomyNode and assigns it to the Taxonomy field.
func (o *V2TaxonomyMatch) SetTaxonomy(v V2TaxonomyNode) {
	o.Taxonomy = &v
}

func (o V2TaxonomyMatch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	if o.Taxonomy != nil {
		toSerialize["taxonomy"] = o.Taxonomy
	}
	return json.Marshal(toSerialize)
}

type NullableV2TaxonomyMatch struct {
	value *V2TaxonomyMatch
	isSet bool
}

func (v NullableV2TaxonomyMatch) Get() *V2TaxonomyMatch {
	return v.value
}

func (v *NullableV2TaxonomyMatch) Set(val *V2TaxonomyMatch) {
	v.value = val
	v.isSet = true
}

func (v NullableV2TaxonomyMatch) IsSet() bool {
	return v.isSet
}

func (v *NullableV2TaxonomyMatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2TaxonomyMatch(val *V2TaxonomyMatch) *NullableV2TaxonomyMatch {
	return &NullableV2TaxonomyMatch{value: val, isSet: true}
}

func (v NullableV2TaxonomyMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2TaxonomyMatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


