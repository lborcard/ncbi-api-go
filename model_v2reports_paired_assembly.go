/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ncbi-openapi-v2_goland

import (
	"encoding/json"
)

// V2reportsPairedAssembly struct for V2reportsPairedAssembly
type V2reportsPairedAssembly struct {
	Accession *string `json:"accession,omitempty"`
	Status *V2reportsAssemblyStatus `json:"status,omitempty"`
	AnnotationName *string `json:"annotation_name,omitempty"`
	OnlyGenbank *string `json:"only_genbank,omitempty"`
	OnlyRefseq *string `json:"only_refseq,omitempty"`
	Changed *string `json:"changed,omitempty"`
	ManualDiff *string `json:"manual_diff,omitempty"`
}

// NewV2reportsPairedAssembly instantiates a new V2reportsPairedAssembly object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2reportsPairedAssembly() *V2reportsPairedAssembly {
	this := V2reportsPairedAssembly{}
	var status V2reportsAssemblyStatus = V2REPORTSASSEMBLYSTATUS_ASSEMBLY_STATUS_UNKNOWN
	this.Status = &status
	return &this
}

// NewV2reportsPairedAssemblyWithDefaults instantiates a new V2reportsPairedAssembly object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2reportsPairedAssemblyWithDefaults() *V2reportsPairedAssembly {
	this := V2reportsPairedAssembly{}
	var status V2reportsAssemblyStatus = V2REPORTSASSEMBLYSTATUS_ASSEMBLY_STATUS_UNKNOWN
	this.Status = &status
	return &this
}

// GetAccession returns the Accession field value if set, zero value otherwise.
func (o *V2reportsPairedAssembly) GetAccession() string {
	if o == nil || o.Accession == nil {
		var ret string
		return ret
	}
	return *o.Accession
}

// GetAccessionOk returns a tuple with the Accession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsPairedAssembly) GetAccessionOk() (*string, bool) {
	if o == nil || o.Accession == nil {
		return nil, false
	}
	return o.Accession, true
}

// HasAccession returns a boolean if a field has been set.
func (o *V2reportsPairedAssembly) HasAccession() bool {
	if o != nil && o.Accession != nil {
		return true
	}

	return false
}

// SetAccession gets a reference to the given string and assigns it to the Accession field.
func (o *V2reportsPairedAssembly) SetAccession(v string) {
	o.Accession = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *V2reportsPairedAssembly) GetStatus() V2reportsAssemblyStatus {
	if o == nil || o.Status == nil {
		var ret V2reportsAssemblyStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsPairedAssembly) GetStatusOk() (*V2reportsAssemblyStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *V2reportsPairedAssembly) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given V2reportsAssemblyStatus and assigns it to the Status field.
func (o *V2reportsPairedAssembly) SetStatus(v V2reportsAssemblyStatus) {
	o.Status = &v
}

// GetAnnotationName returns the AnnotationName field value if set, zero value otherwise.
func (o *V2reportsPairedAssembly) GetAnnotationName() string {
	if o == nil || o.AnnotationName == nil {
		var ret string
		return ret
	}
	return *o.AnnotationName
}

// GetAnnotationNameOk returns a tuple with the AnnotationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsPairedAssembly) GetAnnotationNameOk() (*string, bool) {
	if o == nil || o.AnnotationName == nil {
		return nil, false
	}
	return o.AnnotationName, true
}

// HasAnnotationName returns a boolean if a field has been set.
func (o *V2reportsPairedAssembly) HasAnnotationName() bool {
	if o != nil && o.AnnotationName != nil {
		return true
	}

	return false
}

// SetAnnotationName gets a reference to the given string and assigns it to the AnnotationName field.
func (o *V2reportsPairedAssembly) SetAnnotationName(v string) {
	o.AnnotationName = &v
}

// GetOnlyGenbank returns the OnlyGenbank field value if set, zero value otherwise.
func (o *V2reportsPairedAssembly) GetOnlyGenbank() string {
	if o == nil || o.OnlyGenbank == nil {
		var ret string
		return ret
	}
	return *o.OnlyGenbank
}

// GetOnlyGenbankOk returns a tuple with the OnlyGenbank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsPairedAssembly) GetOnlyGenbankOk() (*string, bool) {
	if o == nil || o.OnlyGenbank == nil {
		return nil, false
	}
	return o.OnlyGenbank, true
}

// HasOnlyGenbank returns a boolean if a field has been set.
func (o *V2reportsPairedAssembly) HasOnlyGenbank() bool {
	if o != nil && o.OnlyGenbank != nil {
		return true
	}

	return false
}

// SetOnlyGenbank gets a reference to the given string and assigns it to the OnlyGenbank field.
func (o *V2reportsPairedAssembly) SetOnlyGenbank(v string) {
	o.OnlyGenbank = &v
}

// GetOnlyRefseq returns the OnlyRefseq field value if set, zero value otherwise.
func (o *V2reportsPairedAssembly) GetOnlyRefseq() string {
	if o == nil || o.OnlyRefseq == nil {
		var ret string
		return ret
	}
	return *o.OnlyRefseq
}

// GetOnlyRefseqOk returns a tuple with the OnlyRefseq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsPairedAssembly) GetOnlyRefseqOk() (*string, bool) {
	if o == nil || o.OnlyRefseq == nil {
		return nil, false
	}
	return o.OnlyRefseq, true
}

// HasOnlyRefseq returns a boolean if a field has been set.
func (o *V2reportsPairedAssembly) HasOnlyRefseq() bool {
	if o != nil && o.OnlyRefseq != nil {
		return true
	}

	return false
}

// SetOnlyRefseq gets a reference to the given string and assigns it to the OnlyRefseq field.
func (o *V2reportsPairedAssembly) SetOnlyRefseq(v string) {
	o.OnlyRefseq = &v
}

// GetChanged returns the Changed field value if set, zero value otherwise.
func (o *V2reportsPairedAssembly) GetChanged() string {
	if o == nil || o.Changed == nil {
		var ret string
		return ret
	}
	return *o.Changed
}

// GetChangedOk returns a tuple with the Changed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsPairedAssembly) GetChangedOk() (*string, bool) {
	if o == nil || o.Changed == nil {
		return nil, false
	}
	return o.Changed, true
}

// HasChanged returns a boolean if a field has been set.
func (o *V2reportsPairedAssembly) HasChanged() bool {
	if o != nil && o.Changed != nil {
		return true
	}

	return false
}

// SetChanged gets a reference to the given string and assigns it to the Changed field.
func (o *V2reportsPairedAssembly) SetChanged(v string) {
	o.Changed = &v
}

// GetManualDiff returns the ManualDiff field value if set, zero value otherwise.
func (o *V2reportsPairedAssembly) GetManualDiff() string {
	if o == nil || o.ManualDiff == nil {
		var ret string
		return ret
	}
	return *o.ManualDiff
}

// GetManualDiffOk returns a tuple with the ManualDiff field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsPairedAssembly) GetManualDiffOk() (*string, bool) {
	if o == nil || o.ManualDiff == nil {
		return nil, false
	}
	return o.ManualDiff, true
}

// HasManualDiff returns a boolean if a field has been set.
func (o *V2reportsPairedAssembly) HasManualDiff() bool {
	if o != nil && o.ManualDiff != nil {
		return true
	}

	return false
}

// SetManualDiff gets a reference to the given string and assigns it to the ManualDiff field.
func (o *V2reportsPairedAssembly) SetManualDiff(v string) {
	o.ManualDiff = &v
}

func (o V2reportsPairedAssembly) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Accession != nil {
		toSerialize["accession"] = o.Accession
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.AnnotationName != nil {
		toSerialize["annotation_name"] = o.AnnotationName
	}
	if o.OnlyGenbank != nil {
		toSerialize["only_genbank"] = o.OnlyGenbank
	}
	if o.OnlyRefseq != nil {
		toSerialize["only_refseq"] = o.OnlyRefseq
	}
	if o.Changed != nil {
		toSerialize["changed"] = o.Changed
	}
	if o.ManualDiff != nil {
		toSerialize["manual_diff"] = o.ManualDiff
	}
	return json.Marshal(toSerialize)
}

type NullableV2reportsPairedAssembly struct {
	value *V2reportsPairedAssembly
	isSet bool
}

func (v NullableV2reportsPairedAssembly) Get() *V2reportsPairedAssembly {
	return v.value
}

func (v *NullableV2reportsPairedAssembly) Set(val *V2reportsPairedAssembly) {
	v.value = val
	v.isSet = true
}

func (v NullableV2reportsPairedAssembly) IsSet() bool {
	return v.isSet
}

func (v *NullableV2reportsPairedAssembly) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2reportsPairedAssembly(val *V2reportsPairedAssembly) *NullableV2reportsPairedAssembly {
	return &NullableV2reportsPairedAssembly{value: val, isSet: true}
}

func (v NullableV2reportsPairedAssembly) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2reportsPairedAssembly) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


