/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// V2VirusTableField the model 'V2VirusTableField'
type V2VirusTableField string

// List of v2VirusTableField
const (
	V2VIRUSTABLEFIELD_UNSPECIFIED V2VirusTableField = "unspecified"
	V2VIRUSTABLEFIELD_NUCLEOTIDE_ACCESSION V2VirusTableField = "nucleotide_accession"
	V2VIRUSTABLEFIELD_SPECIES_TAX_ID V2VirusTableField = "species_tax_id"
	V2VIRUSTABLEFIELD_SPECIES_NAME V2VirusTableField = "species_name"
	V2VIRUSTABLEFIELD_GENUS V2VirusTableField = "genus"
	V2VIRUSTABLEFIELD_FAMILY V2VirusTableField = "family"
	V2VIRUSTABLEFIELD_NUCLEOTIDE_LENGTH V2VirusTableField = "nucleotide_length"
	V2VIRUSTABLEFIELD_ISOLATE_NAME V2VirusTableField = "isolate_name"
	V2VIRUSTABLEFIELD_SEQUENCE_TYPE V2VirusTableField = "sequence_type"
	V2VIRUSTABLEFIELD_NUC_COMPLETENESS V2VirusTableField = "nuc_completeness"
	V2VIRUSTABLEFIELD_GEO_LOCATION V2VirusTableField = "geo_location"
	V2VIRUSTABLEFIELD_US_STATE V2VirusTableField = "us_state"
	V2VIRUSTABLEFIELD_HOST_NAME V2VirusTableField = "host_name"
	V2VIRUSTABLEFIELD_HOST_TAX_ID V2VirusTableField = "host_tax_id"
	V2VIRUSTABLEFIELD_COLLECTION_DATE V2VirusTableField = "collection_date"
	V2VIRUSTABLEFIELD_BIOPROJECT V2VirusTableField = "bioproject"
	V2VIRUSTABLEFIELD_BIOSAMPLE V2VirusTableField = "biosample"
	V2VIRUSTABLEFIELD_POLYPROTEIN_NAME V2VirusTableField = "polyprotein_name"
	V2VIRUSTABLEFIELD_PROTEIN_NAME V2VirusTableField = "protein_name"
	V2VIRUSTABLEFIELD_PROTEIN_ACCESSION V2VirusTableField = "protein_accession"
	V2VIRUSTABLEFIELD_PROTEIN_SYNONYM V2VirusTableField = "protein_synonym"
	V2VIRUSTABLEFIELD_CDS_SPAN V2VirusTableField = "cds_span"
)

// All allowed values of V2VirusTableField enum
var AllowedV2VirusTableFieldEnumValues = []V2VirusTableField{
	"unspecified",
	"nucleotide_accession",
	"species_tax_id",
	"species_name",
	"genus",
	"family",
	"nucleotide_length",
	"isolate_name",
	"sequence_type",
	"nuc_completeness",
	"geo_location",
	"us_state",
	"host_name",
	"host_tax_id",
	"collection_date",
	"bioproject",
	"biosample",
	"polyprotein_name",
	"protein_name",
	"protein_accession",
	"protein_synonym",
	"cds_span",
}

func (v *V2VirusTableField) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V2VirusTableField(value)
	for _, existing := range AllowedV2VirusTableFieldEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V2VirusTableField", value)
}

// NewV2VirusTableFieldFromValue returns a pointer to a valid V2VirusTableField
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV2VirusTableFieldFromValue(v string) (*V2VirusTableField, error) {
	ev := V2VirusTableField(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V2VirusTableField: valid values are %v", v, AllowedV2VirusTableFieldEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V2VirusTableField) IsValid() bool {
	for _, existing := range AllowedV2VirusTableFieldEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v2VirusTableField value
func (v V2VirusTableField) Ptr() *V2VirusTableField {
	return &v
}

type NullableV2VirusTableField struct {
	value *V2VirusTableField
	isSet bool
}

func (v NullableV2VirusTableField) Get() *V2VirusTableField {
	return v.value
}

func (v *NullableV2VirusTableField) Set(val *V2VirusTableField) {
	v.value = val
	v.isSet = true
}

func (v NullableV2VirusTableField) IsSet() bool {
	return v.isSet
}

func (v *NullableV2VirusTableField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2VirusTableField(val *V2VirusTableField) *NullableV2VirusTableField {
	return &NullableV2VirusTableField{value: val, isSet: true}
}

func (v NullableV2VirusTableField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2VirusTableField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

