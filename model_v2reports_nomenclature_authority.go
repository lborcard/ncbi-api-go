/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ncbi-openapi-v2_goland

import (
	"encoding/json"
)

// V2reportsNomenclatureAuthority struct for V2reportsNomenclatureAuthority
type V2reportsNomenclatureAuthority struct {
	Authority *string `json:"authority,omitempty"`
	Identifier *string `json:"identifier,omitempty"`
}

// NewV2reportsNomenclatureAuthority instantiates a new V2reportsNomenclatureAuthority object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2reportsNomenclatureAuthority() *V2reportsNomenclatureAuthority {
	this := V2reportsNomenclatureAuthority{}
	return &this
}

// NewV2reportsNomenclatureAuthorityWithDefaults instantiates a new V2reportsNomenclatureAuthority object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2reportsNomenclatureAuthorityWithDefaults() *V2reportsNomenclatureAuthority {
	this := V2reportsNomenclatureAuthority{}
	return &this
}

// GetAuthority returns the Authority field value if set, zero value otherwise.
func (o *V2reportsNomenclatureAuthority) GetAuthority() string {
	if o == nil || o.Authority == nil {
		var ret string
		return ret
	}
	return *o.Authority
}

// GetAuthorityOk returns a tuple with the Authority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsNomenclatureAuthority) GetAuthorityOk() (*string, bool) {
	if o == nil || o.Authority == nil {
		return nil, false
	}
	return o.Authority, true
}

// HasAuthority returns a boolean if a field has been set.
func (o *V2reportsNomenclatureAuthority) HasAuthority() bool {
	if o != nil && o.Authority != nil {
		return true
	}

	return false
}

// SetAuthority gets a reference to the given string and assigns it to the Authority field.
func (o *V2reportsNomenclatureAuthority) SetAuthority(v string) {
	o.Authority = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *V2reportsNomenclatureAuthority) GetIdentifier() string {
	if o == nil || o.Identifier == nil {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsNomenclatureAuthority) GetIdentifierOk() (*string, bool) {
	if o == nil || o.Identifier == nil {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *V2reportsNomenclatureAuthority) HasIdentifier() bool {
	if o != nil && o.Identifier != nil {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *V2reportsNomenclatureAuthority) SetIdentifier(v string) {
	o.Identifier = &v
}

func (o V2reportsNomenclatureAuthority) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Authority != nil {
		toSerialize["authority"] = o.Authority
	}
	if o.Identifier != nil {
		toSerialize["identifier"] = o.Identifier
	}
	return json.Marshal(toSerialize)
}

type NullableV2reportsNomenclatureAuthority struct {
	value *V2reportsNomenclatureAuthority
	isSet bool
}

func (v NullableV2reportsNomenclatureAuthority) Get() *V2reportsNomenclatureAuthority {
	return v.value
}

func (v *NullableV2reportsNomenclatureAuthority) Set(val *V2reportsNomenclatureAuthority) {
	v.value = val
	v.isSet = true
}

func (v NullableV2reportsNomenclatureAuthority) IsSet() bool {
	return v.isSet
}

func (v *NullableV2reportsNomenclatureAuthority) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2reportsNomenclatureAuthority(val *V2reportsNomenclatureAuthority) *NullableV2reportsNomenclatureAuthority {
	return &NullableV2reportsNomenclatureAuthority{value: val, isSet: true}
}

func (v NullableV2reportsNomenclatureAuthority) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2reportsNomenclatureAuthority) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


