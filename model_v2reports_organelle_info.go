/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V2reportsOrganelleInfo struct for V2reportsOrganelleInfo
type V2reportsOrganelleInfo struct {
	AssemblyName *string `json:"assembly_name,omitempty"`
	InfraspecificName *string `json:"infraspecific_name,omitempty"`
	Bioproject []string `json:"bioproject,omitempty"`
	Description *string `json:"description,omitempty"`
	TotalSeqLength *string `json:"total_seq_length,omitempty"`
	Submitter *string `json:"submitter,omitempty"`
}

// NewV2reportsOrganelleInfo instantiates a new V2reportsOrganelleInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2reportsOrganelleInfo() *V2reportsOrganelleInfo {
	this := V2reportsOrganelleInfo{}
	return &this
}

// NewV2reportsOrganelleInfoWithDefaults instantiates a new V2reportsOrganelleInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2reportsOrganelleInfoWithDefaults() *V2reportsOrganelleInfo {
	this := V2reportsOrganelleInfo{}
	return &this
}

// GetAssemblyName returns the AssemblyName field value if set, zero value otherwise.
func (o *V2reportsOrganelleInfo) GetAssemblyName() string {
	if o == nil || o.AssemblyName == nil {
		var ret string
		return ret
	}
	return *o.AssemblyName
}

// GetAssemblyNameOk returns a tuple with the AssemblyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsOrganelleInfo) GetAssemblyNameOk() (*string, bool) {
	if o == nil || o.AssemblyName == nil {
		return nil, false
	}
	return o.AssemblyName, true
}

// HasAssemblyName returns a boolean if a field has been set.
func (o *V2reportsOrganelleInfo) HasAssemblyName() bool {
	if o != nil && o.AssemblyName != nil {
		return true
	}

	return false
}

// SetAssemblyName gets a reference to the given string and assigns it to the AssemblyName field.
func (o *V2reportsOrganelleInfo) SetAssemblyName(v string) {
	o.AssemblyName = &v
}

// GetInfraspecificName returns the InfraspecificName field value if set, zero value otherwise.
func (o *V2reportsOrganelleInfo) GetInfraspecificName() string {
	if o == nil || o.InfraspecificName == nil {
		var ret string
		return ret
	}
	return *o.InfraspecificName
}

// GetInfraspecificNameOk returns a tuple with the InfraspecificName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsOrganelleInfo) GetInfraspecificNameOk() (*string, bool) {
	if o == nil || o.InfraspecificName == nil {
		return nil, false
	}
	return o.InfraspecificName, true
}

// HasInfraspecificName returns a boolean if a field has been set.
func (o *V2reportsOrganelleInfo) HasInfraspecificName() bool {
	if o != nil && o.InfraspecificName != nil {
		return true
	}

	return false
}

// SetInfraspecificName gets a reference to the given string and assigns it to the InfraspecificName field.
func (o *V2reportsOrganelleInfo) SetInfraspecificName(v string) {
	o.InfraspecificName = &v
}

// GetBioproject returns the Bioproject field value if set, zero value otherwise.
func (o *V2reportsOrganelleInfo) GetBioproject() []string {
	if o == nil || o.Bioproject == nil {
		var ret []string
		return ret
	}
	return o.Bioproject
}

// GetBioprojectOk returns a tuple with the Bioproject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsOrganelleInfo) GetBioprojectOk() ([]string, bool) {
	if o == nil || o.Bioproject == nil {
		return nil, false
	}
	return o.Bioproject, true
}

// HasBioproject returns a boolean if a field has been set.
func (o *V2reportsOrganelleInfo) HasBioproject() bool {
	if o != nil && o.Bioproject != nil {
		return true
	}

	return false
}

// SetBioproject gets a reference to the given []string and assigns it to the Bioproject field.
func (o *V2reportsOrganelleInfo) SetBioproject(v []string) {
	o.Bioproject = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *V2reportsOrganelleInfo) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsOrganelleInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *V2reportsOrganelleInfo) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *V2reportsOrganelleInfo) SetDescription(v string) {
	o.Description = &v
}

// GetTotalSeqLength returns the TotalSeqLength field value if set, zero value otherwise.
func (o *V2reportsOrganelleInfo) GetTotalSeqLength() string {
	if o == nil || o.TotalSeqLength == nil {
		var ret string
		return ret
	}
	return *o.TotalSeqLength
}

// GetTotalSeqLengthOk returns a tuple with the TotalSeqLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsOrganelleInfo) GetTotalSeqLengthOk() (*string, bool) {
	if o == nil || o.TotalSeqLength == nil {
		return nil, false
	}
	return o.TotalSeqLength, true
}

// HasTotalSeqLength returns a boolean if a field has been set.
func (o *V2reportsOrganelleInfo) HasTotalSeqLength() bool {
	if o != nil && o.TotalSeqLength != nil {
		return true
	}

	return false
}

// SetTotalSeqLength gets a reference to the given string and assigns it to the TotalSeqLength field.
func (o *V2reportsOrganelleInfo) SetTotalSeqLength(v string) {
	o.TotalSeqLength = &v
}

// GetSubmitter returns the Submitter field value if set, zero value otherwise.
func (o *V2reportsOrganelleInfo) GetSubmitter() string {
	if o == nil || o.Submitter == nil {
		var ret string
		return ret
	}
	return *o.Submitter
}

// GetSubmitterOk returns a tuple with the Submitter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsOrganelleInfo) GetSubmitterOk() (*string, bool) {
	if o == nil || o.Submitter == nil {
		return nil, false
	}
	return o.Submitter, true
}

// HasSubmitter returns a boolean if a field has been set.
func (o *V2reportsOrganelleInfo) HasSubmitter() bool {
	if o != nil && o.Submitter != nil {
		return true
	}

	return false
}

// SetSubmitter gets a reference to the given string and assigns it to the Submitter field.
func (o *V2reportsOrganelleInfo) SetSubmitter(v string) {
	o.Submitter = &v
}

func (o V2reportsOrganelleInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AssemblyName != nil {
		toSerialize["assembly_name"] = o.AssemblyName
	}
	if o.InfraspecificName != nil {
		toSerialize["infraspecific_name"] = o.InfraspecificName
	}
	if o.Bioproject != nil {
		toSerialize["bioproject"] = o.Bioproject
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.TotalSeqLength != nil {
		toSerialize["total_seq_length"] = o.TotalSeqLength
	}
	if o.Submitter != nil {
		toSerialize["submitter"] = o.Submitter
	}
	return json.Marshal(toSerialize)
}

type NullableV2reportsOrganelleInfo struct {
	value *V2reportsOrganelleInfo
	isSet bool
}

func (v NullableV2reportsOrganelleInfo) Get() *V2reportsOrganelleInfo {
	return v.value
}

func (v *NullableV2reportsOrganelleInfo) Set(val *V2reportsOrganelleInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableV2reportsOrganelleInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableV2reportsOrganelleInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2reportsOrganelleInfo(val *V2reportsOrganelleInfo) *NullableV2reportsOrganelleInfo {
	return &NullableV2reportsOrganelleInfo{value: val, isSet: true}
}

func (v NullableV2reportsOrganelleInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2reportsOrganelleInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


