/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ncbi-openapi-v2_goland

import (
	"encoding/json"
)

// V2reportsTaxonomyNamesDescriptor struct for V2reportsTaxonomyNamesDescriptor
type V2reportsTaxonomyNamesDescriptor struct {
	TaxId *string `json:"tax_id,omitempty"`
	Rank *V2reportsRankType `json:"rank,omitempty"`
	CurrentScientificName *V2reportsNameAndAuthority `json:"current_scientific_name,omitempty"`
	GroupName *string `json:"group_name,omitempty"`
	CuratorCommonName *string `json:"curator_common_name,omitempty"`
	OtherCommonNames []string `json:"other_common_names,omitempty"`
	GeneralNotes []string `json:"general_notes,omitempty"`
	LinksFromType *string `json:"links_from_type,omitempty"`
	Citations []V2reportsTaxonomyNamesDescriptorCitation `json:"citations,omitempty"`
	CurrentScientificNameIsFormal *bool `json:"current_scientific_name_is_formal,omitempty"`
}

// NewV2reportsTaxonomyNamesDescriptor instantiates a new V2reportsTaxonomyNamesDescriptor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2reportsTaxonomyNamesDescriptor() *V2reportsTaxonomyNamesDescriptor {
	this := V2reportsTaxonomyNamesDescriptor{}
	var rank V2reportsRankType = V2REPORTSRANKTYPE_NO_RANK
	this.Rank = &rank
	return &this
}

// NewV2reportsTaxonomyNamesDescriptorWithDefaults instantiates a new V2reportsTaxonomyNamesDescriptor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2reportsTaxonomyNamesDescriptorWithDefaults() *V2reportsTaxonomyNamesDescriptor {
	this := V2reportsTaxonomyNamesDescriptor{}
	var rank V2reportsRankType = V2REPORTSRANKTYPE_NO_RANK
	this.Rank = &rank
	return &this
}

// GetTaxId returns the TaxId field value if set, zero value otherwise.
func (o *V2reportsTaxonomyNamesDescriptor) GetTaxId() string {
	if o == nil || o.TaxId == nil {
		var ret string
		return ret
	}
	return *o.TaxId
}

// GetTaxIdOk returns a tuple with the TaxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsTaxonomyNamesDescriptor) GetTaxIdOk() (*string, bool) {
	if o == nil || o.TaxId == nil {
		return nil, false
	}
	return o.TaxId, true
}

// HasTaxId returns a boolean if a field has been set.
func (o *V2reportsTaxonomyNamesDescriptor) HasTaxId() bool {
	if o != nil && o.TaxId != nil {
		return true
	}

	return false
}

// SetTaxId gets a reference to the given string and assigns it to the TaxId field.
func (o *V2reportsTaxonomyNamesDescriptor) SetTaxId(v string) {
	o.TaxId = &v
}

// GetRank returns the Rank field value if set, zero value otherwise.
func (o *V2reportsTaxonomyNamesDescriptor) GetRank() V2reportsRankType {
	if o == nil || o.Rank == nil {
		var ret V2reportsRankType
		return ret
	}
	return *o.Rank
}

// GetRankOk returns a tuple with the Rank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsTaxonomyNamesDescriptor) GetRankOk() (*V2reportsRankType, bool) {
	if o == nil || o.Rank == nil {
		return nil, false
	}
	return o.Rank, true
}

// HasRank returns a boolean if a field has been set.
func (o *V2reportsTaxonomyNamesDescriptor) HasRank() bool {
	if o != nil && o.Rank != nil {
		return true
	}

	return false
}

// SetRank gets a reference to the given V2reportsRankType and assigns it to the Rank field.
func (o *V2reportsTaxonomyNamesDescriptor) SetRank(v V2reportsRankType) {
	o.Rank = &v
}

// GetCurrentScientificName returns the CurrentScientificName field value if set, zero value otherwise.
func (o *V2reportsTaxonomyNamesDescriptor) GetCurrentScientificName() V2reportsNameAndAuthority {
	if o == nil || o.CurrentScientificName == nil {
		var ret V2reportsNameAndAuthority
		return ret
	}
	return *o.CurrentScientificName
}

// GetCurrentScientificNameOk returns a tuple with the CurrentScientificName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsTaxonomyNamesDescriptor) GetCurrentScientificNameOk() (*V2reportsNameAndAuthority, bool) {
	if o == nil || o.CurrentScientificName == nil {
		return nil, false
	}
	return o.CurrentScientificName, true
}

// HasCurrentScientificName returns a boolean if a field has been set.
func (o *V2reportsTaxonomyNamesDescriptor) HasCurrentScientificName() bool {
	if o != nil && o.CurrentScientificName != nil {
		return true
	}

	return false
}

// SetCurrentScientificName gets a reference to the given V2reportsNameAndAuthority and assigns it to the CurrentScientificName field.
func (o *V2reportsTaxonomyNamesDescriptor) SetCurrentScientificName(v V2reportsNameAndAuthority) {
	o.CurrentScientificName = &v
}

// GetGroupName returns the GroupName field value if set, zero value otherwise.
func (o *V2reportsTaxonomyNamesDescriptor) GetGroupName() string {
	if o == nil || o.GroupName == nil {
		var ret string
		return ret
	}
	return *o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsTaxonomyNamesDescriptor) GetGroupNameOk() (*string, bool) {
	if o == nil || o.GroupName == nil {
		return nil, false
	}
	return o.GroupName, true
}

// HasGroupName returns a boolean if a field has been set.
func (o *V2reportsTaxonomyNamesDescriptor) HasGroupName() bool {
	if o != nil && o.GroupName != nil {
		return true
	}

	return false
}

// SetGroupName gets a reference to the given string and assigns it to the GroupName field.
func (o *V2reportsTaxonomyNamesDescriptor) SetGroupName(v string) {
	o.GroupName = &v
}

// GetCuratorCommonName returns the CuratorCommonName field value if set, zero value otherwise.
func (o *V2reportsTaxonomyNamesDescriptor) GetCuratorCommonName() string {
	if o == nil || o.CuratorCommonName == nil {
		var ret string
		return ret
	}
	return *o.CuratorCommonName
}

// GetCuratorCommonNameOk returns a tuple with the CuratorCommonName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsTaxonomyNamesDescriptor) GetCuratorCommonNameOk() (*string, bool) {
	if o == nil || o.CuratorCommonName == nil {
		return nil, false
	}
	return o.CuratorCommonName, true
}

// HasCuratorCommonName returns a boolean if a field has been set.
func (o *V2reportsTaxonomyNamesDescriptor) HasCuratorCommonName() bool {
	if o != nil && o.CuratorCommonName != nil {
		return true
	}

	return false
}

// SetCuratorCommonName gets a reference to the given string and assigns it to the CuratorCommonName field.
func (o *V2reportsTaxonomyNamesDescriptor) SetCuratorCommonName(v string) {
	o.CuratorCommonName = &v
}

// GetOtherCommonNames returns the OtherCommonNames field value if set, zero value otherwise.
func (o *V2reportsTaxonomyNamesDescriptor) GetOtherCommonNames() []string {
	if o == nil || o.OtherCommonNames == nil {
		var ret []string
		return ret
	}
	return o.OtherCommonNames
}

// GetOtherCommonNamesOk returns a tuple with the OtherCommonNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsTaxonomyNamesDescriptor) GetOtherCommonNamesOk() ([]string, bool) {
	if o == nil || o.OtherCommonNames == nil {
		return nil, false
	}
	return o.OtherCommonNames, true
}

// HasOtherCommonNames returns a boolean if a field has been set.
func (o *V2reportsTaxonomyNamesDescriptor) HasOtherCommonNames() bool {
	if o != nil && o.OtherCommonNames != nil {
		return true
	}

	return false
}

// SetOtherCommonNames gets a reference to the given []string and assigns it to the OtherCommonNames field.
func (o *V2reportsTaxonomyNamesDescriptor) SetOtherCommonNames(v []string) {
	o.OtherCommonNames = v
}

// GetGeneralNotes returns the GeneralNotes field value if set, zero value otherwise.
func (o *V2reportsTaxonomyNamesDescriptor) GetGeneralNotes() []string {
	if o == nil || o.GeneralNotes == nil {
		var ret []string
		return ret
	}
	return o.GeneralNotes
}

// GetGeneralNotesOk returns a tuple with the GeneralNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsTaxonomyNamesDescriptor) GetGeneralNotesOk() ([]string, bool) {
	if o == nil || o.GeneralNotes == nil {
		return nil, false
	}
	return o.GeneralNotes, true
}

// HasGeneralNotes returns a boolean if a field has been set.
func (o *V2reportsTaxonomyNamesDescriptor) HasGeneralNotes() bool {
	if o != nil && o.GeneralNotes != nil {
		return true
	}

	return false
}

// SetGeneralNotes gets a reference to the given []string and assigns it to the GeneralNotes field.
func (o *V2reportsTaxonomyNamesDescriptor) SetGeneralNotes(v []string) {
	o.GeneralNotes = v
}

// GetLinksFromType returns the LinksFromType field value if set, zero value otherwise.
func (o *V2reportsTaxonomyNamesDescriptor) GetLinksFromType() string {
	if o == nil || o.LinksFromType == nil {
		var ret string
		return ret
	}
	return *o.LinksFromType
}

// GetLinksFromTypeOk returns a tuple with the LinksFromType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsTaxonomyNamesDescriptor) GetLinksFromTypeOk() (*string, bool) {
	if o == nil || o.LinksFromType == nil {
		return nil, false
	}
	return o.LinksFromType, true
}

// HasLinksFromType returns a boolean if a field has been set.
func (o *V2reportsTaxonomyNamesDescriptor) HasLinksFromType() bool {
	if o != nil && o.LinksFromType != nil {
		return true
	}

	return false
}

// SetLinksFromType gets a reference to the given string and assigns it to the LinksFromType field.
func (o *V2reportsTaxonomyNamesDescriptor) SetLinksFromType(v string) {
	o.LinksFromType = &v
}

// GetCitations returns the Citations field value if set, zero value otherwise.
func (o *V2reportsTaxonomyNamesDescriptor) GetCitations() []V2reportsTaxonomyNamesDescriptorCitation {
	if o == nil || o.Citations == nil {
		var ret []V2reportsTaxonomyNamesDescriptorCitation
		return ret
	}
	return o.Citations
}

// GetCitationsOk returns a tuple with the Citations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsTaxonomyNamesDescriptor) GetCitationsOk() ([]V2reportsTaxonomyNamesDescriptorCitation, bool) {
	if o == nil || o.Citations == nil {
		return nil, false
	}
	return o.Citations, true
}

// HasCitations returns a boolean if a field has been set.
func (o *V2reportsTaxonomyNamesDescriptor) HasCitations() bool {
	if o != nil && o.Citations != nil {
		return true
	}

	return false
}

// SetCitations gets a reference to the given []V2reportsTaxonomyNamesDescriptorCitation and assigns it to the Citations field.
func (o *V2reportsTaxonomyNamesDescriptor) SetCitations(v []V2reportsTaxonomyNamesDescriptorCitation) {
	o.Citations = v
}

// GetCurrentScientificNameIsFormal returns the CurrentScientificNameIsFormal field value if set, zero value otherwise.
func (o *V2reportsTaxonomyNamesDescriptor) GetCurrentScientificNameIsFormal() bool {
	if o == nil || o.CurrentScientificNameIsFormal == nil {
		var ret bool
		return ret
	}
	return *o.CurrentScientificNameIsFormal
}

// GetCurrentScientificNameIsFormalOk returns a tuple with the CurrentScientificNameIsFormal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsTaxonomyNamesDescriptor) GetCurrentScientificNameIsFormalOk() (*bool, bool) {
	if o == nil || o.CurrentScientificNameIsFormal == nil {
		return nil, false
	}
	return o.CurrentScientificNameIsFormal, true
}

// HasCurrentScientificNameIsFormal returns a boolean if a field has been set.
func (o *V2reportsTaxonomyNamesDescriptor) HasCurrentScientificNameIsFormal() bool {
	if o != nil && o.CurrentScientificNameIsFormal != nil {
		return true
	}

	return false
}

// SetCurrentScientificNameIsFormal gets a reference to the given bool and assigns it to the CurrentScientificNameIsFormal field.
func (o *V2reportsTaxonomyNamesDescriptor) SetCurrentScientificNameIsFormal(v bool) {
	o.CurrentScientificNameIsFormal = &v
}

func (o V2reportsTaxonomyNamesDescriptor) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TaxId != nil {
		toSerialize["tax_id"] = o.TaxId
	}
	if o.Rank != nil {
		toSerialize["rank"] = o.Rank
	}
	if o.CurrentScientificName != nil {
		toSerialize["current_scientific_name"] = o.CurrentScientificName
	}
	if o.GroupName != nil {
		toSerialize["group_name"] = o.GroupName
	}
	if o.CuratorCommonName != nil {
		toSerialize["curator_common_name"] = o.CuratorCommonName
	}
	if o.OtherCommonNames != nil {
		toSerialize["other_common_names"] = o.OtherCommonNames
	}
	if o.GeneralNotes != nil {
		toSerialize["general_notes"] = o.GeneralNotes
	}
	if o.LinksFromType != nil {
		toSerialize["links_from_type"] = o.LinksFromType
	}
	if o.Citations != nil {
		toSerialize["citations"] = o.Citations
	}
	if o.CurrentScientificNameIsFormal != nil {
		toSerialize["current_scientific_name_is_formal"] = o.CurrentScientificNameIsFormal
	}
	return json.Marshal(toSerialize)
}

type NullableV2reportsTaxonomyNamesDescriptor struct {
	value *V2reportsTaxonomyNamesDescriptor
	isSet bool
}

func (v NullableV2reportsTaxonomyNamesDescriptor) Get() *V2reportsTaxonomyNamesDescriptor {
	return v.value
}

func (v *NullableV2reportsTaxonomyNamesDescriptor) Set(val *V2reportsTaxonomyNamesDescriptor) {
	v.value = val
	v.isSet = true
}

func (v NullableV2reportsTaxonomyNamesDescriptor) IsSet() bool {
	return v.isSet
}

func (v *NullableV2reportsTaxonomyNamesDescriptor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2reportsTaxonomyNamesDescriptor(val *V2reportsTaxonomyNamesDescriptor) *NullableV2reportsTaxonomyNamesDescriptor {
	return &NullableV2reportsTaxonomyNamesDescriptor{value: val, isSet: true}
}

func (v NullableV2reportsTaxonomyNamesDescriptor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2reportsTaxonomyNamesDescriptor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


