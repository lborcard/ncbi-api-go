/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ncbi-openapi-v2_goland

import (
	"encoding/json"
)

// V2MicroBiggeDatasetRequest struct for V2MicroBiggeDatasetRequest
type V2MicroBiggeDatasetRequest struct {
	OpaqueSolrQuery *string `json:"opaque_solr_query,omitempty"`
	Files []V2MicroBiggeDatasetRequestFileType `json:"files,omitempty"`
	ElementFlankConfig *V2ElementFlankConfig `json:"element_flank_config,omitempty"`
}

// NewV2MicroBiggeDatasetRequest instantiates a new V2MicroBiggeDatasetRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2MicroBiggeDatasetRequest() *V2MicroBiggeDatasetRequest {
	this := V2MicroBiggeDatasetRequest{}
	return &this
}

// NewV2MicroBiggeDatasetRequestWithDefaults instantiates a new V2MicroBiggeDatasetRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2MicroBiggeDatasetRequestWithDefaults() *V2MicroBiggeDatasetRequest {
	this := V2MicroBiggeDatasetRequest{}
	return &this
}

// GetOpaqueSolrQuery returns the OpaqueSolrQuery field value if set, zero value otherwise.
func (o *V2MicroBiggeDatasetRequest) GetOpaqueSolrQuery() string {
	if o == nil || o.OpaqueSolrQuery == nil {
		var ret string
		return ret
	}
	return *o.OpaqueSolrQuery
}

// GetOpaqueSolrQueryOk returns a tuple with the OpaqueSolrQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2MicroBiggeDatasetRequest) GetOpaqueSolrQueryOk() (*string, bool) {
	if o == nil || o.OpaqueSolrQuery == nil {
		return nil, false
	}
	return o.OpaqueSolrQuery, true
}

// HasOpaqueSolrQuery returns a boolean if a field has been set.
func (o *V2MicroBiggeDatasetRequest) HasOpaqueSolrQuery() bool {
	if o != nil && o.OpaqueSolrQuery != nil {
		return true
	}

	return false
}

// SetOpaqueSolrQuery gets a reference to the given string and assigns it to the OpaqueSolrQuery field.
func (o *V2MicroBiggeDatasetRequest) SetOpaqueSolrQuery(v string) {
	o.OpaqueSolrQuery = &v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *V2MicroBiggeDatasetRequest) GetFiles() []V2MicroBiggeDatasetRequestFileType {
	if o == nil || o.Files == nil {
		var ret []V2MicroBiggeDatasetRequestFileType
		return ret
	}
	return o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2MicroBiggeDatasetRequest) GetFilesOk() ([]V2MicroBiggeDatasetRequestFileType, bool) {
	if o == nil || o.Files == nil {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *V2MicroBiggeDatasetRequest) HasFiles() bool {
	if o != nil && o.Files != nil {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []V2MicroBiggeDatasetRequestFileType and assigns it to the Files field.
func (o *V2MicroBiggeDatasetRequest) SetFiles(v []V2MicroBiggeDatasetRequestFileType) {
	o.Files = v
}

// GetElementFlankConfig returns the ElementFlankConfig field value if set, zero value otherwise.
func (o *V2MicroBiggeDatasetRequest) GetElementFlankConfig() V2ElementFlankConfig {
	if o == nil || o.ElementFlankConfig == nil {
		var ret V2ElementFlankConfig
		return ret
	}
	return *o.ElementFlankConfig
}

// GetElementFlankConfigOk returns a tuple with the ElementFlankConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2MicroBiggeDatasetRequest) GetElementFlankConfigOk() (*V2ElementFlankConfig, bool) {
	if o == nil || o.ElementFlankConfig == nil {
		return nil, false
	}
	return o.ElementFlankConfig, true
}

// HasElementFlankConfig returns a boolean if a field has been set.
func (o *V2MicroBiggeDatasetRequest) HasElementFlankConfig() bool {
	if o != nil && o.ElementFlankConfig != nil {
		return true
	}

	return false
}

// SetElementFlankConfig gets a reference to the given V2ElementFlankConfig and assigns it to the ElementFlankConfig field.
func (o *V2MicroBiggeDatasetRequest) SetElementFlankConfig(v V2ElementFlankConfig) {
	o.ElementFlankConfig = &v
}

func (o V2MicroBiggeDatasetRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OpaqueSolrQuery != nil {
		toSerialize["opaque_solr_query"] = o.OpaqueSolrQuery
	}
	if o.Files != nil {
		toSerialize["files"] = o.Files
	}
	if o.ElementFlankConfig != nil {
		toSerialize["element_flank_config"] = o.ElementFlankConfig
	}
	return json.Marshal(toSerialize)
}

type NullableV2MicroBiggeDatasetRequest struct {
	value *V2MicroBiggeDatasetRequest
	isSet bool
}

func (v NullableV2MicroBiggeDatasetRequest) Get() *V2MicroBiggeDatasetRequest {
	return v.value
}

func (v *NullableV2MicroBiggeDatasetRequest) Set(val *V2MicroBiggeDatasetRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableV2MicroBiggeDatasetRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableV2MicroBiggeDatasetRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2MicroBiggeDatasetRequest(val *V2MicroBiggeDatasetRequest) *NullableV2MicroBiggeDatasetRequest {
	return &NullableV2MicroBiggeDatasetRequest{value: val, isSet: true}
}

func (v NullableV2MicroBiggeDatasetRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2MicroBiggeDatasetRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


