/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V2reportsAnnotation struct for V2reportsAnnotation
type V2reportsAnnotation struct {
	AssemblyAccession *string `json:"assembly_accession,omitempty"`
	AssemblyName *string `json:"assembly_name,omitempty"`
	AnnotationName *string `json:"annotation_name,omitempty"`
	AnnotationReleaseDate *string `json:"annotation_release_date,omitempty"`
	GenomicLocations []V2reportsGenomicLocation `json:"genomic_locations,omitempty"`
}

// NewV2reportsAnnotation instantiates a new V2reportsAnnotation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2reportsAnnotation() *V2reportsAnnotation {
	this := V2reportsAnnotation{}
	return &this
}

// NewV2reportsAnnotationWithDefaults instantiates a new V2reportsAnnotation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2reportsAnnotationWithDefaults() *V2reportsAnnotation {
	this := V2reportsAnnotation{}
	return &this
}

// GetAssemblyAccession returns the AssemblyAccession field value if set, zero value otherwise.
func (o *V2reportsAnnotation) GetAssemblyAccession() string {
	if o == nil || o.AssemblyAccession == nil {
		var ret string
		return ret
	}
	return *o.AssemblyAccession
}

// GetAssemblyAccessionOk returns a tuple with the AssemblyAccession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsAnnotation) GetAssemblyAccessionOk() (*string, bool) {
	if o == nil || o.AssemblyAccession == nil {
		return nil, false
	}
	return o.AssemblyAccession, true
}

// HasAssemblyAccession returns a boolean if a field has been set.
func (o *V2reportsAnnotation) HasAssemblyAccession() bool {
	if o != nil && o.AssemblyAccession != nil {
		return true
	}

	return false
}

// SetAssemblyAccession gets a reference to the given string and assigns it to the AssemblyAccession field.
func (o *V2reportsAnnotation) SetAssemblyAccession(v string) {
	o.AssemblyAccession = &v
}

// GetAssemblyName returns the AssemblyName field value if set, zero value otherwise.
func (o *V2reportsAnnotation) GetAssemblyName() string {
	if o == nil || o.AssemblyName == nil {
		var ret string
		return ret
	}
	return *o.AssemblyName
}

// GetAssemblyNameOk returns a tuple with the AssemblyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsAnnotation) GetAssemblyNameOk() (*string, bool) {
	if o == nil || o.AssemblyName == nil {
		return nil, false
	}
	return o.AssemblyName, true
}

// HasAssemblyName returns a boolean if a field has been set.
func (o *V2reportsAnnotation) HasAssemblyName() bool {
	if o != nil && o.AssemblyName != nil {
		return true
	}

	return false
}

// SetAssemblyName gets a reference to the given string and assigns it to the AssemblyName field.
func (o *V2reportsAnnotation) SetAssemblyName(v string) {
	o.AssemblyName = &v
}

// GetAnnotationName returns the AnnotationName field value if set, zero value otherwise.
func (o *V2reportsAnnotation) GetAnnotationName() string {
	if o == nil || o.AnnotationName == nil {
		var ret string
		return ret
	}
	return *o.AnnotationName
}

// GetAnnotationNameOk returns a tuple with the AnnotationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsAnnotation) GetAnnotationNameOk() (*string, bool) {
	if o == nil || o.AnnotationName == nil {
		return nil, false
	}
	return o.AnnotationName, true
}

// HasAnnotationName returns a boolean if a field has been set.
func (o *V2reportsAnnotation) HasAnnotationName() bool {
	if o != nil && o.AnnotationName != nil {
		return true
	}

	return false
}

// SetAnnotationName gets a reference to the given string and assigns it to the AnnotationName field.
func (o *V2reportsAnnotation) SetAnnotationName(v string) {
	o.AnnotationName = &v
}

// GetAnnotationReleaseDate returns the AnnotationReleaseDate field value if set, zero value otherwise.
func (o *V2reportsAnnotation) GetAnnotationReleaseDate() string {
	if o == nil || o.AnnotationReleaseDate == nil {
		var ret string
		return ret
	}
	return *o.AnnotationReleaseDate
}

// GetAnnotationReleaseDateOk returns a tuple with the AnnotationReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsAnnotation) GetAnnotationReleaseDateOk() (*string, bool) {
	if o == nil || o.AnnotationReleaseDate == nil {
		return nil, false
	}
	return o.AnnotationReleaseDate, true
}

// HasAnnotationReleaseDate returns a boolean if a field has been set.
func (o *V2reportsAnnotation) HasAnnotationReleaseDate() bool {
	if o != nil && o.AnnotationReleaseDate != nil {
		return true
	}

	return false
}

// SetAnnotationReleaseDate gets a reference to the given string and assigns it to the AnnotationReleaseDate field.
func (o *V2reportsAnnotation) SetAnnotationReleaseDate(v string) {
	o.AnnotationReleaseDate = &v
}

// GetGenomicLocations returns the GenomicLocations field value if set, zero value otherwise.
func (o *V2reportsAnnotation) GetGenomicLocations() []V2reportsGenomicLocation {
	if o == nil || o.GenomicLocations == nil {
		var ret []V2reportsGenomicLocation
		return ret
	}
	return o.GenomicLocations
}

// GetGenomicLocationsOk returns a tuple with the GenomicLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsAnnotation) GetGenomicLocationsOk() ([]V2reportsGenomicLocation, bool) {
	if o == nil || o.GenomicLocations == nil {
		return nil, false
	}
	return o.GenomicLocations, true
}

// HasGenomicLocations returns a boolean if a field has been set.
func (o *V2reportsAnnotation) HasGenomicLocations() bool {
	if o != nil && o.GenomicLocations != nil {
		return true
	}

	return false
}

// SetGenomicLocations gets a reference to the given []V2reportsGenomicLocation and assigns it to the GenomicLocations field.
func (o *V2reportsAnnotation) SetGenomicLocations(v []V2reportsGenomicLocation) {
	o.GenomicLocations = v
}

func (o V2reportsAnnotation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AssemblyAccession != nil {
		toSerialize["assembly_accession"] = o.AssemblyAccession
	}
	if o.AssemblyName != nil {
		toSerialize["assembly_name"] = o.AssemblyName
	}
	if o.AnnotationName != nil {
		toSerialize["annotation_name"] = o.AnnotationName
	}
	if o.AnnotationReleaseDate != nil {
		toSerialize["annotation_release_date"] = o.AnnotationReleaseDate
	}
	if o.GenomicLocations != nil {
		toSerialize["genomic_locations"] = o.GenomicLocations
	}
	return json.Marshal(toSerialize)
}

type NullableV2reportsAnnotation struct {
	value *V2reportsAnnotation
	isSet bool
}

func (v NullableV2reportsAnnotation) Get() *V2reportsAnnotation {
	return v.value
}

func (v *NullableV2reportsAnnotation) Set(val *V2reportsAnnotation) {
	v.value = val
	v.isSet = true
}

func (v NullableV2reportsAnnotation) IsSet() bool {
	return v.isSet
}

func (v *NullableV2reportsAnnotation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2reportsAnnotation(val *V2reportsAnnotation) *NullableV2reportsAnnotation {
	return &NullableV2reportsAnnotation{value: val, isSet: true}
}

func (v NullableV2reportsAnnotation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2reportsAnnotation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


