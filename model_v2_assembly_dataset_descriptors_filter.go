/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ncbi-openapi-v2_goland

import (
	"encoding/json"
	"time"
)

// V2AssemblyDatasetDescriptorsFilter struct for V2AssemblyDatasetDescriptorsFilter
type V2AssemblyDatasetDescriptorsFilter struct {
	ReferenceOnly *bool `json:"reference_only,omitempty"`
	AssemblySource *V2AssemblyDatasetDescriptorsFilterAssemblySource `json:"assembly_source,omitempty"`
	HasAnnotation *bool `json:"has_annotation,omitempty"`
	ExcludePairedReports *bool `json:"exclude_paired_reports,omitempty"`
	ExcludeAtypical *bool `json:"exclude_atypical,omitempty"`
	AssemblyVersion *V2AssemblyDatasetDescriptorsFilterAssemblyVersion `json:"assembly_version,omitempty"`
	AssemblyLevel []V2reportsAssemblyLevel `json:"assembly_level,omitempty"`
	FirstReleaseDate *time.Time `json:"first_release_date,omitempty"`
	LastReleaseDate *time.Time `json:"last_release_date,omitempty"`
	SearchText []string `json:"search_text,omitempty"`
	IsMetagenomeDerived *V2AssemblyDatasetDescriptorsFilterMetagenomeDerivedFilter `json:"is_metagenome_derived,omitempty"`
	IsTypeMaterial *bool `json:"is_type_material,omitempty"`
	IsIctvExemplar *bool `json:"is_ictv_exemplar,omitempty"`
	ExcludeMultiIsolate *bool `json:"exclude_multi_isolate,omitempty"`
	TypeMaterialCategory *V2AssemblyDatasetDescriptorsFilterTypeMaterialCategory `json:"type_material_category,omitempty"`
}

// NewV2AssemblyDatasetDescriptorsFilter instantiates a new V2AssemblyDatasetDescriptorsFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2AssemblyDatasetDescriptorsFilter() *V2AssemblyDatasetDescriptorsFilter {
	this := V2AssemblyDatasetDescriptorsFilter{}
	var assemblySource V2AssemblyDatasetDescriptorsFilterAssemblySource = V2ASSEMBLYDATASETDESCRIPTORSFILTERASSEMBLYSOURCE_ALL
	this.AssemblySource = &assemblySource
	var assemblyVersion V2AssemblyDatasetDescriptorsFilterAssemblyVersion = V2ASSEMBLYDATASETDESCRIPTORSFILTERASSEMBLYVERSION_CURRENT
	this.AssemblyVersion = &assemblyVersion
	var isMetagenomeDerived V2AssemblyDatasetDescriptorsFilterMetagenomeDerivedFilter = V2ASSEMBLYDATASETDESCRIPTORSFILTERMETAGENOMEDERIVEDFILTER_METAGENOME_DERIVED_UNSET
	this.IsMetagenomeDerived = &isMetagenomeDerived
	var typeMaterialCategory V2AssemblyDatasetDescriptorsFilterTypeMaterialCategory = V2ASSEMBLYDATASETDESCRIPTORSFILTERTYPEMATERIALCATEGORY_NONE
	this.TypeMaterialCategory = &typeMaterialCategory
	return &this
}

// NewV2AssemblyDatasetDescriptorsFilterWithDefaults instantiates a new V2AssemblyDatasetDescriptorsFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2AssemblyDatasetDescriptorsFilterWithDefaults() *V2AssemblyDatasetDescriptorsFilter {
	this := V2AssemblyDatasetDescriptorsFilter{}
	var assemblySource V2AssemblyDatasetDescriptorsFilterAssemblySource = V2ASSEMBLYDATASETDESCRIPTORSFILTERASSEMBLYSOURCE_ALL
	this.AssemblySource = &assemblySource
	var assemblyVersion V2AssemblyDatasetDescriptorsFilterAssemblyVersion = V2ASSEMBLYDATASETDESCRIPTORSFILTERASSEMBLYVERSION_CURRENT
	this.AssemblyVersion = &assemblyVersion
	var isMetagenomeDerived V2AssemblyDatasetDescriptorsFilterMetagenomeDerivedFilter = V2ASSEMBLYDATASETDESCRIPTORSFILTERMETAGENOMEDERIVEDFILTER_METAGENOME_DERIVED_UNSET
	this.IsMetagenomeDerived = &isMetagenomeDerived
	var typeMaterialCategory V2AssemblyDatasetDescriptorsFilterTypeMaterialCategory = V2ASSEMBLYDATASETDESCRIPTORSFILTERTYPEMATERIALCATEGORY_NONE
	this.TypeMaterialCategory = &typeMaterialCategory
	return &this
}

// GetReferenceOnly returns the ReferenceOnly field value if set, zero value otherwise.
func (o *V2AssemblyDatasetDescriptorsFilter) GetReferenceOnly() bool {
	if o == nil || o.ReferenceOnly == nil {
		var ret bool
		return ret
	}
	return *o.ReferenceOnly
}

// GetReferenceOnlyOk returns a tuple with the ReferenceOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AssemblyDatasetDescriptorsFilter) GetReferenceOnlyOk() (*bool, bool) {
	if o == nil || o.ReferenceOnly == nil {
		return nil, false
	}
	return o.ReferenceOnly, true
}

// HasReferenceOnly returns a boolean if a field has been set.
func (o *V2AssemblyDatasetDescriptorsFilter) HasReferenceOnly() bool {
	if o != nil && o.ReferenceOnly != nil {
		return true
	}

	return false
}

// SetReferenceOnly gets a reference to the given bool and assigns it to the ReferenceOnly field.
func (o *V2AssemblyDatasetDescriptorsFilter) SetReferenceOnly(v bool) {
	o.ReferenceOnly = &v
}

// GetAssemblySource returns the AssemblySource field value if set, zero value otherwise.
func (o *V2AssemblyDatasetDescriptorsFilter) GetAssemblySource() V2AssemblyDatasetDescriptorsFilterAssemblySource {
	if o == nil || o.AssemblySource == nil {
		var ret V2AssemblyDatasetDescriptorsFilterAssemblySource
		return ret
	}
	return *o.AssemblySource
}

// GetAssemblySourceOk returns a tuple with the AssemblySource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AssemblyDatasetDescriptorsFilter) GetAssemblySourceOk() (*V2AssemblyDatasetDescriptorsFilterAssemblySource, bool) {
	if o == nil || o.AssemblySource == nil {
		return nil, false
	}
	return o.AssemblySource, true
}

// HasAssemblySource returns a boolean if a field has been set.
func (o *V2AssemblyDatasetDescriptorsFilter) HasAssemblySource() bool {
	if o != nil && o.AssemblySource != nil {
		return true
	}

	return false
}

// SetAssemblySource gets a reference to the given V2AssemblyDatasetDescriptorsFilterAssemblySource and assigns it to the AssemblySource field.
func (o *V2AssemblyDatasetDescriptorsFilter) SetAssemblySource(v V2AssemblyDatasetDescriptorsFilterAssemblySource) {
	o.AssemblySource = &v
}

// GetHasAnnotation returns the HasAnnotation field value if set, zero value otherwise.
func (o *V2AssemblyDatasetDescriptorsFilter) GetHasAnnotation() bool {
	if o == nil || o.HasAnnotation == nil {
		var ret bool
		return ret
	}
	return *o.HasAnnotation
}

// GetHasAnnotationOk returns a tuple with the HasAnnotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AssemblyDatasetDescriptorsFilter) GetHasAnnotationOk() (*bool, bool) {
	if o == nil || o.HasAnnotation == nil {
		return nil, false
	}
	return o.HasAnnotation, true
}

// HasHasAnnotation returns a boolean if a field has been set.
func (o *V2AssemblyDatasetDescriptorsFilter) HasHasAnnotation() bool {
	if o != nil && o.HasAnnotation != nil {
		return true
	}

	return false
}

// SetHasAnnotation gets a reference to the given bool and assigns it to the HasAnnotation field.
func (o *V2AssemblyDatasetDescriptorsFilter) SetHasAnnotation(v bool) {
	o.HasAnnotation = &v
}

// GetExcludePairedReports returns the ExcludePairedReports field value if set, zero value otherwise.
func (o *V2AssemblyDatasetDescriptorsFilter) GetExcludePairedReports() bool {
	if o == nil || o.ExcludePairedReports == nil {
		var ret bool
		return ret
	}
	return *o.ExcludePairedReports
}

// GetExcludePairedReportsOk returns a tuple with the ExcludePairedReports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AssemblyDatasetDescriptorsFilter) GetExcludePairedReportsOk() (*bool, bool) {
	if o == nil || o.ExcludePairedReports == nil {
		return nil, false
	}
	return o.ExcludePairedReports, true
}

// HasExcludePairedReports returns a boolean if a field has been set.
func (o *V2AssemblyDatasetDescriptorsFilter) HasExcludePairedReports() bool {
	if o != nil && o.ExcludePairedReports != nil {
		return true
	}

	return false
}

// SetExcludePairedReports gets a reference to the given bool and assigns it to the ExcludePairedReports field.
func (o *V2AssemblyDatasetDescriptorsFilter) SetExcludePairedReports(v bool) {
	o.ExcludePairedReports = &v
}

// GetExcludeAtypical returns the ExcludeAtypical field value if set, zero value otherwise.
func (o *V2AssemblyDatasetDescriptorsFilter) GetExcludeAtypical() bool {
	if o == nil || o.ExcludeAtypical == nil {
		var ret bool
		return ret
	}
	return *o.ExcludeAtypical
}

// GetExcludeAtypicalOk returns a tuple with the ExcludeAtypical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AssemblyDatasetDescriptorsFilter) GetExcludeAtypicalOk() (*bool, bool) {
	if o == nil || o.ExcludeAtypical == nil {
		return nil, false
	}
	return o.ExcludeAtypical, true
}

// HasExcludeAtypical returns a boolean if a field has been set.
func (o *V2AssemblyDatasetDescriptorsFilter) HasExcludeAtypical() bool {
	if o != nil && o.ExcludeAtypical != nil {
		return true
	}

	return false
}

// SetExcludeAtypical gets a reference to the given bool and assigns it to the ExcludeAtypical field.
func (o *V2AssemblyDatasetDescriptorsFilter) SetExcludeAtypical(v bool) {
	o.ExcludeAtypical = &v
}

// GetAssemblyVersion returns the AssemblyVersion field value if set, zero value otherwise.
func (o *V2AssemblyDatasetDescriptorsFilter) GetAssemblyVersion() V2AssemblyDatasetDescriptorsFilterAssemblyVersion {
	if o == nil || o.AssemblyVersion == nil {
		var ret V2AssemblyDatasetDescriptorsFilterAssemblyVersion
		return ret
	}
	return *o.AssemblyVersion
}

// GetAssemblyVersionOk returns a tuple with the AssemblyVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AssemblyDatasetDescriptorsFilter) GetAssemblyVersionOk() (*V2AssemblyDatasetDescriptorsFilterAssemblyVersion, bool) {
	if o == nil || o.AssemblyVersion == nil {
		return nil, false
	}
	return o.AssemblyVersion, true
}

// HasAssemblyVersion returns a boolean if a field has been set.
func (o *V2AssemblyDatasetDescriptorsFilter) HasAssemblyVersion() bool {
	if o != nil && o.AssemblyVersion != nil {
		return true
	}

	return false
}

// SetAssemblyVersion gets a reference to the given V2AssemblyDatasetDescriptorsFilterAssemblyVersion and assigns it to the AssemblyVersion field.
func (o *V2AssemblyDatasetDescriptorsFilter) SetAssemblyVersion(v V2AssemblyDatasetDescriptorsFilterAssemblyVersion) {
	o.AssemblyVersion = &v
}

// GetAssemblyLevel returns the AssemblyLevel field value if set, zero value otherwise.
func (o *V2AssemblyDatasetDescriptorsFilter) GetAssemblyLevel() []V2reportsAssemblyLevel {
	if o == nil || o.AssemblyLevel == nil {
		var ret []V2reportsAssemblyLevel
		return ret
	}
	return o.AssemblyLevel
}

// GetAssemblyLevelOk returns a tuple with the AssemblyLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AssemblyDatasetDescriptorsFilter) GetAssemblyLevelOk() ([]V2reportsAssemblyLevel, bool) {
	if o == nil || o.AssemblyLevel == nil {
		return nil, false
	}
	return o.AssemblyLevel, true
}

// HasAssemblyLevel returns a boolean if a field has been set.
func (o *V2AssemblyDatasetDescriptorsFilter) HasAssemblyLevel() bool {
	if o != nil && o.AssemblyLevel != nil {
		return true
	}

	return false
}

// SetAssemblyLevel gets a reference to the given []V2reportsAssemblyLevel and assigns it to the AssemblyLevel field.
func (o *V2AssemblyDatasetDescriptorsFilter) SetAssemblyLevel(v []V2reportsAssemblyLevel) {
	o.AssemblyLevel = v
}

// GetFirstReleaseDate returns the FirstReleaseDate field value if set, zero value otherwise.
func (o *V2AssemblyDatasetDescriptorsFilter) GetFirstReleaseDate() time.Time {
	if o == nil || o.FirstReleaseDate == nil {
		var ret time.Time
		return ret
	}
	return *o.FirstReleaseDate
}

// GetFirstReleaseDateOk returns a tuple with the FirstReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AssemblyDatasetDescriptorsFilter) GetFirstReleaseDateOk() (*time.Time, bool) {
	if o == nil || o.FirstReleaseDate == nil {
		return nil, false
	}
	return o.FirstReleaseDate, true
}

// HasFirstReleaseDate returns a boolean if a field has been set.
func (o *V2AssemblyDatasetDescriptorsFilter) HasFirstReleaseDate() bool {
	if o != nil && o.FirstReleaseDate != nil {
		return true
	}

	return false
}

// SetFirstReleaseDate gets a reference to the given time.Time and assigns it to the FirstReleaseDate field.
func (o *V2AssemblyDatasetDescriptorsFilter) SetFirstReleaseDate(v time.Time) {
	o.FirstReleaseDate = &v
}

// GetLastReleaseDate returns the LastReleaseDate field value if set, zero value otherwise.
func (o *V2AssemblyDatasetDescriptorsFilter) GetLastReleaseDate() time.Time {
	if o == nil || o.LastReleaseDate == nil {
		var ret time.Time
		return ret
	}
	return *o.LastReleaseDate
}

// GetLastReleaseDateOk returns a tuple with the LastReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AssemblyDatasetDescriptorsFilter) GetLastReleaseDateOk() (*time.Time, bool) {
	if o == nil || o.LastReleaseDate == nil {
		return nil, false
	}
	return o.LastReleaseDate, true
}

// HasLastReleaseDate returns a boolean if a field has been set.
func (o *V2AssemblyDatasetDescriptorsFilter) HasLastReleaseDate() bool {
	if o != nil && o.LastReleaseDate != nil {
		return true
	}

	return false
}

// SetLastReleaseDate gets a reference to the given time.Time and assigns it to the LastReleaseDate field.
func (o *V2AssemblyDatasetDescriptorsFilter) SetLastReleaseDate(v time.Time) {
	o.LastReleaseDate = &v
}

// GetSearchText returns the SearchText field value if set, zero value otherwise.
func (o *V2AssemblyDatasetDescriptorsFilter) GetSearchText() []string {
	if o == nil || o.SearchText == nil {
		var ret []string
		return ret
	}
	return o.SearchText
}

// GetSearchTextOk returns a tuple with the SearchText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AssemblyDatasetDescriptorsFilter) GetSearchTextOk() ([]string, bool) {
	if o == nil || o.SearchText == nil {
		return nil, false
	}
	return o.SearchText, true
}

// HasSearchText returns a boolean if a field has been set.
func (o *V2AssemblyDatasetDescriptorsFilter) HasSearchText() bool {
	if o != nil && o.SearchText != nil {
		return true
	}

	return false
}

// SetSearchText gets a reference to the given []string and assigns it to the SearchText field.
func (o *V2AssemblyDatasetDescriptorsFilter) SetSearchText(v []string) {
	o.SearchText = v
}

// GetIsMetagenomeDerived returns the IsMetagenomeDerived field value if set, zero value otherwise.
func (o *V2AssemblyDatasetDescriptorsFilter) GetIsMetagenomeDerived() V2AssemblyDatasetDescriptorsFilterMetagenomeDerivedFilter {
	if o == nil || o.IsMetagenomeDerived == nil {
		var ret V2AssemblyDatasetDescriptorsFilterMetagenomeDerivedFilter
		return ret
	}
	return *o.IsMetagenomeDerived
}

// GetIsMetagenomeDerivedOk returns a tuple with the IsMetagenomeDerived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AssemblyDatasetDescriptorsFilter) GetIsMetagenomeDerivedOk() (*V2AssemblyDatasetDescriptorsFilterMetagenomeDerivedFilter, bool) {
	if o == nil || o.IsMetagenomeDerived == nil {
		return nil, false
	}
	return o.IsMetagenomeDerived, true
}

// HasIsMetagenomeDerived returns a boolean if a field has been set.
func (o *V2AssemblyDatasetDescriptorsFilter) HasIsMetagenomeDerived() bool {
	if o != nil && o.IsMetagenomeDerived != nil {
		return true
	}

	return false
}

// SetIsMetagenomeDerived gets a reference to the given V2AssemblyDatasetDescriptorsFilterMetagenomeDerivedFilter and assigns it to the IsMetagenomeDerived field.
func (o *V2AssemblyDatasetDescriptorsFilter) SetIsMetagenomeDerived(v V2AssemblyDatasetDescriptorsFilterMetagenomeDerivedFilter) {
	o.IsMetagenomeDerived = &v
}

// GetIsTypeMaterial returns the IsTypeMaterial field value if set, zero value otherwise.
func (o *V2AssemblyDatasetDescriptorsFilter) GetIsTypeMaterial() bool {
	if o == nil || o.IsTypeMaterial == nil {
		var ret bool
		return ret
	}
	return *o.IsTypeMaterial
}

// GetIsTypeMaterialOk returns a tuple with the IsTypeMaterial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AssemblyDatasetDescriptorsFilter) GetIsTypeMaterialOk() (*bool, bool) {
	if o == nil || o.IsTypeMaterial == nil {
		return nil, false
	}
	return o.IsTypeMaterial, true
}

// HasIsTypeMaterial returns a boolean if a field has been set.
func (o *V2AssemblyDatasetDescriptorsFilter) HasIsTypeMaterial() bool {
	if o != nil && o.IsTypeMaterial != nil {
		return true
	}

	return false
}

// SetIsTypeMaterial gets a reference to the given bool and assigns it to the IsTypeMaterial field.
func (o *V2AssemblyDatasetDescriptorsFilter) SetIsTypeMaterial(v bool) {
	o.IsTypeMaterial = &v
}

// GetIsIctvExemplar returns the IsIctvExemplar field value if set, zero value otherwise.
func (o *V2AssemblyDatasetDescriptorsFilter) GetIsIctvExemplar() bool {
	if o == nil || o.IsIctvExemplar == nil {
		var ret bool
		return ret
	}
	return *o.IsIctvExemplar
}

// GetIsIctvExemplarOk returns a tuple with the IsIctvExemplar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AssemblyDatasetDescriptorsFilter) GetIsIctvExemplarOk() (*bool, bool) {
	if o == nil || o.IsIctvExemplar == nil {
		return nil, false
	}
	return o.IsIctvExemplar, true
}

// HasIsIctvExemplar returns a boolean if a field has been set.
func (o *V2AssemblyDatasetDescriptorsFilter) HasIsIctvExemplar() bool {
	if o != nil && o.IsIctvExemplar != nil {
		return true
	}

	return false
}

// SetIsIctvExemplar gets a reference to the given bool and assigns it to the IsIctvExemplar field.
func (o *V2AssemblyDatasetDescriptorsFilter) SetIsIctvExemplar(v bool) {
	o.IsIctvExemplar = &v
}

// GetExcludeMultiIsolate returns the ExcludeMultiIsolate field value if set, zero value otherwise.
func (o *V2AssemblyDatasetDescriptorsFilter) GetExcludeMultiIsolate() bool {
	if o == nil || o.ExcludeMultiIsolate == nil {
		var ret bool
		return ret
	}
	return *o.ExcludeMultiIsolate
}

// GetExcludeMultiIsolateOk returns a tuple with the ExcludeMultiIsolate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AssemblyDatasetDescriptorsFilter) GetExcludeMultiIsolateOk() (*bool, bool) {
	if o == nil || o.ExcludeMultiIsolate == nil {
		return nil, false
	}
	return o.ExcludeMultiIsolate, true
}

// HasExcludeMultiIsolate returns a boolean if a field has been set.
func (o *V2AssemblyDatasetDescriptorsFilter) HasExcludeMultiIsolate() bool {
	if o != nil && o.ExcludeMultiIsolate != nil {
		return true
	}

	return false
}

// SetExcludeMultiIsolate gets a reference to the given bool and assigns it to the ExcludeMultiIsolate field.
func (o *V2AssemblyDatasetDescriptorsFilter) SetExcludeMultiIsolate(v bool) {
	o.ExcludeMultiIsolate = &v
}

// GetTypeMaterialCategory returns the TypeMaterialCategory field value if set, zero value otherwise.
func (o *V2AssemblyDatasetDescriptorsFilter) GetTypeMaterialCategory() V2AssemblyDatasetDescriptorsFilterTypeMaterialCategory {
	if o == nil || o.TypeMaterialCategory == nil {
		var ret V2AssemblyDatasetDescriptorsFilterTypeMaterialCategory
		return ret
	}
	return *o.TypeMaterialCategory
}

// GetTypeMaterialCategoryOk returns a tuple with the TypeMaterialCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AssemblyDatasetDescriptorsFilter) GetTypeMaterialCategoryOk() (*V2AssemblyDatasetDescriptorsFilterTypeMaterialCategory, bool) {
	if o == nil || o.TypeMaterialCategory == nil {
		return nil, false
	}
	return o.TypeMaterialCategory, true
}

// HasTypeMaterialCategory returns a boolean if a field has been set.
func (o *V2AssemblyDatasetDescriptorsFilter) HasTypeMaterialCategory() bool {
	if o != nil && o.TypeMaterialCategory != nil {
		return true
	}

	return false
}

// SetTypeMaterialCategory gets a reference to the given V2AssemblyDatasetDescriptorsFilterTypeMaterialCategory and assigns it to the TypeMaterialCategory field.
func (o *V2AssemblyDatasetDescriptorsFilter) SetTypeMaterialCategory(v V2AssemblyDatasetDescriptorsFilterTypeMaterialCategory) {
	o.TypeMaterialCategory = &v
}

func (o V2AssemblyDatasetDescriptorsFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ReferenceOnly != nil {
		toSerialize["reference_only"] = o.ReferenceOnly
	}
	if o.AssemblySource != nil {
		toSerialize["assembly_source"] = o.AssemblySource
	}
	if o.HasAnnotation != nil {
		toSerialize["has_annotation"] = o.HasAnnotation
	}
	if o.ExcludePairedReports != nil {
		toSerialize["exclude_paired_reports"] = o.ExcludePairedReports
	}
	if o.ExcludeAtypical != nil {
		toSerialize["exclude_atypical"] = o.ExcludeAtypical
	}
	if o.AssemblyVersion != nil {
		toSerialize["assembly_version"] = o.AssemblyVersion
	}
	if o.AssemblyLevel != nil {
		toSerialize["assembly_level"] = o.AssemblyLevel
	}
	if o.FirstReleaseDate != nil {
		toSerialize["first_release_date"] = o.FirstReleaseDate
	}
	if o.LastReleaseDate != nil {
		toSerialize["last_release_date"] = o.LastReleaseDate
	}
	if o.SearchText != nil {
		toSerialize["search_text"] = o.SearchText
	}
	if o.IsMetagenomeDerived != nil {
		toSerialize["is_metagenome_derived"] = o.IsMetagenomeDerived
	}
	if o.IsTypeMaterial != nil {
		toSerialize["is_type_material"] = o.IsTypeMaterial
	}
	if o.IsIctvExemplar != nil {
		toSerialize["is_ictv_exemplar"] = o.IsIctvExemplar
	}
	if o.ExcludeMultiIsolate != nil {
		toSerialize["exclude_multi_isolate"] = o.ExcludeMultiIsolate
	}
	if o.TypeMaterialCategory != nil {
		toSerialize["type_material_category"] = o.TypeMaterialCategory
	}
	return json.Marshal(toSerialize)
}

type NullableV2AssemblyDatasetDescriptorsFilter struct {
	value *V2AssemblyDatasetDescriptorsFilter
	isSet bool
}

func (v NullableV2AssemblyDatasetDescriptorsFilter) Get() *V2AssemblyDatasetDescriptorsFilter {
	return v.value
}

func (v *NullableV2AssemblyDatasetDescriptorsFilter) Set(val *V2AssemblyDatasetDescriptorsFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableV2AssemblyDatasetDescriptorsFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableV2AssemblyDatasetDescriptorsFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2AssemblyDatasetDescriptorsFilter(val *V2AssemblyDatasetDescriptorsFilter) *NullableV2AssemblyDatasetDescriptorsFilter {
	return &NullableV2AssemblyDatasetDescriptorsFilter{value: val, isSet: true}
}

func (v NullableV2AssemblyDatasetDescriptorsFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2AssemblyDatasetDescriptorsFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


