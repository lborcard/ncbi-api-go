/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ncbi-openapi-v2_goland

import (
	"encoding/json"
)

// V2reportsGenomeAnnotationReportMatch struct for V2reportsGenomeAnnotationReportMatch
type V2reportsGenomeAnnotationReportMatch struct {
	Annotation *V2reportsGenomeAnnotation `json:"annotation,omitempty"`
	Query []string `json:"query,omitempty"`
	Warning *V2reportsWarning `json:"warning,omitempty"`
	Errors []V2reportsError `json:"errors,omitempty"`
	RowId *string `json:"row_id,omitempty"`
}

// NewV2reportsGenomeAnnotationReportMatch instantiates a new V2reportsGenomeAnnotationReportMatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2reportsGenomeAnnotationReportMatch() *V2reportsGenomeAnnotationReportMatch {
	this := V2reportsGenomeAnnotationReportMatch{}
	return &this
}

// NewV2reportsGenomeAnnotationReportMatchWithDefaults instantiates a new V2reportsGenomeAnnotationReportMatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2reportsGenomeAnnotationReportMatchWithDefaults() *V2reportsGenomeAnnotationReportMatch {
	this := V2reportsGenomeAnnotationReportMatch{}
	return &this
}

// GetAnnotation returns the Annotation field value if set, zero value otherwise.
func (o *V2reportsGenomeAnnotationReportMatch) GetAnnotation() V2reportsGenomeAnnotation {
	if o == nil || o.Annotation == nil {
		var ret V2reportsGenomeAnnotation
		return ret
	}
	return *o.Annotation
}

// GetAnnotationOk returns a tuple with the Annotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsGenomeAnnotationReportMatch) GetAnnotationOk() (*V2reportsGenomeAnnotation, bool) {
	if o == nil || o.Annotation == nil {
		return nil, false
	}
	return o.Annotation, true
}

// HasAnnotation returns a boolean if a field has been set.
func (o *V2reportsGenomeAnnotationReportMatch) HasAnnotation() bool {
	if o != nil && o.Annotation != nil {
		return true
	}

	return false
}

// SetAnnotation gets a reference to the given V2reportsGenomeAnnotation and assigns it to the Annotation field.
func (o *V2reportsGenomeAnnotationReportMatch) SetAnnotation(v V2reportsGenomeAnnotation) {
	o.Annotation = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *V2reportsGenomeAnnotationReportMatch) GetQuery() []string {
	if o == nil || o.Query == nil {
		var ret []string
		return ret
	}
	return o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsGenomeAnnotationReportMatch) GetQueryOk() ([]string, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *V2reportsGenomeAnnotationReportMatch) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given []string and assigns it to the Query field.
func (o *V2reportsGenomeAnnotationReportMatch) SetQuery(v []string) {
	o.Query = v
}

// GetWarning returns the Warning field value if set, zero value otherwise.
func (o *V2reportsGenomeAnnotationReportMatch) GetWarning() V2reportsWarning {
	if o == nil || o.Warning == nil {
		var ret V2reportsWarning
		return ret
	}
	return *o.Warning
}

// GetWarningOk returns a tuple with the Warning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsGenomeAnnotationReportMatch) GetWarningOk() (*V2reportsWarning, bool) {
	if o == nil || o.Warning == nil {
		return nil, false
	}
	return o.Warning, true
}

// HasWarning returns a boolean if a field has been set.
func (o *V2reportsGenomeAnnotationReportMatch) HasWarning() bool {
	if o != nil && o.Warning != nil {
		return true
	}

	return false
}

// SetWarning gets a reference to the given V2reportsWarning and assigns it to the Warning field.
func (o *V2reportsGenomeAnnotationReportMatch) SetWarning(v V2reportsWarning) {
	o.Warning = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *V2reportsGenomeAnnotationReportMatch) GetErrors() []V2reportsError {
	if o == nil || o.Errors == nil {
		var ret []V2reportsError
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsGenomeAnnotationReportMatch) GetErrorsOk() ([]V2reportsError, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *V2reportsGenomeAnnotationReportMatch) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []V2reportsError and assigns it to the Errors field.
func (o *V2reportsGenomeAnnotationReportMatch) SetErrors(v []V2reportsError) {
	o.Errors = v
}

// GetRowId returns the RowId field value if set, zero value otherwise.
func (o *V2reportsGenomeAnnotationReportMatch) GetRowId() string {
	if o == nil || o.RowId == nil {
		var ret string
		return ret
	}
	return *o.RowId
}

// GetRowIdOk returns a tuple with the RowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsGenomeAnnotationReportMatch) GetRowIdOk() (*string, bool) {
	if o == nil || o.RowId == nil {
		return nil, false
	}
	return o.RowId, true
}

// HasRowId returns a boolean if a field has been set.
func (o *V2reportsGenomeAnnotationReportMatch) HasRowId() bool {
	if o != nil && o.RowId != nil {
		return true
	}

	return false
}

// SetRowId gets a reference to the given string and assigns it to the RowId field.
func (o *V2reportsGenomeAnnotationReportMatch) SetRowId(v string) {
	o.RowId = &v
}

func (o V2reportsGenomeAnnotationReportMatch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Annotation != nil {
		toSerialize["annotation"] = o.Annotation
	}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	if o.Warning != nil {
		toSerialize["warning"] = o.Warning
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	if o.RowId != nil {
		toSerialize["row_id"] = o.RowId
	}
	return json.Marshal(toSerialize)
}

type NullableV2reportsGenomeAnnotationReportMatch struct {
	value *V2reportsGenomeAnnotationReportMatch
	isSet bool
}

func (v NullableV2reportsGenomeAnnotationReportMatch) Get() *V2reportsGenomeAnnotationReportMatch {
	return v.value
}

func (v *NullableV2reportsGenomeAnnotationReportMatch) Set(val *V2reportsGenomeAnnotationReportMatch) {
	v.value = val
	v.isSet = true
}

func (v NullableV2reportsGenomeAnnotationReportMatch) IsSet() bool {
	return v.isSet
}

func (v *NullableV2reportsGenomeAnnotationReportMatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2reportsGenomeAnnotationReportMatch(val *V2reportsGenomeAnnotationReportMatch) *NullableV2reportsGenomeAnnotationReportMatch {
	return &NullableV2reportsGenomeAnnotationReportMatch{value: val, isSet: true}
}

func (v NullableV2reportsGenomeAnnotationReportMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2reportsGenomeAnnotationReportMatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


