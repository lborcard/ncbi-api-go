/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V2reportsGeneCounts struct for V2reportsGeneCounts
type V2reportsGeneCounts struct {
	Total *int32 `json:"total,omitempty"`
	ProteinCoding *int32 `json:"protein_coding,omitempty"`
	NonCoding *int32 `json:"non_coding,omitempty"`
	Pseudogene *int32 `json:"pseudogene,omitempty"`
	Other *int32 `json:"other,omitempty"`
}

// NewV2reportsGeneCounts instantiates a new V2reportsGeneCounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2reportsGeneCounts() *V2reportsGeneCounts {
	this := V2reportsGeneCounts{}
	return &this
}

// NewV2reportsGeneCountsWithDefaults instantiates a new V2reportsGeneCounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2reportsGeneCountsWithDefaults() *V2reportsGeneCounts {
	this := V2reportsGeneCounts{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *V2reportsGeneCounts) GetTotal() int32 {
	if o == nil || o.Total == nil {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsGeneCounts) GetTotalOk() (*int32, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *V2reportsGeneCounts) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *V2reportsGeneCounts) SetTotal(v int32) {
	o.Total = &v
}

// GetProteinCoding returns the ProteinCoding field value if set, zero value otherwise.
func (o *V2reportsGeneCounts) GetProteinCoding() int32 {
	if o == nil || o.ProteinCoding == nil {
		var ret int32
		return ret
	}
	return *o.ProteinCoding
}

// GetProteinCodingOk returns a tuple with the ProteinCoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsGeneCounts) GetProteinCodingOk() (*int32, bool) {
	if o == nil || o.ProteinCoding == nil {
		return nil, false
	}
	return o.ProteinCoding, true
}

// HasProteinCoding returns a boolean if a field has been set.
func (o *V2reportsGeneCounts) HasProteinCoding() bool {
	if o != nil && o.ProteinCoding != nil {
		return true
	}

	return false
}

// SetProteinCoding gets a reference to the given int32 and assigns it to the ProteinCoding field.
func (o *V2reportsGeneCounts) SetProteinCoding(v int32) {
	o.ProteinCoding = &v
}

// GetNonCoding returns the NonCoding field value if set, zero value otherwise.
func (o *V2reportsGeneCounts) GetNonCoding() int32 {
	if o == nil || o.NonCoding == nil {
		var ret int32
		return ret
	}
	return *o.NonCoding
}

// GetNonCodingOk returns a tuple with the NonCoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsGeneCounts) GetNonCodingOk() (*int32, bool) {
	if o == nil || o.NonCoding == nil {
		return nil, false
	}
	return o.NonCoding, true
}

// HasNonCoding returns a boolean if a field has been set.
func (o *V2reportsGeneCounts) HasNonCoding() bool {
	if o != nil && o.NonCoding != nil {
		return true
	}

	return false
}

// SetNonCoding gets a reference to the given int32 and assigns it to the NonCoding field.
func (o *V2reportsGeneCounts) SetNonCoding(v int32) {
	o.NonCoding = &v
}

// GetPseudogene returns the Pseudogene field value if set, zero value otherwise.
func (o *V2reportsGeneCounts) GetPseudogene() int32 {
	if o == nil || o.Pseudogene == nil {
		var ret int32
		return ret
	}
	return *o.Pseudogene
}

// GetPseudogeneOk returns a tuple with the Pseudogene field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsGeneCounts) GetPseudogeneOk() (*int32, bool) {
	if o == nil || o.Pseudogene == nil {
		return nil, false
	}
	return o.Pseudogene, true
}

// HasPseudogene returns a boolean if a field has been set.
func (o *V2reportsGeneCounts) HasPseudogene() bool {
	if o != nil && o.Pseudogene != nil {
		return true
	}

	return false
}

// SetPseudogene gets a reference to the given int32 and assigns it to the Pseudogene field.
func (o *V2reportsGeneCounts) SetPseudogene(v int32) {
	o.Pseudogene = &v
}

// GetOther returns the Other field value if set, zero value otherwise.
func (o *V2reportsGeneCounts) GetOther() int32 {
	if o == nil || o.Other == nil {
		var ret int32
		return ret
	}
	return *o.Other
}

// GetOtherOk returns a tuple with the Other field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsGeneCounts) GetOtherOk() (*int32, bool) {
	if o == nil || o.Other == nil {
		return nil, false
	}
	return o.Other, true
}

// HasOther returns a boolean if a field has been set.
func (o *V2reportsGeneCounts) HasOther() bool {
	if o != nil && o.Other != nil {
		return true
	}

	return false
}

// SetOther gets a reference to the given int32 and assigns it to the Other field.
func (o *V2reportsGeneCounts) SetOther(v int32) {
	o.Other = &v
}

func (o V2reportsGeneCounts) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}
	if o.ProteinCoding != nil {
		toSerialize["protein_coding"] = o.ProteinCoding
	}
	if o.NonCoding != nil {
		toSerialize["non_coding"] = o.NonCoding
	}
	if o.Pseudogene != nil {
		toSerialize["pseudogene"] = o.Pseudogene
	}
	if o.Other != nil {
		toSerialize["other"] = o.Other
	}
	return json.Marshal(toSerialize)
}

type NullableV2reportsGeneCounts struct {
	value *V2reportsGeneCounts
	isSet bool
}

func (v NullableV2reportsGeneCounts) Get() *V2reportsGeneCounts {
	return v.value
}

func (v *NullableV2reportsGeneCounts) Set(val *V2reportsGeneCounts) {
	v.value = val
	v.isSet = true
}

func (v NullableV2reportsGeneCounts) IsSet() bool {
	return v.isSet
}

func (v *NullableV2reportsGeneCounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2reportsGeneCounts(val *V2reportsGeneCounts) *NullableV2reportsGeneCounts {
	return &NullableV2reportsGeneCounts{value: val, isSet: true}
}

func (v NullableV2reportsGeneCounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2reportsGeneCounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


