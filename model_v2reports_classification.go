/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ncbi-openapi-v2_goland

import (
	"encoding/json"
)

// V2reportsClassification struct for V2reportsClassification
type V2reportsClassification struct {
	Superkingdom *V2reportsTaxData `json:"superkingdom,omitempty"`
	Kingdom *V2reportsTaxData `json:"kingdom,omitempty"`
	Phylum *V2reportsTaxData `json:"phylum,omitempty"`
	Class *V2reportsTaxData `json:"class,omitempty"`
	Order *V2reportsTaxData `json:"order,omitempty"`
	Family *V2reportsTaxData `json:"family,omitempty"`
	Genus *V2reportsTaxData `json:"genus,omitempty"`
	Species *V2reportsTaxData `json:"species,omitempty"`
}

// NewV2reportsClassification instantiates a new V2reportsClassification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2reportsClassification() *V2reportsClassification {
	this := V2reportsClassification{}
	return &this
}

// NewV2reportsClassificationWithDefaults instantiates a new V2reportsClassification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2reportsClassificationWithDefaults() *V2reportsClassification {
	this := V2reportsClassification{}
	return &this
}

// GetSuperkingdom returns the Superkingdom field value if set, zero value otherwise.
func (o *V2reportsClassification) GetSuperkingdom() V2reportsTaxData {
	if o == nil || o.Superkingdom == nil {
		var ret V2reportsTaxData
		return ret
	}
	return *o.Superkingdom
}

// GetSuperkingdomOk returns a tuple with the Superkingdom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsClassification) GetSuperkingdomOk() (*V2reportsTaxData, bool) {
	if o == nil || o.Superkingdom == nil {
		return nil, false
	}
	return o.Superkingdom, true
}

// HasSuperkingdom returns a boolean if a field has been set.
func (o *V2reportsClassification) HasSuperkingdom() bool {
	if o != nil && o.Superkingdom != nil {
		return true
	}

	return false
}

// SetSuperkingdom gets a reference to the given V2reportsTaxData and assigns it to the Superkingdom field.
func (o *V2reportsClassification) SetSuperkingdom(v V2reportsTaxData) {
	o.Superkingdom = &v
}

// GetKingdom returns the Kingdom field value if set, zero value otherwise.
func (o *V2reportsClassification) GetKingdom() V2reportsTaxData {
	if o == nil || o.Kingdom == nil {
		var ret V2reportsTaxData
		return ret
	}
	return *o.Kingdom
}

// GetKingdomOk returns a tuple with the Kingdom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsClassification) GetKingdomOk() (*V2reportsTaxData, bool) {
	if o == nil || o.Kingdom == nil {
		return nil, false
	}
	return o.Kingdom, true
}

// HasKingdom returns a boolean if a field has been set.
func (o *V2reportsClassification) HasKingdom() bool {
	if o != nil && o.Kingdom != nil {
		return true
	}

	return false
}

// SetKingdom gets a reference to the given V2reportsTaxData and assigns it to the Kingdom field.
func (o *V2reportsClassification) SetKingdom(v V2reportsTaxData) {
	o.Kingdom = &v
}

// GetPhylum returns the Phylum field value if set, zero value otherwise.
func (o *V2reportsClassification) GetPhylum() V2reportsTaxData {
	if o == nil || o.Phylum == nil {
		var ret V2reportsTaxData
		return ret
	}
	return *o.Phylum
}

// GetPhylumOk returns a tuple with the Phylum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsClassification) GetPhylumOk() (*V2reportsTaxData, bool) {
	if o == nil || o.Phylum == nil {
		return nil, false
	}
	return o.Phylum, true
}

// HasPhylum returns a boolean if a field has been set.
func (o *V2reportsClassification) HasPhylum() bool {
	if o != nil && o.Phylum != nil {
		return true
	}

	return false
}

// SetPhylum gets a reference to the given V2reportsTaxData and assigns it to the Phylum field.
func (o *V2reportsClassification) SetPhylum(v V2reportsTaxData) {
	o.Phylum = &v
}

// GetClass returns the Class field value if set, zero value otherwise.
func (o *V2reportsClassification) GetClass() V2reportsTaxData {
	if o == nil || o.Class == nil {
		var ret V2reportsTaxData
		return ret
	}
	return *o.Class
}

// GetClassOk returns a tuple with the Class field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsClassification) GetClassOk() (*V2reportsTaxData, bool) {
	if o == nil || o.Class == nil {
		return nil, false
	}
	return o.Class, true
}

// HasClass returns a boolean if a field has been set.
func (o *V2reportsClassification) HasClass() bool {
	if o != nil && o.Class != nil {
		return true
	}

	return false
}

// SetClass gets a reference to the given V2reportsTaxData and assigns it to the Class field.
func (o *V2reportsClassification) SetClass(v V2reportsTaxData) {
	o.Class = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *V2reportsClassification) GetOrder() V2reportsTaxData {
	if o == nil || o.Order == nil {
		var ret V2reportsTaxData
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsClassification) GetOrderOk() (*V2reportsTaxData, bool) {
	if o == nil || o.Order == nil {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *V2reportsClassification) HasOrder() bool {
	if o != nil && o.Order != nil {
		return true
	}

	return false
}

// SetOrder gets a reference to the given V2reportsTaxData and assigns it to the Order field.
func (o *V2reportsClassification) SetOrder(v V2reportsTaxData) {
	o.Order = &v
}

// GetFamily returns the Family field value if set, zero value otherwise.
func (o *V2reportsClassification) GetFamily() V2reportsTaxData {
	if o == nil || o.Family == nil {
		var ret V2reportsTaxData
		return ret
	}
	return *o.Family
}

// GetFamilyOk returns a tuple with the Family field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsClassification) GetFamilyOk() (*V2reportsTaxData, bool) {
	if o == nil || o.Family == nil {
		return nil, false
	}
	return o.Family, true
}

// HasFamily returns a boolean if a field has been set.
func (o *V2reportsClassification) HasFamily() bool {
	if o != nil && o.Family != nil {
		return true
	}

	return false
}

// SetFamily gets a reference to the given V2reportsTaxData and assigns it to the Family field.
func (o *V2reportsClassification) SetFamily(v V2reportsTaxData) {
	o.Family = &v
}

// GetGenus returns the Genus field value if set, zero value otherwise.
func (o *V2reportsClassification) GetGenus() V2reportsTaxData {
	if o == nil || o.Genus == nil {
		var ret V2reportsTaxData
		return ret
	}
	return *o.Genus
}

// GetGenusOk returns a tuple with the Genus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsClassification) GetGenusOk() (*V2reportsTaxData, bool) {
	if o == nil || o.Genus == nil {
		return nil, false
	}
	return o.Genus, true
}

// HasGenus returns a boolean if a field has been set.
func (o *V2reportsClassification) HasGenus() bool {
	if o != nil && o.Genus != nil {
		return true
	}

	return false
}

// SetGenus gets a reference to the given V2reportsTaxData and assigns it to the Genus field.
func (o *V2reportsClassification) SetGenus(v V2reportsTaxData) {
	o.Genus = &v
}

// GetSpecies returns the Species field value if set, zero value otherwise.
func (o *V2reportsClassification) GetSpecies() V2reportsTaxData {
	if o == nil || o.Species == nil {
		var ret V2reportsTaxData
		return ret
	}
	return *o.Species
}

// GetSpeciesOk returns a tuple with the Species field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsClassification) GetSpeciesOk() (*V2reportsTaxData, bool) {
	if o == nil || o.Species == nil {
		return nil, false
	}
	return o.Species, true
}

// HasSpecies returns a boolean if a field has been set.
func (o *V2reportsClassification) HasSpecies() bool {
	if o != nil && o.Species != nil {
		return true
	}

	return false
}

// SetSpecies gets a reference to the given V2reportsTaxData and assigns it to the Species field.
func (o *V2reportsClassification) SetSpecies(v V2reportsTaxData) {
	o.Species = &v
}

func (o V2reportsClassification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Superkingdom != nil {
		toSerialize["superkingdom"] = o.Superkingdom
	}
	if o.Kingdom != nil {
		toSerialize["kingdom"] = o.Kingdom
	}
	if o.Phylum != nil {
		toSerialize["phylum"] = o.Phylum
	}
	if o.Class != nil {
		toSerialize["class"] = o.Class
	}
	if o.Order != nil {
		toSerialize["order"] = o.Order
	}
	if o.Family != nil {
		toSerialize["family"] = o.Family
	}
	if o.Genus != nil {
		toSerialize["genus"] = o.Genus
	}
	if o.Species != nil {
		toSerialize["species"] = o.Species
	}
	return json.Marshal(toSerialize)
}

type NullableV2reportsClassification struct {
	value *V2reportsClassification
	isSet bool
}

func (v NullableV2reportsClassification) Get() *V2reportsClassification {
	return v.value
}

func (v *NullableV2reportsClassification) Set(val *V2reportsClassification) {
	v.value = val
	v.isSet = true
}

func (v NullableV2reportsClassification) IsSet() bool {
	return v.isSet
}

func (v *NullableV2reportsClassification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2reportsClassification(val *V2reportsClassification) *NullableV2reportsClassification {
	return &NullableV2reportsClassification{value: val, isSet: true}
}

func (v NullableV2reportsClassification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2reportsClassification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


