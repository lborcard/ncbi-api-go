/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ncbi-openapi-v2_goland

import (
	"encoding/json"
)

// V2SciNameAndIdsSciNameAndId struct for V2SciNameAndIdsSciNameAndId
type V2SciNameAndIdsSciNameAndId struct {
	SciName *string `json:"sci_name,omitempty"`
	TaxId *string `json:"tax_id,omitempty"`
	CommonName *string `json:"common_name,omitempty"`
	MatchedTerm *string `json:"matched_term,omitempty"`
	Rank *V2reportsRankType `json:"rank,omitempty"`
	GroupName *string `json:"group_name,omitempty"`
}

// NewV2SciNameAndIdsSciNameAndId instantiates a new V2SciNameAndIdsSciNameAndId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2SciNameAndIdsSciNameAndId() *V2SciNameAndIdsSciNameAndId {
	this := V2SciNameAndIdsSciNameAndId{}
	var rank V2reportsRankType = V2REPORTSRANKTYPE_NO_RANK
	this.Rank = &rank
	return &this
}

// NewV2SciNameAndIdsSciNameAndIdWithDefaults instantiates a new V2SciNameAndIdsSciNameAndId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2SciNameAndIdsSciNameAndIdWithDefaults() *V2SciNameAndIdsSciNameAndId {
	this := V2SciNameAndIdsSciNameAndId{}
	var rank V2reportsRankType = V2REPORTSRANKTYPE_NO_RANK
	this.Rank = &rank
	return &this
}

// GetSciName returns the SciName field value if set, zero value otherwise.
func (o *V2SciNameAndIdsSciNameAndId) GetSciName() string {
	if o == nil || o.SciName == nil {
		var ret string
		return ret
	}
	return *o.SciName
}

// GetSciNameOk returns a tuple with the SciName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2SciNameAndIdsSciNameAndId) GetSciNameOk() (*string, bool) {
	if o == nil || o.SciName == nil {
		return nil, false
	}
	return o.SciName, true
}

// HasSciName returns a boolean if a field has been set.
func (o *V2SciNameAndIdsSciNameAndId) HasSciName() bool {
	if o != nil && o.SciName != nil {
		return true
	}

	return false
}

// SetSciName gets a reference to the given string and assigns it to the SciName field.
func (o *V2SciNameAndIdsSciNameAndId) SetSciName(v string) {
	o.SciName = &v
}

// GetTaxId returns the TaxId field value if set, zero value otherwise.
func (o *V2SciNameAndIdsSciNameAndId) GetTaxId() string {
	if o == nil || o.TaxId == nil {
		var ret string
		return ret
	}
	return *o.TaxId
}

// GetTaxIdOk returns a tuple with the TaxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2SciNameAndIdsSciNameAndId) GetTaxIdOk() (*string, bool) {
	if o == nil || o.TaxId == nil {
		return nil, false
	}
	return o.TaxId, true
}

// HasTaxId returns a boolean if a field has been set.
func (o *V2SciNameAndIdsSciNameAndId) HasTaxId() bool {
	if o != nil && o.TaxId != nil {
		return true
	}

	return false
}

// SetTaxId gets a reference to the given string and assigns it to the TaxId field.
func (o *V2SciNameAndIdsSciNameAndId) SetTaxId(v string) {
	o.TaxId = &v
}

// GetCommonName returns the CommonName field value if set, zero value otherwise.
func (o *V2SciNameAndIdsSciNameAndId) GetCommonName() string {
	if o == nil || o.CommonName == nil {
		var ret string
		return ret
	}
	return *o.CommonName
}

// GetCommonNameOk returns a tuple with the CommonName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2SciNameAndIdsSciNameAndId) GetCommonNameOk() (*string, bool) {
	if o == nil || o.CommonName == nil {
		return nil, false
	}
	return o.CommonName, true
}

// HasCommonName returns a boolean if a field has been set.
func (o *V2SciNameAndIdsSciNameAndId) HasCommonName() bool {
	if o != nil && o.CommonName != nil {
		return true
	}

	return false
}

// SetCommonName gets a reference to the given string and assigns it to the CommonName field.
func (o *V2SciNameAndIdsSciNameAndId) SetCommonName(v string) {
	o.CommonName = &v
}

// GetMatchedTerm returns the MatchedTerm field value if set, zero value otherwise.
func (o *V2SciNameAndIdsSciNameAndId) GetMatchedTerm() string {
	if o == nil || o.MatchedTerm == nil {
		var ret string
		return ret
	}
	return *o.MatchedTerm
}

// GetMatchedTermOk returns a tuple with the MatchedTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2SciNameAndIdsSciNameAndId) GetMatchedTermOk() (*string, bool) {
	if o == nil || o.MatchedTerm == nil {
		return nil, false
	}
	return o.MatchedTerm, true
}

// HasMatchedTerm returns a boolean if a field has been set.
func (o *V2SciNameAndIdsSciNameAndId) HasMatchedTerm() bool {
	if o != nil && o.MatchedTerm != nil {
		return true
	}

	return false
}

// SetMatchedTerm gets a reference to the given string and assigns it to the MatchedTerm field.
func (o *V2SciNameAndIdsSciNameAndId) SetMatchedTerm(v string) {
	o.MatchedTerm = &v
}

// GetRank returns the Rank field value if set, zero value otherwise.
func (o *V2SciNameAndIdsSciNameAndId) GetRank() V2reportsRankType {
	if o == nil || o.Rank == nil {
		var ret V2reportsRankType
		return ret
	}
	return *o.Rank
}

// GetRankOk returns a tuple with the Rank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2SciNameAndIdsSciNameAndId) GetRankOk() (*V2reportsRankType, bool) {
	if o == nil || o.Rank == nil {
		return nil, false
	}
	return o.Rank, true
}

// HasRank returns a boolean if a field has been set.
func (o *V2SciNameAndIdsSciNameAndId) HasRank() bool {
	if o != nil && o.Rank != nil {
		return true
	}

	return false
}

// SetRank gets a reference to the given V2reportsRankType and assigns it to the Rank field.
func (o *V2SciNameAndIdsSciNameAndId) SetRank(v V2reportsRankType) {
	o.Rank = &v
}

// GetGroupName returns the GroupName field value if set, zero value otherwise.
func (o *V2SciNameAndIdsSciNameAndId) GetGroupName() string {
	if o == nil || o.GroupName == nil {
		var ret string
		return ret
	}
	return *o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2SciNameAndIdsSciNameAndId) GetGroupNameOk() (*string, bool) {
	if o == nil || o.GroupName == nil {
		return nil, false
	}
	return o.GroupName, true
}

// HasGroupName returns a boolean if a field has been set.
func (o *V2SciNameAndIdsSciNameAndId) HasGroupName() bool {
	if o != nil && o.GroupName != nil {
		return true
	}

	return false
}

// SetGroupName gets a reference to the given string and assigns it to the GroupName field.
func (o *V2SciNameAndIdsSciNameAndId) SetGroupName(v string) {
	o.GroupName = &v
}

func (o V2SciNameAndIdsSciNameAndId) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SciName != nil {
		toSerialize["sci_name"] = o.SciName
	}
	if o.TaxId != nil {
		toSerialize["tax_id"] = o.TaxId
	}
	if o.CommonName != nil {
		toSerialize["common_name"] = o.CommonName
	}
	if o.MatchedTerm != nil {
		toSerialize["matched_term"] = o.MatchedTerm
	}
	if o.Rank != nil {
		toSerialize["rank"] = o.Rank
	}
	if o.GroupName != nil {
		toSerialize["group_name"] = o.GroupName
	}
	return json.Marshal(toSerialize)
}

type NullableV2SciNameAndIdsSciNameAndId struct {
	value *V2SciNameAndIdsSciNameAndId
	isSet bool
}

func (v NullableV2SciNameAndIdsSciNameAndId) Get() *V2SciNameAndIdsSciNameAndId {
	return v.value
}

func (v *NullableV2SciNameAndIdsSciNameAndId) Set(val *V2SciNameAndIdsSciNameAndId) {
	v.value = val
	v.isSet = true
}

func (v NullableV2SciNameAndIdsSciNameAndId) IsSet() bool {
	return v.isSet
}

func (v *NullableV2SciNameAndIdsSciNameAndId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2SciNameAndIdsSciNameAndId(val *V2SciNameAndIdsSciNameAndId) *NullableV2SciNameAndIdsSciNameAndId {
	return &NullableV2SciNameAndIdsSciNameAndId{value: val, isSet: true}
}

func (v NullableV2SciNameAndIdsSciNameAndId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2SciNameAndIdsSciNameAndId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


