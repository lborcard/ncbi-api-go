/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V2OrganelleDownloadRequest struct for V2OrganelleDownloadRequest
type V2OrganelleDownloadRequest struct {
	Accessions []string `json:"accessions,omitempty"`
	ExcludeSequence *bool `json:"exclude_sequence,omitempty"`
	IncludeAnnotationType []V2AnnotationForOrganelleType `json:"include_annotation_type,omitempty"`
}

// NewV2OrganelleDownloadRequest instantiates a new V2OrganelleDownloadRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2OrganelleDownloadRequest() *V2OrganelleDownloadRequest {
	this := V2OrganelleDownloadRequest{}
	return &this
}

// NewV2OrganelleDownloadRequestWithDefaults instantiates a new V2OrganelleDownloadRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2OrganelleDownloadRequestWithDefaults() *V2OrganelleDownloadRequest {
	this := V2OrganelleDownloadRequest{}
	return &this
}

// GetAccessions returns the Accessions field value if set, zero value otherwise.
func (o *V2OrganelleDownloadRequest) GetAccessions() []string {
	if o == nil || o.Accessions == nil {
		var ret []string
		return ret
	}
	return o.Accessions
}

// GetAccessionsOk returns a tuple with the Accessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2OrganelleDownloadRequest) GetAccessionsOk() ([]string, bool) {
	if o == nil || o.Accessions == nil {
		return nil, false
	}
	return o.Accessions, true
}

// HasAccessions returns a boolean if a field has been set.
func (o *V2OrganelleDownloadRequest) HasAccessions() bool {
	if o != nil && o.Accessions != nil {
		return true
	}

	return false
}

// SetAccessions gets a reference to the given []string and assigns it to the Accessions field.
func (o *V2OrganelleDownloadRequest) SetAccessions(v []string) {
	o.Accessions = v
}

// GetExcludeSequence returns the ExcludeSequence field value if set, zero value otherwise.
func (o *V2OrganelleDownloadRequest) GetExcludeSequence() bool {
	if o == nil || o.ExcludeSequence == nil {
		var ret bool
		return ret
	}
	return *o.ExcludeSequence
}

// GetExcludeSequenceOk returns a tuple with the ExcludeSequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2OrganelleDownloadRequest) GetExcludeSequenceOk() (*bool, bool) {
	if o == nil || o.ExcludeSequence == nil {
		return nil, false
	}
	return o.ExcludeSequence, true
}

// HasExcludeSequence returns a boolean if a field has been set.
func (o *V2OrganelleDownloadRequest) HasExcludeSequence() bool {
	if o != nil && o.ExcludeSequence != nil {
		return true
	}

	return false
}

// SetExcludeSequence gets a reference to the given bool and assigns it to the ExcludeSequence field.
func (o *V2OrganelleDownloadRequest) SetExcludeSequence(v bool) {
	o.ExcludeSequence = &v
}

// GetIncludeAnnotationType returns the IncludeAnnotationType field value if set, zero value otherwise.
func (o *V2OrganelleDownloadRequest) GetIncludeAnnotationType() []V2AnnotationForOrganelleType {
	if o == nil || o.IncludeAnnotationType == nil {
		var ret []V2AnnotationForOrganelleType
		return ret
	}
	return o.IncludeAnnotationType
}

// GetIncludeAnnotationTypeOk returns a tuple with the IncludeAnnotationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2OrganelleDownloadRequest) GetIncludeAnnotationTypeOk() ([]V2AnnotationForOrganelleType, bool) {
	if o == nil || o.IncludeAnnotationType == nil {
		return nil, false
	}
	return o.IncludeAnnotationType, true
}

// HasIncludeAnnotationType returns a boolean if a field has been set.
func (o *V2OrganelleDownloadRequest) HasIncludeAnnotationType() bool {
	if o != nil && o.IncludeAnnotationType != nil {
		return true
	}

	return false
}

// SetIncludeAnnotationType gets a reference to the given []V2AnnotationForOrganelleType and assigns it to the IncludeAnnotationType field.
func (o *V2OrganelleDownloadRequest) SetIncludeAnnotationType(v []V2AnnotationForOrganelleType) {
	o.IncludeAnnotationType = v
}

func (o V2OrganelleDownloadRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Accessions != nil {
		toSerialize["accessions"] = o.Accessions
	}
	if o.ExcludeSequence != nil {
		toSerialize["exclude_sequence"] = o.ExcludeSequence
	}
	if o.IncludeAnnotationType != nil {
		toSerialize["include_annotation_type"] = o.IncludeAnnotationType
	}
	return json.Marshal(toSerialize)
}

type NullableV2OrganelleDownloadRequest struct {
	value *V2OrganelleDownloadRequest
	isSet bool
}

func (v NullableV2OrganelleDownloadRequest) Get() *V2OrganelleDownloadRequest {
	return v.value
}

func (v *NullableV2OrganelleDownloadRequest) Set(val *V2OrganelleDownloadRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableV2OrganelleDownloadRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableV2OrganelleDownloadRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2OrganelleDownloadRequest(val *V2OrganelleDownloadRequest) *NullableV2OrganelleDownloadRequest {
	return &NullableV2OrganelleDownloadRequest{value: val, isSet: true}
}

func (v NullableV2OrganelleDownloadRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2OrganelleDownloadRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


