/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V2reportsNameAndAuthorityNote struct for V2reportsNameAndAuthorityNote
type V2reportsNameAndAuthorityNote struct {
	Name *string `json:"name,omitempty"`
	Note *string `json:"note,omitempty"`
	NoteClassifier *V2reportsNameAndAuthorityNoteClassifier `json:"note_classifier,omitempty"`
}

// NewV2reportsNameAndAuthorityNote instantiates a new V2reportsNameAndAuthorityNote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2reportsNameAndAuthorityNote() *V2reportsNameAndAuthorityNote {
	this := V2reportsNameAndAuthorityNote{}
	var noteClassifier V2reportsNameAndAuthorityNoteClassifier = V2REPORTSNAMEANDAUTHORITYNOTECLASSIFIER_NO_AUTHORITY_CLASSIFIER
	this.NoteClassifier = &noteClassifier
	return &this
}

// NewV2reportsNameAndAuthorityNoteWithDefaults instantiates a new V2reportsNameAndAuthorityNote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2reportsNameAndAuthorityNoteWithDefaults() *V2reportsNameAndAuthorityNote {
	this := V2reportsNameAndAuthorityNote{}
	var noteClassifier V2reportsNameAndAuthorityNoteClassifier = V2REPORTSNAMEANDAUTHORITYNOTECLASSIFIER_NO_AUTHORITY_CLASSIFIER
	this.NoteClassifier = &noteClassifier
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V2reportsNameAndAuthorityNote) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsNameAndAuthorityNote) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V2reportsNameAndAuthorityNote) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V2reportsNameAndAuthorityNote) SetName(v string) {
	o.Name = &v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *V2reportsNameAndAuthorityNote) GetNote() string {
	if o == nil || o.Note == nil {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsNameAndAuthorityNote) GetNoteOk() (*string, bool) {
	if o == nil || o.Note == nil {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *V2reportsNameAndAuthorityNote) HasNote() bool {
	if o != nil && o.Note != nil {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *V2reportsNameAndAuthorityNote) SetNote(v string) {
	o.Note = &v
}

// GetNoteClassifier returns the NoteClassifier field value if set, zero value otherwise.
func (o *V2reportsNameAndAuthorityNote) GetNoteClassifier() V2reportsNameAndAuthorityNoteClassifier {
	if o == nil || o.NoteClassifier == nil {
		var ret V2reportsNameAndAuthorityNoteClassifier
		return ret
	}
	return *o.NoteClassifier
}

// GetNoteClassifierOk returns a tuple with the NoteClassifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsNameAndAuthorityNote) GetNoteClassifierOk() (*V2reportsNameAndAuthorityNoteClassifier, bool) {
	if o == nil || o.NoteClassifier == nil {
		return nil, false
	}
	return o.NoteClassifier, true
}

// HasNoteClassifier returns a boolean if a field has been set.
func (o *V2reportsNameAndAuthorityNote) HasNoteClassifier() bool {
	if o != nil && o.NoteClassifier != nil {
		return true
	}

	return false
}

// SetNoteClassifier gets a reference to the given V2reportsNameAndAuthorityNoteClassifier and assigns it to the NoteClassifier field.
func (o *V2reportsNameAndAuthorityNote) SetNoteClassifier(v V2reportsNameAndAuthorityNoteClassifier) {
	o.NoteClassifier = &v
}

func (o V2reportsNameAndAuthorityNote) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Note != nil {
		toSerialize["note"] = o.Note
	}
	if o.NoteClassifier != nil {
		toSerialize["note_classifier"] = o.NoteClassifier
	}
	return json.Marshal(toSerialize)
}

type NullableV2reportsNameAndAuthorityNote struct {
	value *V2reportsNameAndAuthorityNote
	isSet bool
}

func (v NullableV2reportsNameAndAuthorityNote) Get() *V2reportsNameAndAuthorityNote {
	return v.value
}

func (v *NullableV2reportsNameAndAuthorityNote) Set(val *V2reportsNameAndAuthorityNote) {
	v.value = val
	v.isSet = true
}

func (v NullableV2reportsNameAndAuthorityNote) IsSet() bool {
	return v.isSet
}

func (v *NullableV2reportsNameAndAuthorityNote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2reportsNameAndAuthorityNote(val *V2reportsNameAndAuthorityNote) *NullableV2reportsNameAndAuthorityNote {
	return &NullableV2reportsNameAndAuthorityNote{value: val, isSet: true}
}

func (v NullableV2reportsNameAndAuthorityNote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2reportsNameAndAuthorityNote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


