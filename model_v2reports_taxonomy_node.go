/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ncbi-openapi-v2_goland

import (
	"encoding/json"
)

// V2reportsTaxonomyNode struct for V2reportsTaxonomyNode
type V2reportsTaxonomyNode struct {
	TaxId *int32 `json:"tax_id,omitempty"`
	Rank *V2reportsRankType `json:"rank,omitempty"`
	CurrentScientificName *V2reportsNameAndAuthority `json:"current_scientific_name,omitempty"`
	Basionym *V2reportsNameAndAuthority `json:"basionym,omitempty"`
	CuratorCommonName *string `json:"curator_common_name,omitempty"`
	GroupName *string `json:"group_name,omitempty"`
	HasTypeMaterial *bool `json:"has_type_material,omitempty"`
	Classification *V2reportsClassification `json:"classification,omitempty"`
	Parents []int32 `json:"parents,omitempty"`
	Children []int32 `json:"children,omitempty"`
	Counts []V2reportsTaxonomyNodeCountByType `json:"counts,omitempty"`
	GenomicMoltype *string `json:"genomic_moltype,omitempty"`
}

// NewV2reportsTaxonomyNode instantiates a new V2reportsTaxonomyNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2reportsTaxonomyNode() *V2reportsTaxonomyNode {
	this := V2reportsTaxonomyNode{}
	var rank V2reportsRankType = V2REPORTSRANKTYPE_NO_RANK
	this.Rank = &rank
	return &this
}

// NewV2reportsTaxonomyNodeWithDefaults instantiates a new V2reportsTaxonomyNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2reportsTaxonomyNodeWithDefaults() *V2reportsTaxonomyNode {
	this := V2reportsTaxonomyNode{}
	var rank V2reportsRankType = V2REPORTSRANKTYPE_NO_RANK
	this.Rank = &rank
	return &this
}

// GetTaxId returns the TaxId field value if set, zero value otherwise.
func (o *V2reportsTaxonomyNode) GetTaxId() int32 {
	if o == nil || o.TaxId == nil {
		var ret int32
		return ret
	}
	return *o.TaxId
}

// GetTaxIdOk returns a tuple with the TaxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsTaxonomyNode) GetTaxIdOk() (*int32, bool) {
	if o == nil || o.TaxId == nil {
		return nil, false
	}
	return o.TaxId, true
}

// HasTaxId returns a boolean if a field has been set.
func (o *V2reportsTaxonomyNode) HasTaxId() bool {
	if o != nil && o.TaxId != nil {
		return true
	}

	return false
}

// SetTaxId gets a reference to the given int32 and assigns it to the TaxId field.
func (o *V2reportsTaxonomyNode) SetTaxId(v int32) {
	o.TaxId = &v
}

// GetRank returns the Rank field value if set, zero value otherwise.
func (o *V2reportsTaxonomyNode) GetRank() V2reportsRankType {
	if o == nil || o.Rank == nil {
		var ret V2reportsRankType
		return ret
	}
	return *o.Rank
}

// GetRankOk returns a tuple with the Rank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsTaxonomyNode) GetRankOk() (*V2reportsRankType, bool) {
	if o == nil || o.Rank == nil {
		return nil, false
	}
	return o.Rank, true
}

// HasRank returns a boolean if a field has been set.
func (o *V2reportsTaxonomyNode) HasRank() bool {
	if o != nil && o.Rank != nil {
		return true
	}

	return false
}

// SetRank gets a reference to the given V2reportsRankType and assigns it to the Rank field.
func (o *V2reportsTaxonomyNode) SetRank(v V2reportsRankType) {
	o.Rank = &v
}

// GetCurrentScientificName returns the CurrentScientificName field value if set, zero value otherwise.
func (o *V2reportsTaxonomyNode) GetCurrentScientificName() V2reportsNameAndAuthority {
	if o == nil || o.CurrentScientificName == nil {
		var ret V2reportsNameAndAuthority
		return ret
	}
	return *o.CurrentScientificName
}

// GetCurrentScientificNameOk returns a tuple with the CurrentScientificName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsTaxonomyNode) GetCurrentScientificNameOk() (*V2reportsNameAndAuthority, bool) {
	if o == nil || o.CurrentScientificName == nil {
		return nil, false
	}
	return o.CurrentScientificName, true
}

// HasCurrentScientificName returns a boolean if a field has been set.
func (o *V2reportsTaxonomyNode) HasCurrentScientificName() bool {
	if o != nil && o.CurrentScientificName != nil {
		return true
	}

	return false
}

// SetCurrentScientificName gets a reference to the given V2reportsNameAndAuthority and assigns it to the CurrentScientificName field.
func (o *V2reportsTaxonomyNode) SetCurrentScientificName(v V2reportsNameAndAuthority) {
	o.CurrentScientificName = &v
}

// GetBasionym returns the Basionym field value if set, zero value otherwise.
func (o *V2reportsTaxonomyNode) GetBasionym() V2reportsNameAndAuthority {
	if o == nil || o.Basionym == nil {
		var ret V2reportsNameAndAuthority
		return ret
	}
	return *o.Basionym
}

// GetBasionymOk returns a tuple with the Basionym field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsTaxonomyNode) GetBasionymOk() (*V2reportsNameAndAuthority, bool) {
	if o == nil || o.Basionym == nil {
		return nil, false
	}
	return o.Basionym, true
}

// HasBasionym returns a boolean if a field has been set.
func (o *V2reportsTaxonomyNode) HasBasionym() bool {
	if o != nil && o.Basionym != nil {
		return true
	}

	return false
}

// SetBasionym gets a reference to the given V2reportsNameAndAuthority and assigns it to the Basionym field.
func (o *V2reportsTaxonomyNode) SetBasionym(v V2reportsNameAndAuthority) {
	o.Basionym = &v
}

// GetCuratorCommonName returns the CuratorCommonName field value if set, zero value otherwise.
func (o *V2reportsTaxonomyNode) GetCuratorCommonName() string {
	if o == nil || o.CuratorCommonName == nil {
		var ret string
		return ret
	}
	return *o.CuratorCommonName
}

// GetCuratorCommonNameOk returns a tuple with the CuratorCommonName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsTaxonomyNode) GetCuratorCommonNameOk() (*string, bool) {
	if o == nil || o.CuratorCommonName == nil {
		return nil, false
	}
	return o.CuratorCommonName, true
}

// HasCuratorCommonName returns a boolean if a field has been set.
func (o *V2reportsTaxonomyNode) HasCuratorCommonName() bool {
	if o != nil && o.CuratorCommonName != nil {
		return true
	}

	return false
}

// SetCuratorCommonName gets a reference to the given string and assigns it to the CuratorCommonName field.
func (o *V2reportsTaxonomyNode) SetCuratorCommonName(v string) {
	o.CuratorCommonName = &v
}

// GetGroupName returns the GroupName field value if set, zero value otherwise.
func (o *V2reportsTaxonomyNode) GetGroupName() string {
	if o == nil || o.GroupName == nil {
		var ret string
		return ret
	}
	return *o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsTaxonomyNode) GetGroupNameOk() (*string, bool) {
	if o == nil || o.GroupName == nil {
		return nil, false
	}
	return o.GroupName, true
}

// HasGroupName returns a boolean if a field has been set.
func (o *V2reportsTaxonomyNode) HasGroupName() bool {
	if o != nil && o.GroupName != nil {
		return true
	}

	return false
}

// SetGroupName gets a reference to the given string and assigns it to the GroupName field.
func (o *V2reportsTaxonomyNode) SetGroupName(v string) {
	o.GroupName = &v
}

// GetHasTypeMaterial returns the HasTypeMaterial field value if set, zero value otherwise.
func (o *V2reportsTaxonomyNode) GetHasTypeMaterial() bool {
	if o == nil || o.HasTypeMaterial == nil {
		var ret bool
		return ret
	}
	return *o.HasTypeMaterial
}

// GetHasTypeMaterialOk returns a tuple with the HasTypeMaterial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsTaxonomyNode) GetHasTypeMaterialOk() (*bool, bool) {
	if o == nil || o.HasTypeMaterial == nil {
		return nil, false
	}
	return o.HasTypeMaterial, true
}

// HasHasTypeMaterial returns a boolean if a field has been set.
func (o *V2reportsTaxonomyNode) HasHasTypeMaterial() bool {
	if o != nil && o.HasTypeMaterial != nil {
		return true
	}

	return false
}

// SetHasTypeMaterial gets a reference to the given bool and assigns it to the HasTypeMaterial field.
func (o *V2reportsTaxonomyNode) SetHasTypeMaterial(v bool) {
	o.HasTypeMaterial = &v
}

// GetClassification returns the Classification field value if set, zero value otherwise.
func (o *V2reportsTaxonomyNode) GetClassification() V2reportsClassification {
	if o == nil || o.Classification == nil {
		var ret V2reportsClassification
		return ret
	}
	return *o.Classification
}

// GetClassificationOk returns a tuple with the Classification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsTaxonomyNode) GetClassificationOk() (*V2reportsClassification, bool) {
	if o == nil || o.Classification == nil {
		return nil, false
	}
	return o.Classification, true
}

// HasClassification returns a boolean if a field has been set.
func (o *V2reportsTaxonomyNode) HasClassification() bool {
	if o != nil && o.Classification != nil {
		return true
	}

	return false
}

// SetClassification gets a reference to the given V2reportsClassification and assigns it to the Classification field.
func (o *V2reportsTaxonomyNode) SetClassification(v V2reportsClassification) {
	o.Classification = &v
}

// GetParents returns the Parents field value if set, zero value otherwise.
func (o *V2reportsTaxonomyNode) GetParents() []int32 {
	if o == nil || o.Parents == nil {
		var ret []int32
		return ret
	}
	return o.Parents
}

// GetParentsOk returns a tuple with the Parents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsTaxonomyNode) GetParentsOk() ([]int32, bool) {
	if o == nil || o.Parents == nil {
		return nil, false
	}
	return o.Parents, true
}

// HasParents returns a boolean if a field has been set.
func (o *V2reportsTaxonomyNode) HasParents() bool {
	if o != nil && o.Parents != nil {
		return true
	}

	return false
}

// SetParents gets a reference to the given []int32 and assigns it to the Parents field.
func (o *V2reportsTaxonomyNode) SetParents(v []int32) {
	o.Parents = v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *V2reportsTaxonomyNode) GetChildren() []int32 {
	if o == nil || o.Children == nil {
		var ret []int32
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsTaxonomyNode) GetChildrenOk() ([]int32, bool) {
	if o == nil || o.Children == nil {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *V2reportsTaxonomyNode) HasChildren() bool {
	if o != nil && o.Children != nil {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []int32 and assigns it to the Children field.
func (o *V2reportsTaxonomyNode) SetChildren(v []int32) {
	o.Children = v
}

// GetCounts returns the Counts field value if set, zero value otherwise.
func (o *V2reportsTaxonomyNode) GetCounts() []V2reportsTaxonomyNodeCountByType {
	if o == nil || o.Counts == nil {
		var ret []V2reportsTaxonomyNodeCountByType
		return ret
	}
	return o.Counts
}

// GetCountsOk returns a tuple with the Counts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsTaxonomyNode) GetCountsOk() ([]V2reportsTaxonomyNodeCountByType, bool) {
	if o == nil || o.Counts == nil {
		return nil, false
	}
	return o.Counts, true
}

// HasCounts returns a boolean if a field has been set.
func (o *V2reportsTaxonomyNode) HasCounts() bool {
	if o != nil && o.Counts != nil {
		return true
	}

	return false
}

// SetCounts gets a reference to the given []V2reportsTaxonomyNodeCountByType and assigns it to the Counts field.
func (o *V2reportsTaxonomyNode) SetCounts(v []V2reportsTaxonomyNodeCountByType) {
	o.Counts = v
}

// GetGenomicMoltype returns the GenomicMoltype field value if set, zero value otherwise.
func (o *V2reportsTaxonomyNode) GetGenomicMoltype() string {
	if o == nil || o.GenomicMoltype == nil {
		var ret string
		return ret
	}
	return *o.GenomicMoltype
}

// GetGenomicMoltypeOk returns a tuple with the GenomicMoltype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsTaxonomyNode) GetGenomicMoltypeOk() (*string, bool) {
	if o == nil || o.GenomicMoltype == nil {
		return nil, false
	}
	return o.GenomicMoltype, true
}

// HasGenomicMoltype returns a boolean if a field has been set.
func (o *V2reportsTaxonomyNode) HasGenomicMoltype() bool {
	if o != nil && o.GenomicMoltype != nil {
		return true
	}

	return false
}

// SetGenomicMoltype gets a reference to the given string and assigns it to the GenomicMoltype field.
func (o *V2reportsTaxonomyNode) SetGenomicMoltype(v string) {
	o.GenomicMoltype = &v
}

func (o V2reportsTaxonomyNode) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TaxId != nil {
		toSerialize["tax_id"] = o.TaxId
	}
	if o.Rank != nil {
		toSerialize["rank"] = o.Rank
	}
	if o.CurrentScientificName != nil {
		toSerialize["current_scientific_name"] = o.CurrentScientificName
	}
	if o.Basionym != nil {
		toSerialize["basionym"] = o.Basionym
	}
	if o.CuratorCommonName != nil {
		toSerialize["curator_common_name"] = o.CuratorCommonName
	}
	if o.GroupName != nil {
		toSerialize["group_name"] = o.GroupName
	}
	if o.HasTypeMaterial != nil {
		toSerialize["has_type_material"] = o.HasTypeMaterial
	}
	if o.Classification != nil {
		toSerialize["classification"] = o.Classification
	}
	if o.Parents != nil {
		toSerialize["parents"] = o.Parents
	}
	if o.Children != nil {
		toSerialize["children"] = o.Children
	}
	if o.Counts != nil {
		toSerialize["counts"] = o.Counts
	}
	if o.GenomicMoltype != nil {
		toSerialize["genomic_moltype"] = o.GenomicMoltype
	}
	return json.Marshal(toSerialize)
}

type NullableV2reportsTaxonomyNode struct {
	value *V2reportsTaxonomyNode
	isSet bool
}

func (v NullableV2reportsTaxonomyNode) Get() *V2reportsTaxonomyNode {
	return v.value
}

func (v *NullableV2reportsTaxonomyNode) Set(val *V2reportsTaxonomyNode) {
	v.value = val
	v.isSet = true
}

func (v NullableV2reportsTaxonomyNode) IsSet() bool {
	return v.isSet
}

func (v *NullableV2reportsTaxonomyNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2reportsTaxonomyNode(val *V2reportsTaxonomyNode) *NullableV2reportsTaxonomyNode {
	return &NullableV2reportsTaxonomyNode{value: val, isSet: true}
}

func (v NullableV2reportsTaxonomyNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2reportsTaxonomyNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


