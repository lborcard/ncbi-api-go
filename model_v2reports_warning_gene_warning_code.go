/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// V2reportsWarningGeneWarningCode the model 'V2reportsWarningGeneWarningCode'
type V2reportsWarningGeneWarningCode string

// List of v2reportsWarningGeneWarningCode
const (
	V2REPORTSWARNINGGENEWARNINGCODE_UNKNOWN_GENE_WARNING_CODE V2reportsWarningGeneWarningCode = "UNKNOWN_GENE_WARNING_CODE"
	V2REPORTSWARNINGGENEWARNINGCODE_ACCESSION_VERSION_MISMATCH V2reportsWarningGeneWarningCode = "ACCESSION_VERSION_MISMATCH"
	V2REPORTSWARNINGGENEWARNINGCODE_REPLACED_GENE_ID V2reportsWarningGeneWarningCode = "REPLACED_GENE_ID"
	V2REPORTSWARNINGGENEWARNINGCODE_DISCONTINUED_GENE_ID V2reportsWarningGeneWarningCode = "DISCONTINUED_GENE_ID"
	V2REPORTSWARNINGGENEWARNINGCODE_UNRECOGNIZED_GENE_ID V2reportsWarningGeneWarningCode = "UNRECOGNIZED_GENE_ID"
	V2REPORTSWARNINGGENEWARNINGCODE_UNRECOGNIZED_GENE_SYMBOL V2reportsWarningGeneWarningCode = "UNRECOGNIZED_GENE_SYMBOL"
	V2REPORTSWARNINGGENEWARNINGCODE_UNRECOGNIZED_ACCESSION V2reportsWarningGeneWarningCode = "UNRECOGNIZED_ACCESSION"
	V2REPORTSWARNINGGENEWARNINGCODE_UNRECOGNIZED_TAX_TOKEN V2reportsWarningGeneWarningCode = "UNRECOGNIZED_TAX_TOKEN"
	V2REPORTSWARNINGGENEWARNINGCODE_NO_GENE_ANNOTATION_FOUND V2reportsWarningGeneWarningCode = "NO_GENE_ANNOTATION_FOUND"
	V2REPORTSWARNINGGENEWARNINGCODE_ABOVE_SPECIES_TAXON V2reportsWarningGeneWarningCode = "ABOVE_SPECIES_TAXON"
)

// All allowed values of V2reportsWarningGeneWarningCode enum
var AllowedV2reportsWarningGeneWarningCodeEnumValues = []V2reportsWarningGeneWarningCode{
	"UNKNOWN_GENE_WARNING_CODE",
	"ACCESSION_VERSION_MISMATCH",
	"REPLACED_GENE_ID",
	"DISCONTINUED_GENE_ID",
	"UNRECOGNIZED_GENE_ID",
	"UNRECOGNIZED_GENE_SYMBOL",
	"UNRECOGNIZED_ACCESSION",
	"UNRECOGNIZED_TAX_TOKEN",
	"NO_GENE_ANNOTATION_FOUND",
	"ABOVE_SPECIES_TAXON",
}

func (v *V2reportsWarningGeneWarningCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V2reportsWarningGeneWarningCode(value)
	for _, existing := range AllowedV2reportsWarningGeneWarningCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V2reportsWarningGeneWarningCode", value)
}

// NewV2reportsWarningGeneWarningCodeFromValue returns a pointer to a valid V2reportsWarningGeneWarningCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV2reportsWarningGeneWarningCodeFromValue(v string) (*V2reportsWarningGeneWarningCode, error) {
	ev := V2reportsWarningGeneWarningCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V2reportsWarningGeneWarningCode: valid values are %v", v, AllowedV2reportsWarningGeneWarningCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V2reportsWarningGeneWarningCode) IsValid() bool {
	for _, existing := range AllowedV2reportsWarningGeneWarningCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v2reportsWarningGeneWarningCode value
func (v V2reportsWarningGeneWarningCode) Ptr() *V2reportsWarningGeneWarningCode {
	return &v
}

type NullableV2reportsWarningGeneWarningCode struct {
	value *V2reportsWarningGeneWarningCode
	isSet bool
}

func (v NullableV2reportsWarningGeneWarningCode) Get() *V2reportsWarningGeneWarningCode {
	return v.value
}

func (v *NullableV2reportsWarningGeneWarningCode) Set(val *V2reportsWarningGeneWarningCode) {
	v.value = val
	v.isSet = true
}

func (v NullableV2reportsWarningGeneWarningCode) IsSet() bool {
	return v.isSet
}

func (v *NullableV2reportsWarningGeneWarningCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2reportsWarningGeneWarningCode(val *V2reportsWarningGeneWarningCode) *NullableV2reportsWarningGeneWarningCode {
	return &NullableV2reportsWarningGeneWarningCode{value: val, isSet: true}
}

func (v NullableV2reportsWarningGeneWarningCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2reportsWarningGeneWarningCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

