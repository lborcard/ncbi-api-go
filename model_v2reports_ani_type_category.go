/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// V2reportsANITypeCategory the model 'V2reportsANITypeCategory'
type V2reportsANITypeCategory string

// List of v2reportsANITypeCategory
const (
	V2REPORTSANITYPECATEGORY_ANI_CATEGORY_UNKNOWN V2reportsANITypeCategory = "ANI_CATEGORY_UNKNOWN"
	V2REPORTSANITYPECATEGORY_CLADEREF V2reportsANITypeCategory = "claderef"
	V2REPORTSANITYPECATEGORY_CATEGORY_NA V2reportsANITypeCategory = "category_na"
	V2REPORTSANITYPECATEGORY_NEOTYPE V2reportsANITypeCategory = "neotype"
	V2REPORTSANITYPECATEGORY_NO_TYPE V2reportsANITypeCategory = "no_type"
	V2REPORTSANITYPECATEGORY_PATHOVAR V2reportsANITypeCategory = "pathovar"
	V2REPORTSANITYPECATEGORY_REFTYPE V2reportsANITypeCategory = "reftype"
	V2REPORTSANITYPECATEGORY_SUSPECTED_TYPE V2reportsANITypeCategory = "suspected_type"
	V2REPORTSANITYPECATEGORY_SYNTYPE V2reportsANITypeCategory = "syntype"
	V2REPORTSANITYPECATEGORY_TYPE V2reportsANITypeCategory = "type"
)

// All allowed values of V2reportsANITypeCategory enum
var AllowedV2reportsANITypeCategoryEnumValues = []V2reportsANITypeCategory{
	"ANI_CATEGORY_UNKNOWN",
	"claderef",
	"category_na",
	"neotype",
	"no_type",
	"pathovar",
	"reftype",
	"suspected_type",
	"syntype",
	"type",
}

func (v *V2reportsANITypeCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V2reportsANITypeCategory(value)
	for _, existing := range AllowedV2reportsANITypeCategoryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V2reportsANITypeCategory", value)
}

// NewV2reportsANITypeCategoryFromValue returns a pointer to a valid V2reportsANITypeCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV2reportsANITypeCategoryFromValue(v string) (*V2reportsANITypeCategory, error) {
	ev := V2reportsANITypeCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V2reportsANITypeCategory: valid values are %v", v, AllowedV2reportsANITypeCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V2reportsANITypeCategory) IsValid() bool {
	for _, existing := range AllowedV2reportsANITypeCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v2reportsANITypeCategory value
func (v V2reportsANITypeCategory) Ptr() *V2reportsANITypeCategory {
	return &v
}

type NullableV2reportsANITypeCategory struct {
	value *V2reportsANITypeCategory
	isSet bool
}

func (v NullableV2reportsANITypeCategory) Get() *V2reportsANITypeCategory {
	return v.value
}

func (v *NullableV2reportsANITypeCategory) Set(val *V2reportsANITypeCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableV2reportsANITypeCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableV2reportsANITypeCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2reportsANITypeCategory(val *V2reportsANITypeCategory) *NullableV2reportsANITypeCategory {
	return &NullableV2reportsANITypeCategory{value: val, isSet: true}
}

func (v NullableV2reportsANITypeCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2reportsANITypeCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

