/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ncbi-openapi-v2_goland

import (
	"encoding/json"
	"fmt"
)

// V2reportsAssemblyLevel the model 'V2reportsAssemblyLevel'
type V2reportsAssemblyLevel string

// List of v2reportsAssemblyLevel
const (
	V2REPORTSASSEMBLYLEVEL_CHROMOSOME V2reportsAssemblyLevel = "chromosome"
	V2REPORTSASSEMBLYLEVEL_SCAFFOLD V2reportsAssemblyLevel = "scaffold"
	V2REPORTSASSEMBLYLEVEL_CONTIG V2reportsAssemblyLevel = "contig"
	V2REPORTSASSEMBLYLEVEL_COMPLETE_GENOME V2reportsAssemblyLevel = "complete_genome"
)

// All allowed values of V2reportsAssemblyLevel enum
var AllowedV2reportsAssemblyLevelEnumValues = []V2reportsAssemblyLevel{
	"chromosome",
	"scaffold",
	"contig",
	"complete_genome",
}

func (v *V2reportsAssemblyLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V2reportsAssemblyLevel(value)
	for _, existing := range AllowedV2reportsAssemblyLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V2reportsAssemblyLevel", value)
}

// NewV2reportsAssemblyLevelFromValue returns a pointer to a valid V2reportsAssemblyLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV2reportsAssemblyLevelFromValue(v string) (*V2reportsAssemblyLevel, error) {
	ev := V2reportsAssemblyLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V2reportsAssemblyLevel: valid values are %v", v, AllowedV2reportsAssemblyLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V2reportsAssemblyLevel) IsValid() bool {
	for _, existing := range AllowedV2reportsAssemblyLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v2reportsAssemblyLevel value
func (v V2reportsAssemblyLevel) Ptr() *V2reportsAssemblyLevel {
	return &v
}

type NullableV2reportsAssemblyLevel struct {
	value *V2reportsAssemblyLevel
	isSet bool
}

func (v NullableV2reportsAssemblyLevel) Get() *V2reportsAssemblyLevel {
	return v.value
}

func (v *NullableV2reportsAssemblyLevel) Set(val *V2reportsAssemblyLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableV2reportsAssemblyLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableV2reportsAssemblyLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2reportsAssemblyLevel(val *V2reportsAssemblyLevel) *NullableV2reportsAssemblyLevel {
	return &NullableV2reportsAssemblyLevel{value: val, isSet: true}
}

func (v NullableV2reportsAssemblyLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2reportsAssemblyLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

