/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V2VersionReply struct for V2VersionReply
type V2VersionReply struct {
	Version *string `json:"version,omitempty"`
	MajorVer *int32 `json:"major_ver,omitempty"`
	MinorVer *int32 `json:"minor_ver,omitempty"`
	PatchVer *int32 `json:"patch_ver,omitempty"`
}

// NewV2VersionReply instantiates a new V2VersionReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2VersionReply() *V2VersionReply {
	this := V2VersionReply{}
	return &this
}

// NewV2VersionReplyWithDefaults instantiates a new V2VersionReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2VersionReplyWithDefaults() *V2VersionReply {
	this := V2VersionReply{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *V2VersionReply) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2VersionReply) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *V2VersionReply) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *V2VersionReply) SetVersion(v string) {
	o.Version = &v
}

// GetMajorVer returns the MajorVer field value if set, zero value otherwise.
func (o *V2VersionReply) GetMajorVer() int32 {
	if o == nil || o.MajorVer == nil {
		var ret int32
		return ret
	}
	return *o.MajorVer
}

// GetMajorVerOk returns a tuple with the MajorVer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2VersionReply) GetMajorVerOk() (*int32, bool) {
	if o == nil || o.MajorVer == nil {
		return nil, false
	}
	return o.MajorVer, true
}

// HasMajorVer returns a boolean if a field has been set.
func (o *V2VersionReply) HasMajorVer() bool {
	if o != nil && o.MajorVer != nil {
		return true
	}

	return false
}

// SetMajorVer gets a reference to the given int32 and assigns it to the MajorVer field.
func (o *V2VersionReply) SetMajorVer(v int32) {
	o.MajorVer = &v
}

// GetMinorVer returns the MinorVer field value if set, zero value otherwise.
func (o *V2VersionReply) GetMinorVer() int32 {
	if o == nil || o.MinorVer == nil {
		var ret int32
		return ret
	}
	return *o.MinorVer
}

// GetMinorVerOk returns a tuple with the MinorVer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2VersionReply) GetMinorVerOk() (*int32, bool) {
	if o == nil || o.MinorVer == nil {
		return nil, false
	}
	return o.MinorVer, true
}

// HasMinorVer returns a boolean if a field has been set.
func (o *V2VersionReply) HasMinorVer() bool {
	if o != nil && o.MinorVer != nil {
		return true
	}

	return false
}

// SetMinorVer gets a reference to the given int32 and assigns it to the MinorVer field.
func (o *V2VersionReply) SetMinorVer(v int32) {
	o.MinorVer = &v
}

// GetPatchVer returns the PatchVer field value if set, zero value otherwise.
func (o *V2VersionReply) GetPatchVer() int32 {
	if o == nil || o.PatchVer == nil {
		var ret int32
		return ret
	}
	return *o.PatchVer
}

// GetPatchVerOk returns a tuple with the PatchVer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2VersionReply) GetPatchVerOk() (*int32, bool) {
	if o == nil || o.PatchVer == nil {
		return nil, false
	}
	return o.PatchVer, true
}

// HasPatchVer returns a boolean if a field has been set.
func (o *V2VersionReply) HasPatchVer() bool {
	if o != nil && o.PatchVer != nil {
		return true
	}

	return false
}

// SetPatchVer gets a reference to the given int32 and assigns it to the PatchVer field.
func (o *V2VersionReply) SetPatchVer(v int32) {
	o.PatchVer = &v
}

func (o V2VersionReply) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.MajorVer != nil {
		toSerialize["major_ver"] = o.MajorVer
	}
	if o.MinorVer != nil {
		toSerialize["minor_ver"] = o.MinorVer
	}
	if o.PatchVer != nil {
		toSerialize["patch_ver"] = o.PatchVer
	}
	return json.Marshal(toSerialize)
}

type NullableV2VersionReply struct {
	value *V2VersionReply
	isSet bool
}

func (v NullableV2VersionReply) Get() *V2VersionReply {
	return v.value
}

func (v *NullableV2VersionReply) Set(val *V2VersionReply) {
	v.value = val
	v.isSet = true
}

func (v NullableV2VersionReply) IsSet() bool {
	return v.isSet
}

func (v *NullableV2VersionReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2VersionReply(val *V2VersionReply) *NullableV2VersionReply {
	return &NullableV2VersionReply{value: val, isSet: true}
}

func (v NullableV2VersionReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2VersionReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


