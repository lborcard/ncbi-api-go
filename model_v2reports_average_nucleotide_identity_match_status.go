/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ncbi-openapi-v2_goland

import (
	"encoding/json"
	"fmt"
)

// V2reportsAverageNucleotideIdentityMatchStatus the model 'V2reportsAverageNucleotideIdentityMatchStatus'
type V2reportsAverageNucleotideIdentityMatchStatus string

// List of v2reportsAverageNucleotideIdentityMatchStatus
const (
	V2REPORTSAVERAGENUCLEOTIDEIDENTITYMATCHSTATUS_BEST_MATCH_STATUS_UNKNOWN V2reportsAverageNucleotideIdentityMatchStatus = "BEST_MATCH_STATUS_UNKNOWN"
	V2REPORTSAVERAGENUCLEOTIDEIDENTITYMATCHSTATUS_APPROVED_MISMATCH V2reportsAverageNucleotideIdentityMatchStatus = "approved_mismatch"
	V2REPORTSAVERAGENUCLEOTIDEIDENTITYMATCHSTATUS_BELOW_THRESHOLD_MATCH V2reportsAverageNucleotideIdentityMatchStatus = "below_threshold_match"
	V2REPORTSAVERAGENUCLEOTIDEIDENTITYMATCHSTATUS_BELOW_THRESHOLD_MISMATCH V2reportsAverageNucleotideIdentityMatchStatus = "below_threshold_mismatch"
	V2REPORTSAVERAGENUCLEOTIDEIDENTITYMATCHSTATUS_BEST_MATCH_STATUS V2reportsAverageNucleotideIdentityMatchStatus = "best_match_status"
	V2REPORTSAVERAGENUCLEOTIDEIDENTITYMATCHSTATUS_DERIVED_SPECIES_MATCH V2reportsAverageNucleotideIdentityMatchStatus = "derived_species_match"
	V2REPORTSAVERAGENUCLEOTIDEIDENTITYMATCHSTATUS_GENUS_MATCH V2reportsAverageNucleotideIdentityMatchStatus = "genus_match"
	V2REPORTSAVERAGENUCLEOTIDEIDENTITYMATCHSTATUS_LOW_COVERAGE V2reportsAverageNucleotideIdentityMatchStatus = "low_coverage"
	V2REPORTSAVERAGENUCLEOTIDEIDENTITYMATCHSTATUS_MISMATCH V2reportsAverageNucleotideIdentityMatchStatus = "mismatch"
	V2REPORTSAVERAGENUCLEOTIDEIDENTITYMATCHSTATUS_STATUS_NA V2reportsAverageNucleotideIdentityMatchStatus = "status_na"
	V2REPORTSAVERAGENUCLEOTIDEIDENTITYMATCHSTATUS_SPECIES_MATCH V2reportsAverageNucleotideIdentityMatchStatus = "species_match"
	V2REPORTSAVERAGENUCLEOTIDEIDENTITYMATCHSTATUS_SUBSPECIES_MATCH V2reportsAverageNucleotideIdentityMatchStatus = "subspecies_match"
	V2REPORTSAVERAGENUCLEOTIDEIDENTITYMATCHSTATUS_SYNONYM_MATCH V2reportsAverageNucleotideIdentityMatchStatus = "synonym_match"
	V2REPORTSAVERAGENUCLEOTIDEIDENTITYMATCHSTATUS_LINEAGE_MATCH V2reportsAverageNucleotideIdentityMatchStatus = "lineage_match"
	V2REPORTSAVERAGENUCLEOTIDEIDENTITYMATCHSTATUS_BELOW_THRESHOLD_LINEAGE_MATCH V2reportsAverageNucleotideIdentityMatchStatus = "below_threshold_lineage_match"
)

// All allowed values of V2reportsAverageNucleotideIdentityMatchStatus enum
var AllowedV2reportsAverageNucleotideIdentityMatchStatusEnumValues = []V2reportsAverageNucleotideIdentityMatchStatus{
	"BEST_MATCH_STATUS_UNKNOWN",
	"approved_mismatch",
	"below_threshold_match",
	"below_threshold_mismatch",
	"best_match_status",
	"derived_species_match",
	"genus_match",
	"low_coverage",
	"mismatch",
	"status_na",
	"species_match",
	"subspecies_match",
	"synonym_match",
	"lineage_match",
	"below_threshold_lineage_match",
}

func (v *V2reportsAverageNucleotideIdentityMatchStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V2reportsAverageNucleotideIdentityMatchStatus(value)
	for _, existing := range AllowedV2reportsAverageNucleotideIdentityMatchStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V2reportsAverageNucleotideIdentityMatchStatus", value)
}

// NewV2reportsAverageNucleotideIdentityMatchStatusFromValue returns a pointer to a valid V2reportsAverageNucleotideIdentityMatchStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV2reportsAverageNucleotideIdentityMatchStatusFromValue(v string) (*V2reportsAverageNucleotideIdentityMatchStatus, error) {
	ev := V2reportsAverageNucleotideIdentityMatchStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V2reportsAverageNucleotideIdentityMatchStatus: valid values are %v", v, AllowedV2reportsAverageNucleotideIdentityMatchStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V2reportsAverageNucleotideIdentityMatchStatus) IsValid() bool {
	for _, existing := range AllowedV2reportsAverageNucleotideIdentityMatchStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v2reportsAverageNucleotideIdentityMatchStatus value
func (v V2reportsAverageNucleotideIdentityMatchStatus) Ptr() *V2reportsAverageNucleotideIdentityMatchStatus {
	return &v
}

type NullableV2reportsAverageNucleotideIdentityMatchStatus struct {
	value *V2reportsAverageNucleotideIdentityMatchStatus
	isSet bool
}

func (v NullableV2reportsAverageNucleotideIdentityMatchStatus) Get() *V2reportsAverageNucleotideIdentityMatchStatus {
	return v.value
}

func (v *NullableV2reportsAverageNucleotideIdentityMatchStatus) Set(val *V2reportsAverageNucleotideIdentityMatchStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableV2reportsAverageNucleotideIdentityMatchStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableV2reportsAverageNucleotideIdentityMatchStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2reportsAverageNucleotideIdentityMatchStatus(val *V2reportsAverageNucleotideIdentityMatchStatus) *NullableV2reportsAverageNucleotideIdentityMatchStatus {
	return &NullableV2reportsAverageNucleotideIdentityMatchStatus{value: val, isSet: true}
}

func (v NullableV2reportsAverageNucleotideIdentityMatchStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2reportsAverageNucleotideIdentityMatchStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

