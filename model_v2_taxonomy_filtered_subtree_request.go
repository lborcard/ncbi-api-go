/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V2TaxonomyFilteredSubtreeRequest struct for V2TaxonomyFilteredSubtreeRequest
type V2TaxonomyFilteredSubtreeRequest struct {
	Taxons []string `json:"taxons,omitempty"`
	SpecifiedLimit *bool `json:"specified_limit,omitempty"`
	RankLimits []V2reportsRankType `json:"rank_limits,omitempty"`
}

// NewV2TaxonomyFilteredSubtreeRequest instantiates a new V2TaxonomyFilteredSubtreeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2TaxonomyFilteredSubtreeRequest() *V2TaxonomyFilteredSubtreeRequest {
	this := V2TaxonomyFilteredSubtreeRequest{}
	return &this
}

// NewV2TaxonomyFilteredSubtreeRequestWithDefaults instantiates a new V2TaxonomyFilteredSubtreeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2TaxonomyFilteredSubtreeRequestWithDefaults() *V2TaxonomyFilteredSubtreeRequest {
	this := V2TaxonomyFilteredSubtreeRequest{}
	return &this
}

// GetTaxons returns the Taxons field value if set, zero value otherwise.
func (o *V2TaxonomyFilteredSubtreeRequest) GetTaxons() []string {
	if o == nil || o.Taxons == nil {
		var ret []string
		return ret
	}
	return o.Taxons
}

// GetTaxonsOk returns a tuple with the Taxons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2TaxonomyFilteredSubtreeRequest) GetTaxonsOk() ([]string, bool) {
	if o == nil || o.Taxons == nil {
		return nil, false
	}
	return o.Taxons, true
}

// HasTaxons returns a boolean if a field has been set.
func (o *V2TaxonomyFilteredSubtreeRequest) HasTaxons() bool {
	if o != nil && o.Taxons != nil {
		return true
	}

	return false
}

// SetTaxons gets a reference to the given []string and assigns it to the Taxons field.
func (o *V2TaxonomyFilteredSubtreeRequest) SetTaxons(v []string) {
	o.Taxons = v
}

// GetSpecifiedLimit returns the SpecifiedLimit field value if set, zero value otherwise.
func (o *V2TaxonomyFilteredSubtreeRequest) GetSpecifiedLimit() bool {
	if o == nil || o.SpecifiedLimit == nil {
		var ret bool
		return ret
	}
	return *o.SpecifiedLimit
}

// GetSpecifiedLimitOk returns a tuple with the SpecifiedLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2TaxonomyFilteredSubtreeRequest) GetSpecifiedLimitOk() (*bool, bool) {
	if o == nil || o.SpecifiedLimit == nil {
		return nil, false
	}
	return o.SpecifiedLimit, true
}

// HasSpecifiedLimit returns a boolean if a field has been set.
func (o *V2TaxonomyFilteredSubtreeRequest) HasSpecifiedLimit() bool {
	if o != nil && o.SpecifiedLimit != nil {
		return true
	}

	return false
}

// SetSpecifiedLimit gets a reference to the given bool and assigns it to the SpecifiedLimit field.
func (o *V2TaxonomyFilteredSubtreeRequest) SetSpecifiedLimit(v bool) {
	o.SpecifiedLimit = &v
}

// GetRankLimits returns the RankLimits field value if set, zero value otherwise.
func (o *V2TaxonomyFilteredSubtreeRequest) GetRankLimits() []V2reportsRankType {
	if o == nil || o.RankLimits == nil {
		var ret []V2reportsRankType
		return ret
	}
	return o.RankLimits
}

// GetRankLimitsOk returns a tuple with the RankLimits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2TaxonomyFilteredSubtreeRequest) GetRankLimitsOk() ([]V2reportsRankType, bool) {
	if o == nil || o.RankLimits == nil {
		return nil, false
	}
	return o.RankLimits, true
}

// HasRankLimits returns a boolean if a field has been set.
func (o *V2TaxonomyFilteredSubtreeRequest) HasRankLimits() bool {
	if o != nil && o.RankLimits != nil {
		return true
	}

	return false
}

// SetRankLimits gets a reference to the given []V2reportsRankType and assigns it to the RankLimits field.
func (o *V2TaxonomyFilteredSubtreeRequest) SetRankLimits(v []V2reportsRankType) {
	o.RankLimits = v
}

func (o V2TaxonomyFilteredSubtreeRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Taxons != nil {
		toSerialize["taxons"] = o.Taxons
	}
	if o.SpecifiedLimit != nil {
		toSerialize["specified_limit"] = o.SpecifiedLimit
	}
	if o.RankLimits != nil {
		toSerialize["rank_limits"] = o.RankLimits
	}
	return json.Marshal(toSerialize)
}

type NullableV2TaxonomyFilteredSubtreeRequest struct {
	value *V2TaxonomyFilteredSubtreeRequest
	isSet bool
}

func (v NullableV2TaxonomyFilteredSubtreeRequest) Get() *V2TaxonomyFilteredSubtreeRequest {
	return v.value
}

func (v *NullableV2TaxonomyFilteredSubtreeRequest) Set(val *V2TaxonomyFilteredSubtreeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableV2TaxonomyFilteredSubtreeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableV2TaxonomyFilteredSubtreeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2TaxonomyFilteredSubtreeRequest(val *V2TaxonomyFilteredSubtreeRequest) *NullableV2TaxonomyFilteredSubtreeRequest {
	return &NullableV2TaxonomyFilteredSubtreeRequest{value: val, isSet: true}
}

func (v NullableV2TaxonomyFilteredSubtreeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2TaxonomyFilteredSubtreeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


