/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ncbi-openapi-v2_goland

import (
	"encoding/json"
)

// V2reportsProductDescriptor struct for V2reportsProductDescriptor
type V2reportsProductDescriptor struct {
	GeneId *string `json:"gene_id,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Description *string `json:"description,omitempty"`
	TaxId *string `json:"tax_id,omitempty"`
	Taxname *string `json:"taxname,omitempty"`
	CommonName *string `json:"common_name,omitempty"`
	Type *V2reportsGeneType `json:"type,omitempty"`
	RnaType *V2reportsRnaType `json:"rna_type,omitempty"`
	Transcripts []V2reportsTranscript `json:"transcripts,omitempty"`
	TranscriptCount *int32 `json:"transcript_count,omitempty"`
	ProteinCount *int32 `json:"protein_count,omitempty"`
	TranscriptTypeCounts []V2reportsTranscriptTypeCount `json:"transcript_type_counts,omitempty"`
}

// NewV2reportsProductDescriptor instantiates a new V2reportsProductDescriptor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2reportsProductDescriptor() *V2reportsProductDescriptor {
	this := V2reportsProductDescriptor{}
	var type_ V2reportsGeneType = V2REPORTSGENETYPE_UNKNOWN
	this.Type = &type_
	var rnaType V2reportsRnaType = V2REPORTSRNATYPE_RNA_UNKNOWN
	this.RnaType = &rnaType
	return &this
}

// NewV2reportsProductDescriptorWithDefaults instantiates a new V2reportsProductDescriptor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2reportsProductDescriptorWithDefaults() *V2reportsProductDescriptor {
	this := V2reportsProductDescriptor{}
	var type_ V2reportsGeneType = V2REPORTSGENETYPE_UNKNOWN
	this.Type = &type_
	var rnaType V2reportsRnaType = V2REPORTSRNATYPE_RNA_UNKNOWN
	this.RnaType = &rnaType
	return &this
}

// GetGeneId returns the GeneId field value if set, zero value otherwise.
func (o *V2reportsProductDescriptor) GetGeneId() string {
	if o == nil || o.GeneId == nil {
		var ret string
		return ret
	}
	return *o.GeneId
}

// GetGeneIdOk returns a tuple with the GeneId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsProductDescriptor) GetGeneIdOk() (*string, bool) {
	if o == nil || o.GeneId == nil {
		return nil, false
	}
	return o.GeneId, true
}

// HasGeneId returns a boolean if a field has been set.
func (o *V2reportsProductDescriptor) HasGeneId() bool {
	if o != nil && o.GeneId != nil {
		return true
	}

	return false
}

// SetGeneId gets a reference to the given string and assigns it to the GeneId field.
func (o *V2reportsProductDescriptor) SetGeneId(v string) {
	o.GeneId = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *V2reportsProductDescriptor) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsProductDescriptor) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *V2reportsProductDescriptor) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *V2reportsProductDescriptor) SetSymbol(v string) {
	o.Symbol = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *V2reportsProductDescriptor) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsProductDescriptor) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *V2reportsProductDescriptor) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *V2reportsProductDescriptor) SetDescription(v string) {
	o.Description = &v
}

// GetTaxId returns the TaxId field value if set, zero value otherwise.
func (o *V2reportsProductDescriptor) GetTaxId() string {
	if o == nil || o.TaxId == nil {
		var ret string
		return ret
	}
	return *o.TaxId
}

// GetTaxIdOk returns a tuple with the TaxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsProductDescriptor) GetTaxIdOk() (*string, bool) {
	if o == nil || o.TaxId == nil {
		return nil, false
	}
	return o.TaxId, true
}

// HasTaxId returns a boolean if a field has been set.
func (o *V2reportsProductDescriptor) HasTaxId() bool {
	if o != nil && o.TaxId != nil {
		return true
	}

	return false
}

// SetTaxId gets a reference to the given string and assigns it to the TaxId field.
func (o *V2reportsProductDescriptor) SetTaxId(v string) {
	o.TaxId = &v
}

// GetTaxname returns the Taxname field value if set, zero value otherwise.
func (o *V2reportsProductDescriptor) GetTaxname() string {
	if o == nil || o.Taxname == nil {
		var ret string
		return ret
	}
	return *o.Taxname
}

// GetTaxnameOk returns a tuple with the Taxname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsProductDescriptor) GetTaxnameOk() (*string, bool) {
	if o == nil || o.Taxname == nil {
		return nil, false
	}
	return o.Taxname, true
}

// HasTaxname returns a boolean if a field has been set.
func (o *V2reportsProductDescriptor) HasTaxname() bool {
	if o != nil && o.Taxname != nil {
		return true
	}

	return false
}

// SetTaxname gets a reference to the given string and assigns it to the Taxname field.
func (o *V2reportsProductDescriptor) SetTaxname(v string) {
	o.Taxname = &v
}

// GetCommonName returns the CommonName field value if set, zero value otherwise.
func (o *V2reportsProductDescriptor) GetCommonName() string {
	if o == nil || o.CommonName == nil {
		var ret string
		return ret
	}
	return *o.CommonName
}

// GetCommonNameOk returns a tuple with the CommonName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsProductDescriptor) GetCommonNameOk() (*string, bool) {
	if o == nil || o.CommonName == nil {
		return nil, false
	}
	return o.CommonName, true
}

// HasCommonName returns a boolean if a field has been set.
func (o *V2reportsProductDescriptor) HasCommonName() bool {
	if o != nil && o.CommonName != nil {
		return true
	}

	return false
}

// SetCommonName gets a reference to the given string and assigns it to the CommonName field.
func (o *V2reportsProductDescriptor) SetCommonName(v string) {
	o.CommonName = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *V2reportsProductDescriptor) GetType() V2reportsGeneType {
	if o == nil || o.Type == nil {
		var ret V2reportsGeneType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsProductDescriptor) GetTypeOk() (*V2reportsGeneType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *V2reportsProductDescriptor) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given V2reportsGeneType and assigns it to the Type field.
func (o *V2reportsProductDescriptor) SetType(v V2reportsGeneType) {
	o.Type = &v
}

// GetRnaType returns the RnaType field value if set, zero value otherwise.
func (o *V2reportsProductDescriptor) GetRnaType() V2reportsRnaType {
	if o == nil || o.RnaType == nil {
		var ret V2reportsRnaType
		return ret
	}
	return *o.RnaType
}

// GetRnaTypeOk returns a tuple with the RnaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsProductDescriptor) GetRnaTypeOk() (*V2reportsRnaType, bool) {
	if o == nil || o.RnaType == nil {
		return nil, false
	}
	return o.RnaType, true
}

// HasRnaType returns a boolean if a field has been set.
func (o *V2reportsProductDescriptor) HasRnaType() bool {
	if o != nil && o.RnaType != nil {
		return true
	}

	return false
}

// SetRnaType gets a reference to the given V2reportsRnaType and assigns it to the RnaType field.
func (o *V2reportsProductDescriptor) SetRnaType(v V2reportsRnaType) {
	o.RnaType = &v
}

// GetTranscripts returns the Transcripts field value if set, zero value otherwise.
func (o *V2reportsProductDescriptor) GetTranscripts() []V2reportsTranscript {
	if o == nil || o.Transcripts == nil {
		var ret []V2reportsTranscript
		return ret
	}
	return o.Transcripts
}

// GetTranscriptsOk returns a tuple with the Transcripts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsProductDescriptor) GetTranscriptsOk() ([]V2reportsTranscript, bool) {
	if o == nil || o.Transcripts == nil {
		return nil, false
	}
	return o.Transcripts, true
}

// HasTranscripts returns a boolean if a field has been set.
func (o *V2reportsProductDescriptor) HasTranscripts() bool {
	if o != nil && o.Transcripts != nil {
		return true
	}

	return false
}

// SetTranscripts gets a reference to the given []V2reportsTranscript and assigns it to the Transcripts field.
func (o *V2reportsProductDescriptor) SetTranscripts(v []V2reportsTranscript) {
	o.Transcripts = v
}

// GetTranscriptCount returns the TranscriptCount field value if set, zero value otherwise.
func (o *V2reportsProductDescriptor) GetTranscriptCount() int32 {
	if o == nil || o.TranscriptCount == nil {
		var ret int32
		return ret
	}
	return *o.TranscriptCount
}

// GetTranscriptCountOk returns a tuple with the TranscriptCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsProductDescriptor) GetTranscriptCountOk() (*int32, bool) {
	if o == nil || o.TranscriptCount == nil {
		return nil, false
	}
	return o.TranscriptCount, true
}

// HasTranscriptCount returns a boolean if a field has been set.
func (o *V2reportsProductDescriptor) HasTranscriptCount() bool {
	if o != nil && o.TranscriptCount != nil {
		return true
	}

	return false
}

// SetTranscriptCount gets a reference to the given int32 and assigns it to the TranscriptCount field.
func (o *V2reportsProductDescriptor) SetTranscriptCount(v int32) {
	o.TranscriptCount = &v
}

// GetProteinCount returns the ProteinCount field value if set, zero value otherwise.
func (o *V2reportsProductDescriptor) GetProteinCount() int32 {
	if o == nil || o.ProteinCount == nil {
		var ret int32
		return ret
	}
	return *o.ProteinCount
}

// GetProteinCountOk returns a tuple with the ProteinCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsProductDescriptor) GetProteinCountOk() (*int32, bool) {
	if o == nil || o.ProteinCount == nil {
		return nil, false
	}
	return o.ProteinCount, true
}

// HasProteinCount returns a boolean if a field has been set.
func (o *V2reportsProductDescriptor) HasProteinCount() bool {
	if o != nil && o.ProteinCount != nil {
		return true
	}

	return false
}

// SetProteinCount gets a reference to the given int32 and assigns it to the ProteinCount field.
func (o *V2reportsProductDescriptor) SetProteinCount(v int32) {
	o.ProteinCount = &v
}

// GetTranscriptTypeCounts returns the TranscriptTypeCounts field value if set, zero value otherwise.
func (o *V2reportsProductDescriptor) GetTranscriptTypeCounts() []V2reportsTranscriptTypeCount {
	if o == nil || o.TranscriptTypeCounts == nil {
		var ret []V2reportsTranscriptTypeCount
		return ret
	}
	return o.TranscriptTypeCounts
}

// GetTranscriptTypeCountsOk returns a tuple with the TranscriptTypeCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsProductDescriptor) GetTranscriptTypeCountsOk() ([]V2reportsTranscriptTypeCount, bool) {
	if o == nil || o.TranscriptTypeCounts == nil {
		return nil, false
	}
	return o.TranscriptTypeCounts, true
}

// HasTranscriptTypeCounts returns a boolean if a field has been set.
func (o *V2reportsProductDescriptor) HasTranscriptTypeCounts() bool {
	if o != nil && o.TranscriptTypeCounts != nil {
		return true
	}

	return false
}

// SetTranscriptTypeCounts gets a reference to the given []V2reportsTranscriptTypeCount and assigns it to the TranscriptTypeCounts field.
func (o *V2reportsProductDescriptor) SetTranscriptTypeCounts(v []V2reportsTranscriptTypeCount) {
	o.TranscriptTypeCounts = v
}

func (o V2reportsProductDescriptor) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.GeneId != nil {
		toSerialize["gene_id"] = o.GeneId
	}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.TaxId != nil {
		toSerialize["tax_id"] = o.TaxId
	}
	if o.Taxname != nil {
		toSerialize["taxname"] = o.Taxname
	}
	if o.CommonName != nil {
		toSerialize["common_name"] = o.CommonName
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.RnaType != nil {
		toSerialize["rna_type"] = o.RnaType
	}
	if o.Transcripts != nil {
		toSerialize["transcripts"] = o.Transcripts
	}
	if o.TranscriptCount != nil {
		toSerialize["transcript_count"] = o.TranscriptCount
	}
	if o.ProteinCount != nil {
		toSerialize["protein_count"] = o.ProteinCount
	}
	if o.TranscriptTypeCounts != nil {
		toSerialize["transcript_type_counts"] = o.TranscriptTypeCounts
	}
	return json.Marshal(toSerialize)
}

type NullableV2reportsProductDescriptor struct {
	value *V2reportsProductDescriptor
	isSet bool
}

func (v NullableV2reportsProductDescriptor) Get() *V2reportsProductDescriptor {
	return v.value
}

func (v *NullableV2reportsProductDescriptor) Set(val *V2reportsProductDescriptor) {
	v.value = val
	v.isSet = true
}

func (v NullableV2reportsProductDescriptor) IsSet() bool {
	return v.isSet
}

func (v *NullableV2reportsProductDescriptor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2reportsProductDescriptor(val *V2reportsProductDescriptor) *NullableV2reportsProductDescriptor {
	return &NullableV2reportsProductDescriptor{value: val, isSet: true}
}

func (v NullableV2reportsProductDescriptor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2reportsProductDescriptor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


