/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// V2reportsSourceDatabase the model 'V2reportsSourceDatabase'
type V2reportsSourceDatabase string

// List of v2reportsSourceDatabase
const (
	V2REPORTSSOURCEDATABASE_UNSPECIFIED V2reportsSourceDatabase = "SOURCE_DATABASE_UNSPECIFIED"
	V2REPORTSSOURCEDATABASE_GENBANK V2reportsSourceDatabase = "SOURCE_DATABASE_GENBANK"
	V2REPORTSSOURCEDATABASE_REFSEQ V2reportsSourceDatabase = "SOURCE_DATABASE_REFSEQ"
)

// All allowed values of V2reportsSourceDatabase enum
var AllowedV2reportsSourceDatabaseEnumValues = []V2reportsSourceDatabase{
	"SOURCE_DATABASE_UNSPECIFIED",
	"SOURCE_DATABASE_GENBANK",
	"SOURCE_DATABASE_REFSEQ",
}

func (v *V2reportsSourceDatabase) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V2reportsSourceDatabase(value)
	for _, existing := range AllowedV2reportsSourceDatabaseEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V2reportsSourceDatabase", value)
}

// NewV2reportsSourceDatabaseFromValue returns a pointer to a valid V2reportsSourceDatabase
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV2reportsSourceDatabaseFromValue(v string) (*V2reportsSourceDatabase, error) {
	ev := V2reportsSourceDatabase(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V2reportsSourceDatabase: valid values are %v", v, AllowedV2reportsSourceDatabaseEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V2reportsSourceDatabase) IsValid() bool {
	for _, existing := range AllowedV2reportsSourceDatabaseEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v2reportsSourceDatabase value
func (v V2reportsSourceDatabase) Ptr() *V2reportsSourceDatabase {
	return &v
}

type NullableV2reportsSourceDatabase struct {
	value *V2reportsSourceDatabase
	isSet bool
}

func (v NullableV2reportsSourceDatabase) Get() *V2reportsSourceDatabase {
	return v.value
}

func (v *NullableV2reportsSourceDatabase) Set(val *V2reportsSourceDatabase) {
	v.value = val
	v.isSet = true
}

func (v NullableV2reportsSourceDatabase) IsSet() bool {
	return v.isSet
}

func (v *NullableV2reportsSourceDatabase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2reportsSourceDatabase(val *V2reportsSourceDatabase) *NullableV2reportsSourceDatabase {
	return &NullableV2reportsSourceDatabase{value: val, isSet: true}
}

func (v NullableV2reportsSourceDatabase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2reportsSourceDatabase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

