/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ncbi-openapi-v2_goland

import (
	"encoding/json"
)

// V2reportsGenomicRegion struct for V2reportsGenomicRegion
type V2reportsGenomicRegion struct {
	GeneRange *V2reportsSeqRangeSet `json:"gene_range,omitempty"`
	Type *V2reportsGenomicRegionGenomicRegionType `json:"type,omitempty"`
}

// NewV2reportsGenomicRegion instantiates a new V2reportsGenomicRegion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2reportsGenomicRegion() *V2reportsGenomicRegion {
	this := V2reportsGenomicRegion{}
	var type_ V2reportsGenomicRegionGenomicRegionType = V2REPORTSGENOMICREGIONGENOMICREGIONTYPE_UNKNOWN
	this.Type = &type_
	return &this
}

// NewV2reportsGenomicRegionWithDefaults instantiates a new V2reportsGenomicRegion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2reportsGenomicRegionWithDefaults() *V2reportsGenomicRegion {
	this := V2reportsGenomicRegion{}
	var type_ V2reportsGenomicRegionGenomicRegionType = V2REPORTSGENOMICREGIONGENOMICREGIONTYPE_UNKNOWN
	this.Type = &type_
	return &this
}

// GetGeneRange returns the GeneRange field value if set, zero value otherwise.
func (o *V2reportsGenomicRegion) GetGeneRange() V2reportsSeqRangeSet {
	if o == nil || o.GeneRange == nil {
		var ret V2reportsSeqRangeSet
		return ret
	}
	return *o.GeneRange
}

// GetGeneRangeOk returns a tuple with the GeneRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsGenomicRegion) GetGeneRangeOk() (*V2reportsSeqRangeSet, bool) {
	if o == nil || o.GeneRange == nil {
		return nil, false
	}
	return o.GeneRange, true
}

// HasGeneRange returns a boolean if a field has been set.
func (o *V2reportsGenomicRegion) HasGeneRange() bool {
	if o != nil && o.GeneRange != nil {
		return true
	}

	return false
}

// SetGeneRange gets a reference to the given V2reportsSeqRangeSet and assigns it to the GeneRange field.
func (o *V2reportsGenomicRegion) SetGeneRange(v V2reportsSeqRangeSet) {
	o.GeneRange = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *V2reportsGenomicRegion) GetType() V2reportsGenomicRegionGenomicRegionType {
	if o == nil || o.Type == nil {
		var ret V2reportsGenomicRegionGenomicRegionType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsGenomicRegion) GetTypeOk() (*V2reportsGenomicRegionGenomicRegionType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *V2reportsGenomicRegion) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given V2reportsGenomicRegionGenomicRegionType and assigns it to the Type field.
func (o *V2reportsGenomicRegion) SetType(v V2reportsGenomicRegionGenomicRegionType) {
	o.Type = &v
}

func (o V2reportsGenomicRegion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.GeneRange != nil {
		toSerialize["gene_range"] = o.GeneRange
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableV2reportsGenomicRegion struct {
	value *V2reportsGenomicRegion
	isSet bool
}

func (v NullableV2reportsGenomicRegion) Get() *V2reportsGenomicRegion {
	return v.value
}

func (v *NullableV2reportsGenomicRegion) Set(val *V2reportsGenomicRegion) {
	v.value = val
	v.isSet = true
}

func (v NullableV2reportsGenomicRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableV2reportsGenomicRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2reportsGenomicRegion(val *V2reportsGenomicRegion) *NullableV2reportsGenomicRegion {
	return &NullableV2reportsGenomicRegion{value: val, isSet: true}
}

func (v NullableV2reportsGenomicRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2reportsGenomicRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


