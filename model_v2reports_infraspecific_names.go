/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ncbi-openapi-v2_goland

import (
	"encoding/json"
)

// V2reportsInfraspecificNames struct for V2reportsInfraspecificNames
type V2reportsInfraspecificNames struct {
	Breed *string `json:"breed,omitempty"`
	Cultivar *string `json:"cultivar,omitempty"`
	Ecotype *string `json:"ecotype,omitempty"`
	Isolate *string `json:"isolate,omitempty"`
	Sex *string `json:"sex,omitempty"`
	Strain *string `json:"strain,omitempty"`
}

// NewV2reportsInfraspecificNames instantiates a new V2reportsInfraspecificNames object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2reportsInfraspecificNames() *V2reportsInfraspecificNames {
	this := V2reportsInfraspecificNames{}
	return &this
}

// NewV2reportsInfraspecificNamesWithDefaults instantiates a new V2reportsInfraspecificNames object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2reportsInfraspecificNamesWithDefaults() *V2reportsInfraspecificNames {
	this := V2reportsInfraspecificNames{}
	return &this
}

// GetBreed returns the Breed field value if set, zero value otherwise.
func (o *V2reportsInfraspecificNames) GetBreed() string {
	if o == nil || o.Breed == nil {
		var ret string
		return ret
	}
	return *o.Breed
}

// GetBreedOk returns a tuple with the Breed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsInfraspecificNames) GetBreedOk() (*string, bool) {
	if o == nil || o.Breed == nil {
		return nil, false
	}
	return o.Breed, true
}

// HasBreed returns a boolean if a field has been set.
func (o *V2reportsInfraspecificNames) HasBreed() bool {
	if o != nil && o.Breed != nil {
		return true
	}

	return false
}

// SetBreed gets a reference to the given string and assigns it to the Breed field.
func (o *V2reportsInfraspecificNames) SetBreed(v string) {
	o.Breed = &v
}

// GetCultivar returns the Cultivar field value if set, zero value otherwise.
func (o *V2reportsInfraspecificNames) GetCultivar() string {
	if o == nil || o.Cultivar == nil {
		var ret string
		return ret
	}
	return *o.Cultivar
}

// GetCultivarOk returns a tuple with the Cultivar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsInfraspecificNames) GetCultivarOk() (*string, bool) {
	if o == nil || o.Cultivar == nil {
		return nil, false
	}
	return o.Cultivar, true
}

// HasCultivar returns a boolean if a field has been set.
func (o *V2reportsInfraspecificNames) HasCultivar() bool {
	if o != nil && o.Cultivar != nil {
		return true
	}

	return false
}

// SetCultivar gets a reference to the given string and assigns it to the Cultivar field.
func (o *V2reportsInfraspecificNames) SetCultivar(v string) {
	o.Cultivar = &v
}

// GetEcotype returns the Ecotype field value if set, zero value otherwise.
func (o *V2reportsInfraspecificNames) GetEcotype() string {
	if o == nil || o.Ecotype == nil {
		var ret string
		return ret
	}
	return *o.Ecotype
}

// GetEcotypeOk returns a tuple with the Ecotype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsInfraspecificNames) GetEcotypeOk() (*string, bool) {
	if o == nil || o.Ecotype == nil {
		return nil, false
	}
	return o.Ecotype, true
}

// HasEcotype returns a boolean if a field has been set.
func (o *V2reportsInfraspecificNames) HasEcotype() bool {
	if o != nil && o.Ecotype != nil {
		return true
	}

	return false
}

// SetEcotype gets a reference to the given string and assigns it to the Ecotype field.
func (o *V2reportsInfraspecificNames) SetEcotype(v string) {
	o.Ecotype = &v
}

// GetIsolate returns the Isolate field value if set, zero value otherwise.
func (o *V2reportsInfraspecificNames) GetIsolate() string {
	if o == nil || o.Isolate == nil {
		var ret string
		return ret
	}
	return *o.Isolate
}

// GetIsolateOk returns a tuple with the Isolate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsInfraspecificNames) GetIsolateOk() (*string, bool) {
	if o == nil || o.Isolate == nil {
		return nil, false
	}
	return o.Isolate, true
}

// HasIsolate returns a boolean if a field has been set.
func (o *V2reportsInfraspecificNames) HasIsolate() bool {
	if o != nil && o.Isolate != nil {
		return true
	}

	return false
}

// SetIsolate gets a reference to the given string and assigns it to the Isolate field.
func (o *V2reportsInfraspecificNames) SetIsolate(v string) {
	o.Isolate = &v
}

// GetSex returns the Sex field value if set, zero value otherwise.
func (o *V2reportsInfraspecificNames) GetSex() string {
	if o == nil || o.Sex == nil {
		var ret string
		return ret
	}
	return *o.Sex
}

// GetSexOk returns a tuple with the Sex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsInfraspecificNames) GetSexOk() (*string, bool) {
	if o == nil || o.Sex == nil {
		return nil, false
	}
	return o.Sex, true
}

// HasSex returns a boolean if a field has been set.
func (o *V2reportsInfraspecificNames) HasSex() bool {
	if o != nil && o.Sex != nil {
		return true
	}

	return false
}

// SetSex gets a reference to the given string and assigns it to the Sex field.
func (o *V2reportsInfraspecificNames) SetSex(v string) {
	o.Sex = &v
}

// GetStrain returns the Strain field value if set, zero value otherwise.
func (o *V2reportsInfraspecificNames) GetStrain() string {
	if o == nil || o.Strain == nil {
		var ret string
		return ret
	}
	return *o.Strain
}

// GetStrainOk returns a tuple with the Strain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsInfraspecificNames) GetStrainOk() (*string, bool) {
	if o == nil || o.Strain == nil {
		return nil, false
	}
	return o.Strain, true
}

// HasStrain returns a boolean if a field has been set.
func (o *V2reportsInfraspecificNames) HasStrain() bool {
	if o != nil && o.Strain != nil {
		return true
	}

	return false
}

// SetStrain gets a reference to the given string and assigns it to the Strain field.
func (o *V2reportsInfraspecificNames) SetStrain(v string) {
	o.Strain = &v
}

func (o V2reportsInfraspecificNames) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Breed != nil {
		toSerialize["breed"] = o.Breed
	}
	if o.Cultivar != nil {
		toSerialize["cultivar"] = o.Cultivar
	}
	if o.Ecotype != nil {
		toSerialize["ecotype"] = o.Ecotype
	}
	if o.Isolate != nil {
		toSerialize["isolate"] = o.Isolate
	}
	if o.Sex != nil {
		toSerialize["sex"] = o.Sex
	}
	if o.Strain != nil {
		toSerialize["strain"] = o.Strain
	}
	return json.Marshal(toSerialize)
}

type NullableV2reportsInfraspecificNames struct {
	value *V2reportsInfraspecificNames
	isSet bool
}

func (v NullableV2reportsInfraspecificNames) Get() *V2reportsInfraspecificNames {
	return v.value
}

func (v *NullableV2reportsInfraspecificNames) Set(val *V2reportsInfraspecificNames) {
	v.value = val
	v.isSet = true
}

func (v NullableV2reportsInfraspecificNames) IsSet() bool {
	return v.isSet
}

func (v *NullableV2reportsInfraspecificNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2reportsInfraspecificNames(val *V2reportsInfraspecificNames) *NullableV2reportsInfraspecificNames {
	return &NullableV2reportsInfraspecificNames{value: val, isSet: true}
}

func (v NullableV2reportsInfraspecificNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2reportsInfraspecificNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


