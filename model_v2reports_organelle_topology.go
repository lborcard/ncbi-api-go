/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// V2reportsOrganelleTopology the model 'V2reportsOrganelleTopology'
type V2reportsOrganelleTopology string

// List of v2reportsOrganelleTopology
const (
	V2REPORTSORGANELLETOPOLOGY_TOPOLOGY_UNKNOWN V2reportsOrganelleTopology = "TOPOLOGY_UNKNOWN"
	V2REPORTSORGANELLETOPOLOGY_CIRCULAR V2reportsOrganelleTopology = "Circular"
	V2REPORTSORGANELLETOPOLOGY_LINEAR V2reportsOrganelleTopology = "Linear"
	V2REPORTSORGANELLETOPOLOGY_TANDEM V2reportsOrganelleTopology = "Tandem"
)

// All allowed values of V2reportsOrganelleTopology enum
var AllowedV2reportsOrganelleTopologyEnumValues = []V2reportsOrganelleTopology{
	"TOPOLOGY_UNKNOWN",
	"Circular",
	"Linear",
	"Tandem",
}

func (v *V2reportsOrganelleTopology) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V2reportsOrganelleTopology(value)
	for _, existing := range AllowedV2reportsOrganelleTopologyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V2reportsOrganelleTopology", value)
}

// NewV2reportsOrganelleTopologyFromValue returns a pointer to a valid V2reportsOrganelleTopology
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV2reportsOrganelleTopologyFromValue(v string) (*V2reportsOrganelleTopology, error) {
	ev := V2reportsOrganelleTopology(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V2reportsOrganelleTopology: valid values are %v", v, AllowedV2reportsOrganelleTopologyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V2reportsOrganelleTopology) IsValid() bool {
	for _, existing := range AllowedV2reportsOrganelleTopologyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v2reportsOrganelleTopology value
func (v V2reportsOrganelleTopology) Ptr() *V2reportsOrganelleTopology {
	return &v
}

type NullableV2reportsOrganelleTopology struct {
	value *V2reportsOrganelleTopology
	isSet bool
}

func (v NullableV2reportsOrganelleTopology) Get() *V2reportsOrganelleTopology {
	return v.value
}

func (v *NullableV2reportsOrganelleTopology) Set(val *V2reportsOrganelleTopology) {
	v.value = val
	v.isSet = true
}

func (v NullableV2reportsOrganelleTopology) IsSet() bool {
	return v.isSet
}

func (v *NullableV2reportsOrganelleTopology) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2reportsOrganelleTopology(val *V2reportsOrganelleTopology) *NullableV2reportsOrganelleTopology {
	return &NullableV2reportsOrganelleTopology{value: val, isSet: true}
}

func (v NullableV2reportsOrganelleTopology) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2reportsOrganelleTopology) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

