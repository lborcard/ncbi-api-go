/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// V2reportsGeneType the model 'V2reportsGeneType'
type V2reportsGeneType string

// List of v2reportsGeneType
const (
	V2REPORTSGENETYPE_UNKNOWN V2reportsGeneType = "UNKNOWN"
	V2REPORTSGENETYPE_T_RNA V2reportsGeneType = "tRNA"
	V2REPORTSGENETYPE_R_RNA V2reportsGeneType = "rRNA"
	V2REPORTSGENETYPE_SN_RNA V2reportsGeneType = "snRNA"
	V2REPORTSGENETYPE_SC_RNA V2reportsGeneType = "scRNA"
	V2REPORTSGENETYPE_SNO_RNA V2reportsGeneType = "snoRNA"
	V2REPORTSGENETYPE_PROTEIN_CODING V2reportsGeneType = "PROTEIN_CODING"
	V2REPORTSGENETYPE_PSEUDO V2reportsGeneType = "PSEUDO"
	V2REPORTSGENETYPE_TRANSPOSON V2reportsGeneType = "TRANSPOSON"
	V2REPORTSGENETYPE_MISC_RNA V2reportsGeneType = "miscRNA"
	V2REPORTSGENETYPE_NC_RNA V2reportsGeneType = "ncRNA"
	V2REPORTSGENETYPE_BIOLOGICAL_REGION V2reportsGeneType = "BIOLOGICAL_REGION"
	V2REPORTSGENETYPE_OTHER V2reportsGeneType = "OTHER"
)

// All allowed values of V2reportsGeneType enum
var AllowedV2reportsGeneTypeEnumValues = []V2reportsGeneType{
	"UNKNOWN",
	"tRNA",
	"rRNA",
	"snRNA",
	"scRNA",
	"snoRNA",
	"PROTEIN_CODING",
	"PSEUDO",
	"TRANSPOSON",
	"miscRNA",
	"ncRNA",
	"BIOLOGICAL_REGION",
	"OTHER",
}

func (v *V2reportsGeneType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V2reportsGeneType(value)
	for _, existing := range AllowedV2reportsGeneTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V2reportsGeneType", value)
}

// NewV2reportsGeneTypeFromValue returns a pointer to a valid V2reportsGeneType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV2reportsGeneTypeFromValue(v string) (*V2reportsGeneType, error) {
	ev := V2reportsGeneType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V2reportsGeneType: valid values are %v", v, AllowedV2reportsGeneTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V2reportsGeneType) IsValid() bool {
	for _, existing := range AllowedV2reportsGeneTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v2reportsGeneType value
func (v V2reportsGeneType) Ptr() *V2reportsGeneType {
	return &v
}

type NullableV2reportsGeneType struct {
	value *V2reportsGeneType
	isSet bool
}

func (v NullableV2reportsGeneType) Get() *V2reportsGeneType {
	return v.value
}

func (v *NullableV2reportsGeneType) Set(val *V2reportsGeneType) {
	v.value = val
	v.isSet = true
}

func (v NullableV2reportsGeneType) IsSet() bool {
	return v.isSet
}

func (v *NullableV2reportsGeneType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2reportsGeneType(val *V2reportsGeneType) *NullableV2reportsGeneType {
	return &NullableV2reportsGeneType{value: val, isSet: true}
}

func (v NullableV2reportsGeneType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2reportsGeneType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

