/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v2alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V2reportsAssemblyDataReport struct for V2reportsAssemblyDataReport
type V2reportsAssemblyDataReport struct {
	Accession *string `json:"accession,omitempty"`
	CurrentAccession *string `json:"current_accession,omitempty"`
	PairedAccession *string `json:"paired_accession,omitempty"`
	SourceDatabase *V2reportsSourceDatabase `json:"source_database,omitempty"`
	Organism *V2reportsOrganism `json:"organism,omitempty"`
	AssemblyInfo *V2reportsAssemblyInfo `json:"assembly_info,omitempty"`
	AssemblyStats *V2reportsAssemblyStats `json:"assembly_stats,omitempty"`
	OrganelleInfo []V2reportsOrganelleInfo `json:"organelle_info,omitempty"`
	AnnotationInfo *V2reportsAnnotationInfo `json:"annotation_info,omitempty"`
	WgsInfo *V2reportsWGSInfo `json:"wgs_info,omitempty"`
	TypeMaterial *V2reportsTypeMaterial `json:"type_material,omitempty"`
	CheckmInfo *V2reportsCheckM `json:"checkm_info,omitempty"`
	AverageNucleotideIdentity *V2reportsAverageNucleotideIdentity `json:"average_nucleotide_identity,omitempty"`
}

// NewV2reportsAssemblyDataReport instantiates a new V2reportsAssemblyDataReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2reportsAssemblyDataReport() *V2reportsAssemblyDataReport {
	this := V2reportsAssemblyDataReport{}
	var sourceDatabase V2reportsSourceDatabase = V2REPORTSSOURCEDATABASE_UNSPECIFIED
	this.SourceDatabase = &sourceDatabase
	return &this
}

// NewV2reportsAssemblyDataReportWithDefaults instantiates a new V2reportsAssemblyDataReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2reportsAssemblyDataReportWithDefaults() *V2reportsAssemblyDataReport {
	this := V2reportsAssemblyDataReport{}
	var sourceDatabase V2reportsSourceDatabase = V2REPORTSSOURCEDATABASE_UNSPECIFIED
	this.SourceDatabase = &sourceDatabase
	return &this
}

// GetAccession returns the Accession field value if set, zero value otherwise.
func (o *V2reportsAssemblyDataReport) GetAccession() string {
	if o == nil || o.Accession == nil {
		var ret string
		return ret
	}
	return *o.Accession
}

// GetAccessionOk returns a tuple with the Accession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsAssemblyDataReport) GetAccessionOk() (*string, bool) {
	if o == nil || o.Accession == nil {
		return nil, false
	}
	return o.Accession, true
}

// HasAccession returns a boolean if a field has been set.
func (o *V2reportsAssemblyDataReport) HasAccession() bool {
	if o != nil && o.Accession != nil {
		return true
	}

	return false
}

// SetAccession gets a reference to the given string and assigns it to the Accession field.
func (o *V2reportsAssemblyDataReport) SetAccession(v string) {
	o.Accession = &v
}

// GetCurrentAccession returns the CurrentAccession field value if set, zero value otherwise.
func (o *V2reportsAssemblyDataReport) GetCurrentAccession() string {
	if o == nil || o.CurrentAccession == nil {
		var ret string
		return ret
	}
	return *o.CurrentAccession
}

// GetCurrentAccessionOk returns a tuple with the CurrentAccession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsAssemblyDataReport) GetCurrentAccessionOk() (*string, bool) {
	if o == nil || o.CurrentAccession == nil {
		return nil, false
	}
	return o.CurrentAccession, true
}

// HasCurrentAccession returns a boolean if a field has been set.
func (o *V2reportsAssemblyDataReport) HasCurrentAccession() bool {
	if o != nil && o.CurrentAccession != nil {
		return true
	}

	return false
}

// SetCurrentAccession gets a reference to the given string and assigns it to the CurrentAccession field.
func (o *V2reportsAssemblyDataReport) SetCurrentAccession(v string) {
	o.CurrentAccession = &v
}

// GetPairedAccession returns the PairedAccession field value if set, zero value otherwise.
func (o *V2reportsAssemblyDataReport) GetPairedAccession() string {
	if o == nil || o.PairedAccession == nil {
		var ret string
		return ret
	}
	return *o.PairedAccession
}

// GetPairedAccessionOk returns a tuple with the PairedAccession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsAssemblyDataReport) GetPairedAccessionOk() (*string, bool) {
	if o == nil || o.PairedAccession == nil {
		return nil, false
	}
	return o.PairedAccession, true
}

// HasPairedAccession returns a boolean if a field has been set.
func (o *V2reportsAssemblyDataReport) HasPairedAccession() bool {
	if o != nil && o.PairedAccession != nil {
		return true
	}

	return false
}

// SetPairedAccession gets a reference to the given string and assigns it to the PairedAccession field.
func (o *V2reportsAssemblyDataReport) SetPairedAccession(v string) {
	o.PairedAccession = &v
}

// GetSourceDatabase returns the SourceDatabase field value if set, zero value otherwise.
func (o *V2reportsAssemblyDataReport) GetSourceDatabase() V2reportsSourceDatabase {
	if o == nil || o.SourceDatabase == nil {
		var ret V2reportsSourceDatabase
		return ret
	}
	return *o.SourceDatabase
}

// GetSourceDatabaseOk returns a tuple with the SourceDatabase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsAssemblyDataReport) GetSourceDatabaseOk() (*V2reportsSourceDatabase, bool) {
	if o == nil || o.SourceDatabase == nil {
		return nil, false
	}
	return o.SourceDatabase, true
}

// HasSourceDatabase returns a boolean if a field has been set.
func (o *V2reportsAssemblyDataReport) HasSourceDatabase() bool {
	if o != nil && o.SourceDatabase != nil {
		return true
	}

	return false
}

// SetSourceDatabase gets a reference to the given V2reportsSourceDatabase and assigns it to the SourceDatabase field.
func (o *V2reportsAssemblyDataReport) SetSourceDatabase(v V2reportsSourceDatabase) {
	o.SourceDatabase = &v
}

// GetOrganism returns the Organism field value if set, zero value otherwise.
func (o *V2reportsAssemblyDataReport) GetOrganism() V2reportsOrganism {
	if o == nil || o.Organism == nil {
		var ret V2reportsOrganism
		return ret
	}
	return *o.Organism
}

// GetOrganismOk returns a tuple with the Organism field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsAssemblyDataReport) GetOrganismOk() (*V2reportsOrganism, bool) {
	if o == nil || o.Organism == nil {
		return nil, false
	}
	return o.Organism, true
}

// HasOrganism returns a boolean if a field has been set.
func (o *V2reportsAssemblyDataReport) HasOrganism() bool {
	if o != nil && o.Organism != nil {
		return true
	}

	return false
}

// SetOrganism gets a reference to the given V2reportsOrganism and assigns it to the Organism field.
func (o *V2reportsAssemblyDataReport) SetOrganism(v V2reportsOrganism) {
	o.Organism = &v
}

// GetAssemblyInfo returns the AssemblyInfo field value if set, zero value otherwise.
func (o *V2reportsAssemblyDataReport) GetAssemblyInfo() V2reportsAssemblyInfo {
	if o == nil || o.AssemblyInfo == nil {
		var ret V2reportsAssemblyInfo
		return ret
	}
	return *o.AssemblyInfo
}

// GetAssemblyInfoOk returns a tuple with the AssemblyInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsAssemblyDataReport) GetAssemblyInfoOk() (*V2reportsAssemblyInfo, bool) {
	if o == nil || o.AssemblyInfo == nil {
		return nil, false
	}
	return o.AssemblyInfo, true
}

// HasAssemblyInfo returns a boolean if a field has been set.
func (o *V2reportsAssemblyDataReport) HasAssemblyInfo() bool {
	if o != nil && o.AssemblyInfo != nil {
		return true
	}

	return false
}

// SetAssemblyInfo gets a reference to the given V2reportsAssemblyInfo and assigns it to the AssemblyInfo field.
func (o *V2reportsAssemblyDataReport) SetAssemblyInfo(v V2reportsAssemblyInfo) {
	o.AssemblyInfo = &v
}

// GetAssemblyStats returns the AssemblyStats field value if set, zero value otherwise.
func (o *V2reportsAssemblyDataReport) GetAssemblyStats() V2reportsAssemblyStats {
	if o == nil || o.AssemblyStats == nil {
		var ret V2reportsAssemblyStats
		return ret
	}
	return *o.AssemblyStats
}

// GetAssemblyStatsOk returns a tuple with the AssemblyStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsAssemblyDataReport) GetAssemblyStatsOk() (*V2reportsAssemblyStats, bool) {
	if o == nil || o.AssemblyStats == nil {
		return nil, false
	}
	return o.AssemblyStats, true
}

// HasAssemblyStats returns a boolean if a field has been set.
func (o *V2reportsAssemblyDataReport) HasAssemblyStats() bool {
	if o != nil && o.AssemblyStats != nil {
		return true
	}

	return false
}

// SetAssemblyStats gets a reference to the given V2reportsAssemblyStats and assigns it to the AssemblyStats field.
func (o *V2reportsAssemblyDataReport) SetAssemblyStats(v V2reportsAssemblyStats) {
	o.AssemblyStats = &v
}

// GetOrganelleInfo returns the OrganelleInfo field value if set, zero value otherwise.
func (o *V2reportsAssemblyDataReport) GetOrganelleInfo() []V2reportsOrganelleInfo {
	if o == nil || o.OrganelleInfo == nil {
		var ret []V2reportsOrganelleInfo
		return ret
	}
	return o.OrganelleInfo
}

// GetOrganelleInfoOk returns a tuple with the OrganelleInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsAssemblyDataReport) GetOrganelleInfoOk() ([]V2reportsOrganelleInfo, bool) {
	if o == nil || o.OrganelleInfo == nil {
		return nil, false
	}
	return o.OrganelleInfo, true
}

// HasOrganelleInfo returns a boolean if a field has been set.
func (o *V2reportsAssemblyDataReport) HasOrganelleInfo() bool {
	if o != nil && o.OrganelleInfo != nil {
		return true
	}

	return false
}

// SetOrganelleInfo gets a reference to the given []V2reportsOrganelleInfo and assigns it to the OrganelleInfo field.
func (o *V2reportsAssemblyDataReport) SetOrganelleInfo(v []V2reportsOrganelleInfo) {
	o.OrganelleInfo = v
}

// GetAnnotationInfo returns the AnnotationInfo field value if set, zero value otherwise.
func (o *V2reportsAssemblyDataReport) GetAnnotationInfo() V2reportsAnnotationInfo {
	if o == nil || o.AnnotationInfo == nil {
		var ret V2reportsAnnotationInfo
		return ret
	}
	return *o.AnnotationInfo
}

// GetAnnotationInfoOk returns a tuple with the AnnotationInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsAssemblyDataReport) GetAnnotationInfoOk() (*V2reportsAnnotationInfo, bool) {
	if o == nil || o.AnnotationInfo == nil {
		return nil, false
	}
	return o.AnnotationInfo, true
}

// HasAnnotationInfo returns a boolean if a field has been set.
func (o *V2reportsAssemblyDataReport) HasAnnotationInfo() bool {
	if o != nil && o.AnnotationInfo != nil {
		return true
	}

	return false
}

// SetAnnotationInfo gets a reference to the given V2reportsAnnotationInfo and assigns it to the AnnotationInfo field.
func (o *V2reportsAssemblyDataReport) SetAnnotationInfo(v V2reportsAnnotationInfo) {
	o.AnnotationInfo = &v
}

// GetWgsInfo returns the WgsInfo field value if set, zero value otherwise.
func (o *V2reportsAssemblyDataReport) GetWgsInfo() V2reportsWGSInfo {
	if o == nil || o.WgsInfo == nil {
		var ret V2reportsWGSInfo
		return ret
	}
	return *o.WgsInfo
}

// GetWgsInfoOk returns a tuple with the WgsInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsAssemblyDataReport) GetWgsInfoOk() (*V2reportsWGSInfo, bool) {
	if o == nil || o.WgsInfo == nil {
		return nil, false
	}
	return o.WgsInfo, true
}

// HasWgsInfo returns a boolean if a field has been set.
func (o *V2reportsAssemblyDataReport) HasWgsInfo() bool {
	if o != nil && o.WgsInfo != nil {
		return true
	}

	return false
}

// SetWgsInfo gets a reference to the given V2reportsWGSInfo and assigns it to the WgsInfo field.
func (o *V2reportsAssemblyDataReport) SetWgsInfo(v V2reportsWGSInfo) {
	o.WgsInfo = &v
}

// GetTypeMaterial returns the TypeMaterial field value if set, zero value otherwise.
func (o *V2reportsAssemblyDataReport) GetTypeMaterial() V2reportsTypeMaterial {
	if o == nil || o.TypeMaterial == nil {
		var ret V2reportsTypeMaterial
		return ret
	}
	return *o.TypeMaterial
}

// GetTypeMaterialOk returns a tuple with the TypeMaterial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsAssemblyDataReport) GetTypeMaterialOk() (*V2reportsTypeMaterial, bool) {
	if o == nil || o.TypeMaterial == nil {
		return nil, false
	}
	return o.TypeMaterial, true
}

// HasTypeMaterial returns a boolean if a field has been set.
func (o *V2reportsAssemblyDataReport) HasTypeMaterial() bool {
	if o != nil && o.TypeMaterial != nil {
		return true
	}

	return false
}

// SetTypeMaterial gets a reference to the given V2reportsTypeMaterial and assigns it to the TypeMaterial field.
func (o *V2reportsAssemblyDataReport) SetTypeMaterial(v V2reportsTypeMaterial) {
	o.TypeMaterial = &v
}

// GetCheckmInfo returns the CheckmInfo field value if set, zero value otherwise.
func (o *V2reportsAssemblyDataReport) GetCheckmInfo() V2reportsCheckM {
	if o == nil || o.CheckmInfo == nil {
		var ret V2reportsCheckM
		return ret
	}
	return *o.CheckmInfo
}

// GetCheckmInfoOk returns a tuple with the CheckmInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsAssemblyDataReport) GetCheckmInfoOk() (*V2reportsCheckM, bool) {
	if o == nil || o.CheckmInfo == nil {
		return nil, false
	}
	return o.CheckmInfo, true
}

// HasCheckmInfo returns a boolean if a field has been set.
func (o *V2reportsAssemblyDataReport) HasCheckmInfo() bool {
	if o != nil && o.CheckmInfo != nil {
		return true
	}

	return false
}

// SetCheckmInfo gets a reference to the given V2reportsCheckM and assigns it to the CheckmInfo field.
func (o *V2reportsAssemblyDataReport) SetCheckmInfo(v V2reportsCheckM) {
	o.CheckmInfo = &v
}

// GetAverageNucleotideIdentity returns the AverageNucleotideIdentity field value if set, zero value otherwise.
func (o *V2reportsAssemblyDataReport) GetAverageNucleotideIdentity() V2reportsAverageNucleotideIdentity {
	if o == nil || o.AverageNucleotideIdentity == nil {
		var ret V2reportsAverageNucleotideIdentity
		return ret
	}
	return *o.AverageNucleotideIdentity
}

// GetAverageNucleotideIdentityOk returns a tuple with the AverageNucleotideIdentity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2reportsAssemblyDataReport) GetAverageNucleotideIdentityOk() (*V2reportsAverageNucleotideIdentity, bool) {
	if o == nil || o.AverageNucleotideIdentity == nil {
		return nil, false
	}
	return o.AverageNucleotideIdentity, true
}

// HasAverageNucleotideIdentity returns a boolean if a field has been set.
func (o *V2reportsAssemblyDataReport) HasAverageNucleotideIdentity() bool {
	if o != nil && o.AverageNucleotideIdentity != nil {
		return true
	}

	return false
}

// SetAverageNucleotideIdentity gets a reference to the given V2reportsAverageNucleotideIdentity and assigns it to the AverageNucleotideIdentity field.
func (o *V2reportsAssemblyDataReport) SetAverageNucleotideIdentity(v V2reportsAverageNucleotideIdentity) {
	o.AverageNucleotideIdentity = &v
}

func (o V2reportsAssemblyDataReport) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Accession != nil {
		toSerialize["accession"] = o.Accession
	}
	if o.CurrentAccession != nil {
		toSerialize["current_accession"] = o.CurrentAccession
	}
	if o.PairedAccession != nil {
		toSerialize["paired_accession"] = o.PairedAccession
	}
	if o.SourceDatabase != nil {
		toSerialize["source_database"] = o.SourceDatabase
	}
	if o.Organism != nil {
		toSerialize["organism"] = o.Organism
	}
	if o.AssemblyInfo != nil {
		toSerialize["assembly_info"] = o.AssemblyInfo
	}
	if o.AssemblyStats != nil {
		toSerialize["assembly_stats"] = o.AssemblyStats
	}
	if o.OrganelleInfo != nil {
		toSerialize["organelle_info"] = o.OrganelleInfo
	}
	if o.AnnotationInfo != nil {
		toSerialize["annotation_info"] = o.AnnotationInfo
	}
	if o.WgsInfo != nil {
		toSerialize["wgs_info"] = o.WgsInfo
	}
	if o.TypeMaterial != nil {
		toSerialize["type_material"] = o.TypeMaterial
	}
	if o.CheckmInfo != nil {
		toSerialize["checkm_info"] = o.CheckmInfo
	}
	if o.AverageNucleotideIdentity != nil {
		toSerialize["average_nucleotide_identity"] = o.AverageNucleotideIdentity
	}
	return json.Marshal(toSerialize)
}

type NullableV2reportsAssemblyDataReport struct {
	value *V2reportsAssemblyDataReport
	isSet bool
}

func (v NullableV2reportsAssemblyDataReport) Get() *V2reportsAssemblyDataReport {
	return v.value
}

func (v *NullableV2reportsAssemblyDataReport) Set(val *V2reportsAssemblyDataReport) {
	v.value = val
	v.isSet = true
}

func (v NullableV2reportsAssemblyDataReport) IsSet() bool {
	return v.isSet
}

func (v *NullableV2reportsAssemblyDataReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2reportsAssemblyDataReport(val *V2reportsAssemblyDataReport) *NullableV2reportsAssemblyDataReport {
	return &NullableV2reportsAssemblyDataReport{value: val, isSet: true}
}

func (v NullableV2reportsAssemblyDataReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2reportsAssemblyDataReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


